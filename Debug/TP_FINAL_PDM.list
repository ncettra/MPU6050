
TP_FINAL_PDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b20  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08006c30  08006c30  00016c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800717c  0800717c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800717c  0800717c  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800717c  0800717c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08007184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001f8  0800737c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  0800737c  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000997a  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b37  00000000  00000000  00029b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002b6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002c0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018990  00000000  00000000  0002ca38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cad4  00000000  00000000  000453c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867bf  00000000  00000000  00051e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d865b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b1c  00000000  00000000  000d86ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c18 	.word	0x08006c18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08006c18 	.word	0x08006c18

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__gesf2>:
 8000d44:	f04f 3cff 	mov.w	ip, #4294967295
 8000d48:	e006      	b.n	8000d58 <__cmpsf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__lesf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	e002      	b.n	8000d58 <__cmpsf2+0x4>
 8000d52:	bf00      	nop

08000d54 <__cmpsf2>:
 8000d54:	f04f 0c01 	mov.w	ip, #1
 8000d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d68:	bf18      	it	ne
 8000d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d6e:	d011      	beq.n	8000d94 <__cmpsf2+0x40>
 8000d70:	b001      	add	sp, #4
 8000d72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d76:	bf18      	it	ne
 8000d78:	ea90 0f01 	teqne	r0, r1
 8000d7c:	bf58      	it	pl
 8000d7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d82:	bf88      	it	hi
 8000d84:	17c8      	asrhi	r0, r1, #31
 8000d86:	bf38      	it	cc
 8000d88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d8c:	bf18      	it	ne
 8000d8e:	f040 0001 	orrne.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	d102      	bne.n	8000da0 <__cmpsf2+0x4c>
 8000d9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d9e:	d105      	bne.n	8000dac <__cmpsf2+0x58>
 8000da0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da4:	d1e4      	bne.n	8000d70 <__cmpsf2+0x1c>
 8000da6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000daa:	d0e1      	beq.n	8000d70 <__cmpsf2+0x1c>
 8000dac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <__aeabi_cfrcmple>:
 8000db4:	4684      	mov	ip, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4661      	mov	r1, ip
 8000dba:	e7ff      	b.n	8000dbc <__aeabi_cfcmpeq>

08000dbc <__aeabi_cfcmpeq>:
 8000dbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dbe:	f7ff ffc9 	bl	8000d54 <__cmpsf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	bf48      	it	mi
 8000dc6:	f110 0f00 	cmnmi.w	r0, #0
 8000dca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dcc <__aeabi_fcmpeq>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff fff4 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2001      	moveq	r0, #1
 8000dd8:	2000      	movne	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmplt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffea 	bl	8000dbc <__aeabi_cfcmpeq>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmple>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffe0 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpge>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffd2 	bl	8000db4 <__aeabi_cfrcmple>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpgt>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffc8 	bl	8000db4 <__aeabi_cfrcmple>
 8000e24:	bf34      	ite	cc
 8000e26:	2001      	movcc	r0, #1
 8000e28:	2000      	movcs	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <__aeabi_f2iz>:
 8000e30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e38:	d30f      	bcc.n	8000e5a <__aeabi_f2iz+0x2a>
 8000e3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e42:	d90d      	bls.n	8000e60 <__aeabi_f2iz+0x30>
 8000e44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e50:	fa23 f002 	lsr.w	r0, r3, r2
 8000e54:	bf18      	it	ne
 8000e56:	4240      	negne	r0, r0
 8000e58:	4770      	bx	lr
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	4770      	bx	lr
 8000e60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e64:	d101      	bne.n	8000e6a <__aeabi_f2iz+0x3a>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	d105      	bne.n	8000e76 <__aeabi_f2iz+0x46>
 8000e6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e6e:	bf08      	it	eq
 8000e70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f04f 0000 	mov.w	r0, #0
 8000e7a:	4770      	bx	lr

08000e7c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e80:	f3bf 8f4f 	dsb	sy
}
 8000e84:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <__NVIC_SystemReset+0x24>)
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e8e:	4904      	ldr	r1, [pc, #16]	; (8000ea0 <__NVIC_SystemReset+0x24>)
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_SystemReset+0x28>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <__NVIC_SystemReset+0x20>
 8000ea0:	e000ed00 	.word	0xe000ed00
 8000ea4:	05fa0004 	.word	0x05fa0004

08000ea8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000eac:	b0dc      	sub	sp, #368	; 0x170
 8000eae:	af0c      	add	r7, sp, #48	; 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eb0:	f000 fe9e 	bl	8001bf0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000eb4:	f000 f8cc 	bl	8001050 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000eb8:	f000 f968 	bl	800118c <MX_GPIO_Init>
	MX_I2C1_Init();
 8000ebc:	f000 f90e 	bl	80010dc <MX_I2C1_Init>
	MX_USART3_UART_Init();
 8000ec0:	f000 f93a 	bl	8001138 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	485a      	ldr	r0, [pc, #360]	; (8001034 <main+0x18c>)
 8000eca:	f001 f996 	bl	80021fa <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed2:	f000 feef 	bl	8001cb4 <HAL_Delay>
	HAL_UART_Transmit(&huart3,(uint8_t *)MCU_INIT_MSG,strlen(MCU_INIT_MSG),10);
 8000ed6:	4b58      	ldr	r3, [pc, #352]	; (8001038 <main+0x190>)
 8000ed8:	681c      	ldr	r4, [r3, #0]
 8000eda:	4b57      	ldr	r3, [pc, #348]	; (8001038 <main+0x190>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff f936 	bl	8000150 <strlen>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	230a      	movs	r3, #10
 8000eea:	4621      	mov	r1, r4
 8000eec:	4853      	ldr	r0, [pc, #332]	; (800103c <main+0x194>)
 8000eee:	f002 fe1c 	bl	8003b2a <HAL_UART_Transmit>

	//Para debugear por puerto serie
	delayInit(&uartDebugDelay, 2000);
 8000ef2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000ef6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fe24 	bl	8001b48 <delayInit>
	char formatData[256];

	//Inicializamos el MPU
	while (!mpuInit(&hi2c1)){
 8000f00:	bf00      	nop
 8000f02:	484f      	ldr	r0, [pc, #316]	; (8001040 <main+0x198>)
 8000f04:	f000 fb8f 	bl	8001626 <mpuInit>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	f083 0301 	eor.w	r3, r3, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00f      	beq.n	8000f34 <main+0x8c>
		HAL_UART_Transmit(&huart3,(uint8_t*)MPU6050_ERROR_MSG,strlen(MPU6050_ERROR_MSG),10);
 8000f14:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <main+0x19c>)
 8000f16:	681c      	ldr	r4, [r3, #0]
 8000f18:	4b4a      	ldr	r3, [pc, #296]	; (8001044 <main+0x19c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff f917 	bl	8000150 <strlen>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	230a      	movs	r3, #10
 8000f28:	4621      	mov	r1, r4
 8000f2a:	4844      	ldr	r0, [pc, #272]	; (800103c <main+0x194>)
 8000f2c:	f002 fdfd 	bl	8003b2a <HAL_UART_Transmit>
		NVIC_SystemReset();
 8000f30:	f7ff ffa4 	bl	8000e7c <__NVIC_SystemReset>
	}
	HAL_UART_Transmit(&huart3,(uint8_t*)MPU6050_INIT_MSG,strlen(MPU6050_INIT_MSG),10);
 8000f34:	4b44      	ldr	r3, [pc, #272]	; (8001048 <main+0x1a0>)
 8000f36:	681c      	ldr	r4, [r3, #0]
 8000f38:	4b43      	ldr	r3, [pc, #268]	; (8001048 <main+0x1a0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff f907 	bl	8000150 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	230a      	movs	r3, #10
 8000f48:	4621      	mov	r1, r4
 8000f4a:	483c      	ldr	r0, [pc, #240]	; (800103c <main+0x194>)
 8000f4c:	f002 fded 	bl	8003b2a <HAL_UART_Transmit>
	initAlertControl(1,5000,&huart3); //Inicio la MEF
 8000f50:	4a3a      	ldr	r2, [pc, #232]	; (800103c <main+0x194>)
 8000f52:	f241 3188 	movw	r1, #5000	; 0x1388
 8000f56:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000f5a:	f000 fcb1 	bl	80018c0 <initAlertControl>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		mpuUpdate(&hi2c1,&mpu6050); //Actualizamos el estado del mpu
 8000f5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f62:	4619      	mov	r1, r3
 8000f64:	4836      	ldr	r0, [pc, #216]	; (8001040 <main+0x198>)
 8000f66:	f000 fbbb 	bl	80016e0 <mpuUpdate>
		checkAlertControl(&mpu6050, &huart3); //Chequeamos la MEF
 8000f6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f6e:	4933      	ldr	r1, [pc, #204]	; (800103c <main+0x194>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fceb 	bl	800194c <checkAlertControl>
		if(delayRead(&uartDebugDelay)){
 8000f76:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fdf8 	bl	8001b70 <delayRead>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0eb      	beq.n	8000f5e <main+0xb6>
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000f86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fa4c 	bl	8000428 <__aeabi_f2d>
 8000f90:	e9c7 0104 	strd	r0, r1, [r7, #16]
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fa45 	bl	8000428 <__aeabi_f2d>
 8000f9e:	4680      	mov	r8, r0
 8000fa0:	4689      	mov	r9, r1
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000fa2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa3e 	bl	8000428 <__aeabi_f2d>
 8000fac:	4682      	mov	sl, r0
 8000fae:	468b      	mov	fp, r1
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000fb0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fa37 	bl	8000428 <__aeabi_f2d>
 8000fba:	e9c7 0102 	strd	r0, r1, [r7, #8]
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fa30 	bl	8000428 <__aeabi_f2d>
 8000fc8:	e9c7 0100 	strd	r0, r1, [r7]
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa29 	bl	8000428 <__aeabi_f2d>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	460d      	mov	r5, r1
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000fda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fa22 	bl	8000428 <__aeabi_f2d>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	f107 0018 	add.w	r0, r7, #24
 8000fec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000ff0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8000ff4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ff8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8000ffc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001000:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001004:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001008:	e9cd 8900 	strd	r8, r9, [sp]
 800100c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001010:	490e      	ldr	r1, [pc, #56]	; (800104c <main+0x1a4>)
 8001012:	f003 fb87 	bl	8004724 <siprintf>
			HAL_UART_Transmit(&huart3,(uint8_t*)formatData,strlen(formatData),100);
 8001016:	f107 0318 	add.w	r3, r7, #24
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff f898 	bl	8000150 <strlen>
 8001020:	4603      	mov	r3, r0
 8001022:	b29a      	uxth	r2, r3
 8001024:	f107 0118 	add.w	r1, r7, #24
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	4804      	ldr	r0, [pc, #16]	; (800103c <main+0x194>)
 800102c:	f002 fd7d 	bl	8003b2a <HAL_UART_Transmit>
		mpuUpdate(&hi2c1,&mpu6050); //Actualizamos el estado del mpu
 8001030:	e795      	b.n	8000f5e <main+0xb6>
 8001032:	bf00      	nop
 8001034:	40010800 	.word	0x40010800
 8001038:	20000000 	.word	0x20000000
 800103c:	20000268 	.word	0x20000268
 8001040:	20000214 	.word	0x20000214
 8001044:	20000004 	.word	0x20000004
 8001048:	20000008 	.word	0x20000008
 800104c:	08006c80 	.word	0x08006c80

08001050 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b090      	sub	sp, #64	; 0x40
 8001054:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0318 	add.w	r3, r7, #24
 800105a:	2228      	movs	r2, #40	; 0x28
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f002 fef8 	bl	8003e54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001080:	2301      	movs	r3, #1
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001084:	2302      	movs	r3, #2
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800108e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001092:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	4618      	mov	r0, r3
 800109a:	f002 f8df 	bl	800325c <HAL_RCC_OscConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80010a4:	f000 f8ea 	bl	800127c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a8:	230f      	movs	r3, #15
 80010aa:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ac:	2302      	movs	r3, #2
 80010ae:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2102      	movs	r1, #2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fb4c 	bl	8003760 <HAL_RCC_ClockConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x82>
	{
		Error_Handler();
 80010ce:	f000 f8d5 	bl	800127c <Error_Handler>
	}
}
 80010d2:	bf00      	nop
 80010d4:	3740      	adds	r7, #64	; 0x40
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <MX_I2C1_Init+0x50>)
 80010e2:	4a13      	ldr	r2, [pc, #76]	; (8001130 <MX_I2C1_Init+0x54>)
 80010e4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_I2C1_Init+0x50>)
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <MX_I2C1_Init+0x58>)
 80010ea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_I2C1_Init+0x50>)
 80010fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010fe:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_I2C1_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_I2C1_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_I2C1_Init+0x50>)
 800111a:	f001 f89f 	bl	800225c <HAL_I2C_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001124:	f000 f8aa 	bl	800127c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000214 	.word	0x20000214
 8001130:	40005400 	.word	0x40005400
 8001134:	000186a0 	.word	0x000186a0

08001138 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <MX_USART3_UART_Init+0x50>)
 8001140:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 8001170:	f002 fc8e 	bl	8003a90 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800117a:	f000 f87f 	bl	800127c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000268 	.word	0x20000268
 8001188:	40004800 	.word	0x40004800

0800118c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011a0:	4b33      	ldr	r3, [pc, #204]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a32      	ldr	r2, [pc, #200]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011a6:	f043 0310 	orr.w	r3, r3, #16
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b30      	ldr	r3, [pc, #192]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a2c      	ldr	r2, [pc, #176]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011be:	f043 0320 	orr.w	r3, r3, #32
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0320 	and.w	r3, r3, #32
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a26      	ldr	r2, [pc, #152]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a20      	ldr	r2, [pc, #128]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011ee:	f043 0308 	orr.w	r3, r3, #8
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001206:	481b      	ldr	r0, [pc, #108]	; (8001274 <MX_GPIO_Init+0xe8>)
 8001208:	f000 fff7 	bl	80021fa <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2106      	movs	r1, #6
 8001210:	4819      	ldr	r0, [pc, #100]	; (8001278 <MX_GPIO_Init+0xec>)
 8001212:	f000 fff2 	bl	80021fa <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_1_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin;
 8001216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2302      	movs	r3, #2
 8001226:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_GPIO_Init+0xe8>)
 8001230:	f000 fe48 	bl	8001ec4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUZZER_Pin PA2 */
	GPIO_InitStruct.Pin = BUZZER_Pin|GPIO_PIN_2;
 8001234:	2306      	movs	r3, #6
 8001236:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2302      	movs	r3, #2
 8001242:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4619      	mov	r1, r3
 800124a:	480b      	ldr	r0, [pc, #44]	; (8001278 <MX_GPIO_Init+0xec>)
 800124c:	f000 fe3a 	bl	8001ec4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001250:	2308      	movs	r3, #8
 8001252:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_GPIO_Init+0xec>)
 8001264:	f000 fe2e 	bl	8001ec4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000
 8001274:	40011000 	.word	0x40011000
 8001278:	40010800 	.word	0x40010800

0800127c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_MspInit+0x5c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <HAL_MspInit+0x5c>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_MspInit+0x5c>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_MspInit+0x5c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_MspInit+0x60>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_MspInit+0x60>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000

080012ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <HAL_I2C_MspInit+0x70>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d123      	bne.n	8001354 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_I2C_MspInit+0x74>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a13      	ldr	r2, [pc, #76]	; (8001360 <HAL_I2C_MspInit+0x74>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_I2C_MspInit+0x74>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001324:	23c0      	movs	r3, #192	; 0xc0
 8001326:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001328:	2312      	movs	r3, #18
 800132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	4619      	mov	r1, r3
 8001336:	480b      	ldr	r0, [pc, #44]	; (8001364 <HAL_I2C_MspInit+0x78>)
 8001338:	f000 fdc4 	bl	8001ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_I2C_MspInit+0x74>)
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_I2C_MspInit+0x74>)
 8001342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001346:	61d3      	str	r3, [r2, #28]
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_I2C_MspInit+0x74>)
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40005400 	.word	0x40005400
 8001360:	40021000 	.word	0x40021000
 8001364:	40010c00 	.word	0x40010c00

08001368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <HAL_UART_MspInit+0x8c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d131      	bne.n	80013ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_UART_MspInit+0x90>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	4a1a      	ldr	r2, [pc, #104]	; (80013f8 <HAL_UART_MspInit+0x90>)
 800138e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001392:	61d3      	str	r3, [r2, #28]
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_UART_MspInit+0x90>)
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_UART_MspInit+0x90>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <HAL_UART_MspInit+0x90>)
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_UART_MspInit+0x90>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	4619      	mov	r1, r3
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <HAL_UART_MspInit+0x94>)
 80013ce:	f000 fd79 	bl	8001ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4619      	mov	r1, r3
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <HAL_UART_MspInit+0x94>)
 80013e8:	f000 fd6c 	bl	8001ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40004800 	.word	0x40004800
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010c00 	.word	0x40010c00

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001446:	f000 fc19 	bl	8001c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}

0800144e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  return 1;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <_kill>:

int _kill(int pid, int sig)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001466:	f002 fccb 	bl	8003e00 <__errno>
 800146a:	4603      	mov	r3, r0
 800146c:	2216      	movs	r2, #22
 800146e:	601a      	str	r2, [r3, #0]
  return -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_exit>:

void _exit (int status)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ffe7 	bl	800145c <_kill>
  while (1) {}    /* Make sure we hang here */
 800148e:	e7fe      	b.n	800148e <_exit+0x12>

08001490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	e00a      	b.n	80014b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014a2:	f3af 8000 	nop.w
 80014a6:	4601      	mov	r1, r0
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	60ba      	str	r2, [r7, #8]
 80014ae:	b2ca      	uxtb	r2, r1
 80014b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbf0      	blt.n	80014a2 <_read+0x12>
  }

  return len;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e009      	b.n	80014f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf1      	blt.n	80014dc <_write+0x12>
  }
  return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_close>:

int _close(int file)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001528:	605a      	str	r2, [r3, #4]
  return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <_isatty>:

int _isatty(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
	...

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f002 fc34 	bl	8003e00 <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20005000 	.word	0x20005000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	200002ac 	.word	0x200002ac
 80015cc:	200002e0 	.word	0x200002e0

080015d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015de:	490d      	ldr	r1, [pc, #52]	; (8001614 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015f4:	4c0a      	ldr	r4, [pc, #40]	; (8001620 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001602:	f7ff ffe5 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f002 fc01 	bl	8003e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160a:	f7ff fc4d 	bl	8000ea8 <main>
  bx lr
 800160e:	4770      	bx	lr
  ldr r0, =_sdata
 8001610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001614:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001618:	08007184 	.word	0x08007184
  ldr r2, =_sbss
 800161c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001620:	200002e0 	.word	0x200002e0

08001624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC1_2_IRQHandler>

08001626 <mpuInit>:
/*
 * @brief Inicializa la comunicacion i2c con el MPU6050 y lo configura
 * @param [in] hi2c: Puntero al delegado i2c donde esta conectado el mpu
 * @return true si inicializo correctamente, false caso contrario
 */
bool mpuInit(I2C_HandleTypeDef * hi2c){
 8001626:	b580      	push	{r7, lr}
 8001628:	b088      	sub	sp, #32
 800162a:	af04      	add	r7, sp, #16
 800162c:	6078      	str	r0, [r7, #4]
	 *Lo ideal seria crear una estructura de configuracion, esto es porque cuando recibo, las conversiones dependen
	 *de como ha sido configurado el mpu6050. Por ahora es fijo para simplificar el driver.
	 */

	uint8_t data;
	uint8_t powerManagementData = 0x00;
 800162e:	2300      	movs	r3, #0
 8001630:	73bb      	strb	r3, [r7, #14]
	uint8_t updateDataRate = 0x07; //divisor para el muestreo
 8001632:	2307      	movs	r3, #7
 8001634:	737b      	strb	r3, [r7, #13]
	uint8_t accConfig = 0b00000000; //Pag 15
 8001636:	2300      	movs	r3, #0
 8001638:	733b      	strb	r3, [r7, #12]
	uint8_t gyroConfig = 0b00000000; //Pag 14
 800163a:	2300      	movs	r3, #0
 800163c:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Mem_Read(hi2c,MPU6050_ADDRESS,MPU6050_WHO_AM_I,1,&data,1,MPU6050_I2C_TIMEOUT);
 800163e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2301      	movs	r3, #1
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	f107 030f 	add.w	r3, r7, #15
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2301      	movs	r3, #1
 8001650:	2275      	movs	r2, #117	; 0x75
 8001652:	21d0      	movs	r1, #208	; 0xd0
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f001 f83f 	bl	80026d8 <HAL_I2C_Mem_Read>

	//Si todo va bien tiene que devolver un 0x68
	if (data == 0x68){
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b68      	cmp	r3, #104	; 0x68
 800165e:	d139      	bne.n	80016d4 <mpuInit+0xae>
		//Ahora vamos a configurar el MPU6050
		HAL_I2C_Mem_Write(hi2c, MPU6050_ADDRESS, MPU6050_POWER_MGM_REGISTER, 1, &powerManagementData, 1, MPU6050_I2C_TIMEOUT);
 8001660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2301      	movs	r3, #1
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	f107 030e 	add.w	r3, r7, #14
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2301      	movs	r3, #1
 8001672:	226b      	movs	r2, #107	; 0x6b
 8001674:	21d0      	movs	r1, #208	; 0xd0
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 ff34 	bl	80024e4 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c, MPU6050_ADDRESS, MPU6050_SAMPLING_DIV_REGISTER, 1, &updateDataRate, 1, MPU6050_I2C_TIMEOUT);
 800167c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001680:	9302      	str	r3, [sp, #8]
 8001682:	2301      	movs	r3, #1
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	f107 030d 	add.w	r3, r7, #13
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	2219      	movs	r2, #25
 8001690:	21d0      	movs	r1, #208	; 0xd0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 ff26 	bl	80024e4 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c, MPU6050_ADDRESS, MPU6050_ACC_CONFIG_REGISTER, 1, &accConfig, 1, MPU6050_I2C_TIMEOUT);
 8001698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2301      	movs	r3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	221c      	movs	r2, #28
 80016ac:	21d0      	movs	r1, #208	; 0xd0
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 ff18 	bl	80024e4 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c, MPU6050_ADDRESS, MPU6050_GYRO_CONFIG_REGISTER, 1, &gyroConfig, 1, MPU6050_I2C_TIMEOUT);
 80016b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b8:	9302      	str	r3, [sp, #8]
 80016ba:	2301      	movs	r3, #1
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	f107 030b 	add.w	r3, r7, #11
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2301      	movs	r3, #1
 80016c6:	221b      	movs	r2, #27
 80016c8:	21d0      	movs	r1, #208	; 0xd0
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 ff0a 	bl	80024e4 <HAL_I2C_Mem_Write>
		return true;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <mpuInit+0xb0>
	}
	else{
		return false;
 80016d4:	2300      	movs	r3, #0
	}
	return true;
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <mpuUpdate>:
/*
 * @brief Actualiza la estructura de datos del mpu6050
 * @param [in] hi2c: Puntero al delegado i2c donde esta conectado el mpu
 * @param [in] mpu: Puntero a la estructura de datos del mpu6050
 */
void mpuUpdate(I2C_HandleTypeDef * hi2c, mpu6050_t * mpu){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08e      	sub	sp, #56	; 0x38
 80016e4:	af04      	add	r7, sp, #16
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]

	uint8_t data[14];

	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDRESS, MPU6050_ALLDATA_READ_REGISTER, 1, data, 14, MPU6050_I2C_TIMEOUT);
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	230e      	movs	r3, #14
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	223b      	movs	r2, #59	; 0x3b
 80016fe:	21d0      	movs	r1, #208	; 0xd0
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 ffe9 	bl	80026d8 <HAL_I2C_Mem_Read>
	//Es importante que la RAW DATA sea con signo, porque sino, para valores menores a cero no se le interpreta el modulo a 2 y salta de 0 a 65365
	int16_t accX = ((uint16_t)data[0]<<8)+data[1];
 8001706:	7b3b      	ldrb	r3, [r7, #12]
 8001708:	b29b      	uxth	r3, r3
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b29a      	uxth	r2, r3
 800170e:	7b7b      	ldrb	r3, [r7, #13]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4413      	add	r3, r2
 8001714:	b29b      	uxth	r3, r3
 8001716:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t accY = ((uint16_t)data[2]<<8)+data[3];
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	b29b      	uxth	r3, r3
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	b29a      	uxth	r2, r3
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4413      	add	r3, r2
 8001726:	b29b      	uxth	r3, r3
 8001728:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t accZ = ((uint16_t)data[4]<<8)+data[5];
 800172a:	7c3b      	ldrb	r3, [r7, #16]
 800172c:	b29b      	uxth	r3, r3
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b29a      	uxth	r2, r3
 8001732:	7c7b      	ldrb	r3, [r7, #17]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4413      	add	r3, r2
 8001738:	b29b      	uxth	r3, r3
 800173a:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t Temp = ((uint16_t)data[6]<<8)+data[7];
 800173c:	7cbb      	ldrb	r3, [r7, #18]
 800173e:	b29b      	uxth	r3, r3
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b29a      	uxth	r2, r3
 8001744:	7cfb      	ldrb	r3, [r7, #19]
 8001746:	b29b      	uxth	r3, r3
 8001748:	4413      	add	r3, r2
 800174a:	b29b      	uxth	r3, r3
 800174c:	843b      	strh	r3, [r7, #32]
	int16_t angX = ((uint16_t)data[8]<<8)+data[9];
 800174e:	7d3b      	ldrb	r3, [r7, #20]
 8001750:	b29b      	uxth	r3, r3
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	b29a      	uxth	r2, r3
 8001756:	7d7b      	ldrb	r3, [r7, #21]
 8001758:	b29b      	uxth	r3, r3
 800175a:	4413      	add	r3, r2
 800175c:	b29b      	uxth	r3, r3
 800175e:	83fb      	strh	r3, [r7, #30]
	int16_t angY = ((uint16_t)data[10]<<8)+data[11];
 8001760:	7dbb      	ldrb	r3, [r7, #22]
 8001762:	b29b      	uxth	r3, r3
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b29a      	uxth	r2, r3
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	b29b      	uxth	r3, r3
 800176c:	4413      	add	r3, r2
 800176e:	b29b      	uxth	r3, r3
 8001770:	83bb      	strh	r3, [r7, #28]
	int16_t angZ = ((uint16_t)data[12]<<8)+data[13];
 8001772:	7e3b      	ldrb	r3, [r7, #24]
 8001774:	b29b      	uxth	r3, r3
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	b29a      	uxth	r2, r3
 800177a:	7e7b      	ldrb	r3, [r7, #25]
 800177c:	b29b      	uxth	r3, r3
 800177e:	4413      	add	r3, r2
 8001780:	b29b      	uxth	r3, r3
 8001782:	837b      	strh	r3, [r7, #26]

	mpu -> accX = accX/16384.0; //Ahora convierto la informacion cruda (RAW DATA) en valores medidos en G, el valor con el que divido depende del FS_SEL en el ACCEL_CONFIG
 8001784:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fe3b 	bl	8000404 <__aeabi_i2d>
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <mpuUpdate+0x1d8>)
 8001794:	f7fe ffca 	bl	800072c <__aeabi_ddiv>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f7ff f972 	bl	8000a88 <__aeabi_d2f>
 80017a4:	4602      	mov	r2, r0
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
	mpu -> accY = accY/16384.0;
 80017aa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fe28 	bl	8000404 <__aeabi_i2d>
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <mpuUpdate+0x1d8>)
 80017ba:	f7fe ffb7 	bl	800072c <__aeabi_ddiv>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff f95f 	bl	8000a88 <__aeabi_d2f>
 80017ca:	4602      	mov	r2, r0
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	605a      	str	r2, [r3, #4]
	mpu -> accZ = accZ/16384.0;
 80017d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fe15 	bl	8000404 <__aeabi_i2d>
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <mpuUpdate+0x1d8>)
 80017e0:	f7fe ffa4 	bl	800072c <__aeabi_ddiv>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f94c 	bl	8000a88 <__aeabi_d2f>
 80017f0:	4602      	mov	r2, r0
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	609a      	str	r2, [r3, #8]
	mpu -> temperature = (Temp/340.0) + 36.53; //Pag 30
 80017f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe02 	bl	8000404 <__aeabi_i2d>
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <mpuUpdate+0x1dc>)
 8001806:	f7fe ff91 	bl	800072c <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	a325      	add	r3, pc, #148	; (adr r3, 80018a8 <mpuUpdate+0x1c8>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe fca8 	bl	800016c <__adddf3>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f930 	bl	8000a88 <__aeabi_d2f>
 8001828:	4602      	mov	r2, r0
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	619a      	str	r2, [r3, #24]
	mpu -> angX = angX/131.0;
 800182e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fde6 	bl	8000404 <__aeabi_i2d>
 8001838:	a31d      	add	r3, pc, #116	; (adr r3, 80018b0 <mpuUpdate+0x1d0>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe ff75 	bl	800072c <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff f91d 	bl	8000a88 <__aeabi_d2f>
 800184e:	4602      	mov	r2, r0
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	60da      	str	r2, [r3, #12]
	mpu -> angY = angY/131.0;
 8001854:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fdd3 	bl	8000404 <__aeabi_i2d>
 800185e:	a314      	add	r3, pc, #80	; (adr r3, 80018b0 <mpuUpdate+0x1d0>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe ff62 	bl	800072c <__aeabi_ddiv>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f90a 	bl	8000a88 <__aeabi_d2f>
 8001874:	4602      	mov	r2, r0
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	611a      	str	r2, [r3, #16]
	mpu -> angZ = angZ/131.0;
 800187a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fdc0 	bl	8000404 <__aeabi_i2d>
 8001884:	a30a      	add	r3, pc, #40	; (adr r3, 80018b0 <mpuUpdate+0x1d0>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7fe ff4f 	bl	800072c <__aeabi_ddiv>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff f8f7 	bl	8000a88 <__aeabi_d2f>
 800189a:	4602      	mov	r2, r0
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	615a      	str	r2, [r3, #20]

}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	0a3d70a4 	.word	0x0a3d70a4
 80018ac:	404243d7 	.word	0x404243d7
 80018b0:	00000000 	.word	0x00000000
 80018b4:	40606000 	.word	0x40606000
 80018b8:	40d00000 	.word	0x40d00000
 80018bc:	40754000 	.word	0x40754000

080018c0 <initAlertControl>:
const char* FSM_TO_ALARM_MSG = "\n\rFSM -> Alarm state";
const char* FSM_TO_DATA_AQ_MSG = "\n\rFSM -> Data acquisition state";

static void buzzerChangeSound();

void initAlertControl(float accMax, uint16_t buttonDelay,UART_HandleTypeDef * uart){
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	460b      	mov	r3, r1
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	817b      	strh	r3, [r7, #10]

	EstadoActual = ADQUIRIENDO_DATOS;
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <initAlertControl+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
	AccMax = accMax;
 80018d4:	4a18      	ldr	r2, [pc, #96]	; (8001938 <initAlertControl+0x78>)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6013      	str	r3, [r2, #0]
	delayInit(&BuzzerDelay, 700);
 80018da:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80018de:	4817      	ldr	r0, [pc, #92]	; (800193c <initAlertControl+0x7c>)
 80018e0:	f000 f932 	bl	8001b48 <delayInit>
	delayInit(&switchStateDelay, buttonDelay);
 80018e4:	897b      	ldrh	r3, [r7, #10]
 80018e6:	4619      	mov	r1, r3
 80018e8:	4815      	ldr	r0, [pc, #84]	; (8001940 <initAlertControl+0x80>)
 80018ea:	f000 f92d 	bl	8001b48 <delayInit>
	HAL_UART_Transmit(uart,(uint8_t *)"S.O.S.",strlen("S.O.S."),10);
	HAL_Delay(500);
	uint8_t * ctlZ = 0x1a;
	HAL_UART_Transmit(uart,(uint8_t *)ctlZ,1,10);*/

	HAL_UART_Transmit(uart,(uint8_t *)FSM_INIT_MSG,strlen(FSM_INIT_MSG),10);
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <initAlertControl+0x84>)
 80018f0:	681c      	ldr	r4, [r3, #0]
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <initAlertControl+0x84>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fc2a 	bl	8000150 <strlen>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b29a      	uxth	r2, r3
 8001900:	230a      	movs	r3, #10
 8001902:	4621      	mov	r1, r4
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f002 f910 	bl	8003b2a <HAL_UART_Transmit>

	//Secuencia led
	for(uint8_t i;i<6;i++){HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);HAL_Delay(100);}
 800190a:	e00a      	b.n	8001922 <initAlertControl+0x62>
 800190c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001910:	480d      	ldr	r0, [pc, #52]	; (8001948 <initAlertControl+0x88>)
 8001912:	f000 fc8a 	bl	800222a <HAL_GPIO_TogglePin>
 8001916:	2064      	movs	r0, #100	; 0x64
 8001918:	f000 f9cc 	bl	8001cb4 <HAL_Delay>
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	3301      	adds	r3, #1
 8001920:	75fb      	strb	r3, [r7, #23]
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	2b05      	cmp	r3, #5
 8001926:	d9f1      	bls.n	800190c <initAlertControl+0x4c>


};
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd90      	pop	{r4, r7, pc}
 8001932:	bf00      	nop
 8001934:	200002b0 	.word	0x200002b0
 8001938:	20000010 	.word	0x20000010
 800193c:	200002b4 	.word	0x200002b4
 8001940:	200002c0 	.word	0x200002c0
 8001944:	20000014 	.word	0x20000014
 8001948:	40011000 	.word	0x40011000

0800194c <checkAlertControl>:
void checkAlertControl(mpu6050_t* mpu, UART_HandleTypeDef * uart){
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]

	switch(EstadoActual){
 8001956:	4b62      	ldr	r3, [pc, #392]	; (8001ae0 <checkAlertControl+0x194>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <checkAlertControl+0x1a>
 800195e:	2b01      	cmp	r3, #1
 8001960:	f000 8086 	beq.w	8001a70 <checkAlertControl+0x124>
 8001964:	e0b1      	b.n	8001aca <checkAlertControl+0x17e>
	case ADQUIRIENDO_DATOS:
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 8001966:	2201      	movs	r2, #1
 8001968:	2102      	movs	r1, #2
 800196a:	485e      	ldr	r0, [pc, #376]	; (8001ae4 <checkAlertControl+0x198>)
 800196c:	f000 fc45 	bl	80021fa <HAL_GPIO_WritePin>
		//Chequeo de aceleracion
		if( abs(mpu->accX) > AccMax || abs(mpu->accY) > AccMax  || abs(mpu->accZ - 1) > AccMax ){
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fa5b 	bl	8000e30 <__aeabi_f2iz>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	bfb8      	it	lt
 8001980:	425b      	neglt	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f98a 	bl	8000c9c <__aeabi_i2f>
 8001988:	4602      	mov	r2, r0
 800198a:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <checkAlertControl+0x19c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4619      	mov	r1, r3
 8001990:	4610      	mov	r0, r2
 8001992:	f7ff fa43 	bl	8000e1c <__aeabi_fcmpgt>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d131      	bne.n	8001a00 <checkAlertControl+0xb4>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fa45 	bl	8000e30 <__aeabi_f2iz>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bfb8      	it	lt
 80019ac:	425b      	neglt	r3, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f974 	bl	8000c9c <__aeabi_i2f>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b4c      	ldr	r3, [pc, #304]	; (8001ae8 <checkAlertControl+0x19c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4619      	mov	r1, r3
 80019bc:	4610      	mov	r0, r2
 80019be:	f7ff fa2d 	bl	8000e1c <__aeabi_fcmpgt>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d11b      	bne.n	8001a00 <checkAlertControl+0xb4>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff f8ad 	bl	8000b30 <__aeabi_fsub>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fa29 	bl	8000e30 <__aeabi_f2iz>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bfb8      	it	lt
 80019e4:	425b      	neglt	r3, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f958 	bl	8000c9c <__aeabi_i2f>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b3e      	ldr	r3, [pc, #248]	; (8001ae8 <checkAlertControl+0x19c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4619      	mov	r1, r3
 80019f4:	4610      	mov	r0, r2
 80019f6:	f7ff fa11 	bl	8000e1c <__aeabi_fcmpgt>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d012      	beq.n	8001a26 <checkAlertControl+0xda>
			EstadoActual = ALERTA;
 8001a00:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <checkAlertControl+0x194>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(uart,(uint8_t *)FSM_TO_ALARM_MSG,strlen(FSM_TO_ALARM_MSG),10);
 8001a06:	4b39      	ldr	r3, [pc, #228]	; (8001aec <checkAlertControl+0x1a0>)
 8001a08:	681c      	ldr	r4, [r3, #0]
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <checkAlertControl+0x1a0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fb9e 	bl	8000150 <strlen>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	230a      	movs	r3, #10
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	6838      	ldr	r0, [r7, #0]
 8001a1e:	f002 f884 	bl	8003b2a <HAL_UART_Transmit>
			buzzerChangeSound();
 8001a22:	f000 f86b 	bl	8001afc <buzzerChangeSound>

		}
		//Comprobacion de boton con antirebote
		if( !HAL_GPIO_ReadPin(BUTTON1_GPIO_Port,BUTTON1_Pin)){
 8001a26:	2108      	movs	r1, #8
 8001a28:	482e      	ldr	r0, [pc, #184]	; (8001ae4 <checkAlertControl+0x198>)
 8001a2a:	f000 fbcf 	bl	80021cc <HAL_GPIO_ReadPin>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d103      	bne.n	8001a3c <checkAlertControl+0xf0>
			//Si es un falso contacto se reinicia el delay
			delayRestart(&switchStateDelay);
 8001a34:	482e      	ldr	r0, [pc, #184]	; (8001af0 <checkAlertControl+0x1a4>)
 8001a36:	f000 f8cd 	bl	8001bd4 <delayRestart>
				EstadoActual = ALERTA;
				HAL_UART_Transmit(uart,(uint8_t *)FSM_TO_ALARM_MSG,strlen(FSM_TO_ALARM_MSG),10);
				buzzerChangeSound();
			}
		}
		break;
 8001a3a:	e04a      	b.n	8001ad2 <checkAlertControl+0x186>
			if(delayRead(&switchStateDelay)){
 8001a3c:	482c      	ldr	r0, [pc, #176]	; (8001af0 <checkAlertControl+0x1a4>)
 8001a3e:	f000 f897 	bl	8001b70 <delayRead>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d044      	beq.n	8001ad2 <checkAlertControl+0x186>
				EstadoActual = ALERTA;
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <checkAlertControl+0x194>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(uart,(uint8_t *)FSM_TO_ALARM_MSG,strlen(FSM_TO_ALARM_MSG),10);
 8001a4e:	4b27      	ldr	r3, [pc, #156]	; (8001aec <checkAlertControl+0x1a0>)
 8001a50:	681c      	ldr	r4, [r3, #0]
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <checkAlertControl+0x1a0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fb7a 	bl	8000150 <strlen>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	230a      	movs	r3, #10
 8001a62:	4621      	mov	r1, r4
 8001a64:	6838      	ldr	r0, [r7, #0]
 8001a66:	f002 f860 	bl	8003b2a <HAL_UART_Transmit>
				buzzerChangeSound();
 8001a6a:	f000 f847 	bl	8001afc <buzzerChangeSound>
		break;
 8001a6e:	e030      	b.n	8001ad2 <checkAlertControl+0x186>
	case ALERTA:
		if(delayRead(&BuzzerDelay)){
 8001a70:	4820      	ldr	r0, [pc, #128]	; (8001af4 <checkAlertControl+0x1a8>)
 8001a72:	f000 f87d 	bl	8001b70 <delayRead>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <checkAlertControl+0x138>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	4819      	ldr	r0, [pc, #100]	; (8001ae4 <checkAlertControl+0x198>)
 8001a80:	f000 fbd3 	bl	800222a <HAL_GPIO_TogglePin>
		}
		if( !HAL_GPIO_ReadPin(BUTTON1_GPIO_Port,BUTTON1_Pin)){
 8001a84:	2108      	movs	r1, #8
 8001a86:	4817      	ldr	r0, [pc, #92]	; (8001ae4 <checkAlertControl+0x198>)
 8001a88:	f000 fba0 	bl	80021cc <HAL_GPIO_ReadPin>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d103      	bne.n	8001a9a <checkAlertControl+0x14e>

			delayRestart(&switchStateDelay);
 8001a92:	4817      	ldr	r0, [pc, #92]	; (8001af0 <checkAlertControl+0x1a4>)
 8001a94:	f000 f89e 	bl	8001bd4 <delayRestart>
		else{

			if(delayRead(&switchStateDelay)){EstadoActual = ADQUIRIENDO_DATOS; HAL_UART_Transmit(uart,(uint8_t *)FSM_TO_DATA_AQ_MSG,strlen(FSM_TO_DATA_AQ_MSG),10);}
		}

		break;
 8001a98:	e01d      	b.n	8001ad6 <checkAlertControl+0x18a>
			if(delayRead(&switchStateDelay)){EstadoActual = ADQUIRIENDO_DATOS; HAL_UART_Transmit(uart,(uint8_t *)FSM_TO_DATA_AQ_MSG,strlen(FSM_TO_DATA_AQ_MSG),10);}
 8001a9a:	4815      	ldr	r0, [pc, #84]	; (8001af0 <checkAlertControl+0x1a4>)
 8001a9c:	f000 f868 	bl	8001b70 <delayRead>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d017      	beq.n	8001ad6 <checkAlertControl+0x18a>
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <checkAlertControl+0x194>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <checkAlertControl+0x1ac>)
 8001aae:	681c      	ldr	r4, [r3, #0]
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <checkAlertControl+0x1ac>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fb4b 	bl	8000150 <strlen>
 8001aba:	4603      	mov	r3, r0
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	230a      	movs	r3, #10
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	6838      	ldr	r0, [r7, #0]
 8001ac4:	f002 f831 	bl	8003b2a <HAL_UART_Transmit>
		break;
 8001ac8:	e005      	b.n	8001ad6 <checkAlertControl+0x18a>
	default:
		EstadoActual = ADQUIRIENDO_DATOS;
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <checkAlertControl+0x194>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
		break;
 8001ad0:	e002      	b.n	8001ad8 <checkAlertControl+0x18c>
		break;
 8001ad2:	bf00      	nop
 8001ad4:	e000      	b.n	8001ad8 <checkAlertControl+0x18c>
		break;
 8001ad6:	bf00      	nop

	}
};
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	200002b0 	.word	0x200002b0
 8001ae4:	40010800 	.word	0x40010800
 8001ae8:	20000010 	.word	0x20000010
 8001aec:	20000018 	.word	0x20000018
 8001af0:	200002c0 	.word	0x200002c0
 8001af4:	200002b4 	.word	0x200002b4
 8001af8:	2000001c 	.word	0x2000001c

08001afc <buzzerChangeSound>:
void buzzerChangeSound(){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,0);HAL_Delay(50);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2102      	movs	r1, #2
 8001b04:	480f      	ldr	r0, [pc, #60]	; (8001b44 <buzzerChangeSound+0x48>)
 8001b06:	f000 fb78 	bl	80021fa <HAL_GPIO_WritePin>
 8001b0a:	2032      	movs	r0, #50	; 0x32
 8001b0c:	f000 f8d2 	bl	8001cb4 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);HAL_Delay(50);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2102      	movs	r1, #2
 8001b14:	480b      	ldr	r0, [pc, #44]	; (8001b44 <buzzerChangeSound+0x48>)
 8001b16:	f000 fb70 	bl	80021fa <HAL_GPIO_WritePin>
 8001b1a:	2032      	movs	r0, #50	; 0x32
 8001b1c:	f000 f8ca 	bl	8001cb4 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,0);HAL_Delay(50);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2102      	movs	r1, #2
 8001b24:	4807      	ldr	r0, [pc, #28]	; (8001b44 <buzzerChangeSound+0x48>)
 8001b26:	f000 fb68 	bl	80021fa <HAL_GPIO_WritePin>
 8001b2a:	2032      	movs	r0, #50	; 0x32
 8001b2c:	f000 f8c2 	bl	8001cb4 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);HAL_Delay(50);
 8001b30:	2201      	movs	r2, #1
 8001b32:	2102      	movs	r1, #2
 8001b34:	4803      	ldr	r0, [pc, #12]	; (8001b44 <buzzerChangeSound+0x48>)
 8001b36:	f000 fb60 	bl	80021fa <HAL_GPIO_WritePin>
 8001b3a:	2032      	movs	r0, #50	; 0x32
 8001b3c:	f000 f8ba 	bl	8001cb4 <HAL_Delay>
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40010800 	.word	0x40010800

08001b48 <delayInit>:
/*
 * @brief Inicializa la temporizacion
 * @param [in] delay: Puntero a donde se guarda la estructura del temporizador
 * @param [in] duration: Duracion de la temporizacion
 */
void delayInit( delay_t * delay, tick_t duration ) {
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	if(delay == NULL) return;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <delayInit+0x1e>
	delay->duration = duration;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	721a      	strb	r2, [r3, #8]
 8001b64:	e000      	b.n	8001b68 <delayInit+0x20>
	if(delay == NULL) return;
 8001b66:	bf00      	nop
}
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <delayRead>:
 * @brief Lee la estructura del temporizado y comprueba si se ha cumplido
 * @param [in] delay: Puntero a donde se guarda la estructura del temporizador
 * @param [in] duration: Duracion de la temporizacion
 * @return true si se cumplio la temporizacion, false si no se cumplio la temporizacion
 */
bool delayRead( delay_t * delay ) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	if(delay == NULL) return false;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <delayRead+0x12>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e024      	b.n	8001bcc <delayRead+0x5c>
	if(!delay->running) {
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7a1b      	ldrb	r3, [r3, #8]
 8001b86:	f083 0301 	eor.w	r3, r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <delayRead+0x32>
		delay->startTime = HAL_GetTick();
 8001b90:	f000 f886 	bl	8001ca0 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	721a      	strb	r2, [r3, #8]
 8001ba0:	e013      	b.n	8001bca <delayRead+0x5a>
	}
	else if(HAL_GetTick() - delay->startTime >= delay->duration) {
 8001ba2:	f000 f87d 	bl	8001ca0 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	1ad2      	subs	r2, r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d309      	bcc.n	8001bca <delayRead+0x5a>
		delay->running = false;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick();
 8001bbc:	f000 f870 	bl	8001ca0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	601a      	str	r2, [r3, #0]
		return true;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <delayRead+0x5c>
	}
	return false;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <delayRestart>:

/*
 * @brief Reinicia el temporizado
 * @param [in] delay: Puntero a donde se guarda la estructura del temporizador
 */
void delayRestart( delay_t * delay) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	delay->startTime = HAL_GetTick();
 8001bdc:	f000 f860 	bl	8001ca0 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	601a      	str	r2, [r3, #0]
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_Init+0x28>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_Init+0x28>)
 8001bfa:	f043 0310 	orr.w	r3, r3, #16
 8001bfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c00:	2003      	movs	r0, #3
 8001c02:	f000 f92b 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c06:	200f      	movs	r0, #15
 8001c08:	f000 f808 	bl	8001c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c0c:	f7ff fb3c 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40022000 	.word	0x40022000

08001c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_InitTick+0x54>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x58>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f935 	bl	8001eaa <HAL_SYSTICK_Config>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00e      	b.n	8001c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b0f      	cmp	r3, #15
 8001c4e:	d80a      	bhi.n	8001c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c50:	2200      	movs	r2, #0
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f000 f90b 	bl	8001e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <HAL_InitTick+0x5c>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e000      	b.n	8001c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	2000000c 	.word	0x2000000c
 8001c74:	20000024 	.word	0x20000024
 8001c78:	20000020 	.word	0x20000020

08001c7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_IncTick+0x1c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_IncTick+0x20>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4a03      	ldr	r2, [pc, #12]	; (8001c9c <HAL_IncTick+0x20>)
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	20000024 	.word	0x20000024
 8001c9c:	200002cc 	.word	0x200002cc

08001ca0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <HAL_GetTick+0x10>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	200002cc 	.word	0x200002cc

08001cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff fff0 	bl	8001ca0 <HAL_GetTick>
 8001cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d005      	beq.n	8001cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_Delay+0x44>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cda:	bf00      	nop
 8001cdc:	f7ff ffe0 	bl	8001ca0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8f7      	bhi.n	8001cdc <HAL_Delay+0x28>
  {
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000024 	.word	0x20000024

08001cfc <__NVIC_SetPriorityGrouping>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_SetPriority>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff90 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff49 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff5e 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff90 	bl	8001db4 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff5f 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffb0 	bl	8001e18 <SysTick_Config>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b08b      	sub	sp, #44	; 0x2c
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed6:	e169      	b.n	80021ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f040 8158 	bne.w	80021a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4a9a      	ldr	r2, [pc, #616]	; (8002164 <HAL_GPIO_Init+0x2a0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d05e      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f00:	4a98      	ldr	r2, [pc, #608]	; (8002164 <HAL_GPIO_Init+0x2a0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d875      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f06:	4a98      	ldr	r2, [pc, #608]	; (8002168 <HAL_GPIO_Init+0x2a4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d058      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f0c:	4a96      	ldr	r2, [pc, #600]	; (8002168 <HAL_GPIO_Init+0x2a4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d86f      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f12:	4a96      	ldr	r2, [pc, #600]	; (800216c <HAL_GPIO_Init+0x2a8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d052      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f18:	4a94      	ldr	r2, [pc, #592]	; (800216c <HAL_GPIO_Init+0x2a8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d869      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f1e:	4a94      	ldr	r2, [pc, #592]	; (8002170 <HAL_GPIO_Init+0x2ac>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d04c      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f24:	4a92      	ldr	r2, [pc, #584]	; (8002170 <HAL_GPIO_Init+0x2ac>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d863      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f2a:	4a92      	ldr	r2, [pc, #584]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d046      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f30:	4a90      	ldr	r2, [pc, #576]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d85d      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f36:	2b12      	cmp	r3, #18
 8001f38:	d82a      	bhi.n	8001f90 <HAL_GPIO_Init+0xcc>
 8001f3a:	2b12      	cmp	r3, #18
 8001f3c:	d859      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <HAL_GPIO_Init+0x80>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001fbf 	.word	0x08001fbf
 8001f48:	08001f99 	.word	0x08001f99
 8001f4c:	08001fab 	.word	0x08001fab
 8001f50:	08001fed 	.word	0x08001fed
 8001f54:	08001ff3 	.word	0x08001ff3
 8001f58:	08001ff3 	.word	0x08001ff3
 8001f5c:	08001ff3 	.word	0x08001ff3
 8001f60:	08001ff3 	.word	0x08001ff3
 8001f64:	08001ff3 	.word	0x08001ff3
 8001f68:	08001ff3 	.word	0x08001ff3
 8001f6c:	08001ff3 	.word	0x08001ff3
 8001f70:	08001ff3 	.word	0x08001ff3
 8001f74:	08001ff3 	.word	0x08001ff3
 8001f78:	08001ff3 	.word	0x08001ff3
 8001f7c:	08001ff3 	.word	0x08001ff3
 8001f80:	08001ff3 	.word	0x08001ff3
 8001f84:	08001ff3 	.word	0x08001ff3
 8001f88:	08001fa1 	.word	0x08001fa1
 8001f8c:	08001fb5 	.word	0x08001fb5
 8001f90:	4a79      	ldr	r2, [pc, #484]	; (8002178 <HAL_GPIO_Init+0x2b4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f96:	e02c      	b.n	8001ff2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	623b      	str	r3, [r7, #32]
          break;
 8001f9e:	e029      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	623b      	str	r3, [r7, #32]
          break;
 8001fa8:	e024      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	3308      	adds	r3, #8
 8001fb0:	623b      	str	r3, [r7, #32]
          break;
 8001fb2:	e01f      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	330c      	adds	r3, #12
 8001fba:	623b      	str	r3, [r7, #32]
          break;
 8001fbc:	e01a      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d102      	bne.n	8001fcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	623b      	str	r3, [r7, #32]
          break;
 8001fca:	e013      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	611a      	str	r2, [r3, #16]
          break;
 8001fde:	e009      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	615a      	str	r2, [r3, #20]
          break;
 8001fea:	e003      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
          break;
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          break;
 8001ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2bff      	cmp	r3, #255	; 0xff
 8001ff8:	d801      	bhi.n	8001ffe <HAL_GPIO_Init+0x13a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	e001      	b.n	8002002 <HAL_GPIO_Init+0x13e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2bff      	cmp	r3, #255	; 0xff
 8002008:	d802      	bhi.n	8002010 <HAL_GPIO_Init+0x14c>
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	e002      	b.n	8002016 <HAL_GPIO_Init+0x152>
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	3b08      	subs	r3, #8
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	210f      	movs	r1, #15
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	401a      	ands	r2, r3
 8002028:	6a39      	ldr	r1, [r7, #32]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	431a      	orrs	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80b1 	beq.w	80021a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002044:	4b4d      	ldr	r3, [pc, #308]	; (800217c <HAL_GPIO_Init+0x2b8>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a4c      	ldr	r2, [pc, #304]	; (800217c <HAL_GPIO_Init+0x2b8>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6193      	str	r3, [r2, #24]
 8002050:	4b4a      	ldr	r3, [pc, #296]	; (800217c <HAL_GPIO_Init+0x2b8>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800205c:	4a48      	ldr	r2, [pc, #288]	; (8002180 <HAL_GPIO_Init+0x2bc>)
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3302      	adds	r3, #2
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a40      	ldr	r2, [pc, #256]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d013      	beq.n	80020b0 <HAL_GPIO_Init+0x1ec>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a3f      	ldr	r2, [pc, #252]	; (8002188 <HAL_GPIO_Init+0x2c4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d00d      	beq.n	80020ac <HAL_GPIO_Init+0x1e8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a3e      	ldr	r2, [pc, #248]	; (800218c <HAL_GPIO_Init+0x2c8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d007      	beq.n	80020a8 <HAL_GPIO_Init+0x1e4>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a3d      	ldr	r2, [pc, #244]	; (8002190 <HAL_GPIO_Init+0x2cc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_GPIO_Init+0x1e0>
 80020a0:	2303      	movs	r3, #3
 80020a2:	e006      	b.n	80020b2 <HAL_GPIO_Init+0x1ee>
 80020a4:	2304      	movs	r3, #4
 80020a6:	e004      	b.n	80020b2 <HAL_GPIO_Init+0x1ee>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e002      	b.n	80020b2 <HAL_GPIO_Init+0x1ee>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_GPIO_Init+0x1ee>
 80020b0:	2300      	movs	r3, #0
 80020b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b4:	f002 0203 	and.w	r2, r2, #3
 80020b8:	0092      	lsls	r2, r2, #2
 80020ba:	4093      	lsls	r3, r2
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020c2:	492f      	ldr	r1, [pc, #188]	; (8002180 <HAL_GPIO_Init+0x2bc>)
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020dc:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	492c      	ldr	r1, [pc, #176]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
 80020e8:	e006      	b.n	80020f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ea:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	4928      	ldr	r1, [pc, #160]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002104:	4b23      	ldr	r3, [pc, #140]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4922      	ldr	r1, [pc, #136]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
 8002110:	e006      	b.n	8002120 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	43db      	mvns	r3, r3
 800211a:	491e      	ldr	r1, [pc, #120]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 800211c:	4013      	ands	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4918      	ldr	r1, [pc, #96]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	43db      	mvns	r3, r3
 8002142:	4914      	ldr	r1, [pc, #80]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 8002144:	4013      	ands	r3, r2
 8002146:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d021      	beq.n	8002198 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002154:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	490e      	ldr	r1, [pc, #56]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	60cb      	str	r3, [r1, #12]
 8002160:	e021      	b.n	80021a6 <HAL_GPIO_Init+0x2e2>
 8002162:	bf00      	nop
 8002164:	10320000 	.word	0x10320000
 8002168:	10310000 	.word	0x10310000
 800216c:	10220000 	.word	0x10220000
 8002170:	10210000 	.word	0x10210000
 8002174:	10120000 	.word	0x10120000
 8002178:	10110000 	.word	0x10110000
 800217c:	40021000 	.word	0x40021000
 8002180:	40010000 	.word	0x40010000
 8002184:	40010800 	.word	0x40010800
 8002188:	40010c00 	.word	0x40010c00
 800218c:	40011000 	.word	0x40011000
 8002190:	40011400 	.word	0x40011400
 8002194:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_GPIO_Init+0x304>)
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	43db      	mvns	r3, r3
 80021a0:	4909      	ldr	r1, [pc, #36]	; (80021c8 <HAL_GPIO_Init+0x304>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	3301      	adds	r3, #1
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f47f ae8e 	bne.w	8001ed8 <HAL_GPIO_Init+0x14>
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	372c      	adds	r7, #44	; 0x2c
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	40010400 	.word	0x40010400

080021cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e001      	b.n	80021ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	807b      	strh	r3, [r7, #2]
 8002206:	4613      	mov	r3, r2
 8002208:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800220a:	787b      	ldrb	r3, [r7, #1]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002210:	887a      	ldrh	r2, [r7, #2]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002216:	e003      	b.n	8002220 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	041a      	lsls	r2, r3, #16
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	611a      	str	r2, [r3, #16]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800223c:	887a      	ldrh	r2, [r7, #2]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4013      	ands	r3, r2
 8002242:	041a      	lsls	r2, r3, #16
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43d9      	mvns	r1, r3
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	400b      	ands	r3, r1
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e12b      	b.n	80024c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff f832 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022c0:	f001 fba0 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 80022c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4a81      	ldr	r2, [pc, #516]	; (80024d0 <HAL_I2C_Init+0x274>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d807      	bhi.n	80022e0 <HAL_I2C_Init+0x84>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4a80      	ldr	r2, [pc, #512]	; (80024d4 <HAL_I2C_Init+0x278>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	bf94      	ite	ls
 80022d8:	2301      	movls	r3, #1
 80022da:	2300      	movhi	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	e006      	b.n	80022ee <HAL_I2C_Init+0x92>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a7d      	ldr	r2, [pc, #500]	; (80024d8 <HAL_I2C_Init+0x27c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	bf94      	ite	ls
 80022e8:	2301      	movls	r3, #1
 80022ea:	2300      	movhi	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0e7      	b.n	80024c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a78      	ldr	r2, [pc, #480]	; (80024dc <HAL_I2C_Init+0x280>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0c9b      	lsrs	r3, r3, #18
 8002300:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a6a      	ldr	r2, [pc, #424]	; (80024d0 <HAL_I2C_Init+0x274>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d802      	bhi.n	8002330 <HAL_I2C_Init+0xd4>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	3301      	adds	r3, #1
 800232e:	e009      	b.n	8002344 <HAL_I2C_Init+0xe8>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	4a69      	ldr	r2, [pc, #420]	; (80024e0 <HAL_I2C_Init+0x284>)
 800233c:	fba2 2303 	umull	r2, r3, r2, r3
 8002340:	099b      	lsrs	r3, r3, #6
 8002342:	3301      	adds	r3, #1
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	430b      	orrs	r3, r1
 800234a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002356:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	495c      	ldr	r1, [pc, #368]	; (80024d0 <HAL_I2C_Init+0x274>)
 8002360:	428b      	cmp	r3, r1
 8002362:	d819      	bhi.n	8002398 <HAL_I2C_Init+0x13c>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1e59      	subs	r1, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002372:	1c59      	adds	r1, r3, #1
 8002374:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002378:	400b      	ands	r3, r1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_I2C_Init+0x138>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1e59      	subs	r1, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fbb1 f3f3 	udiv	r3, r1, r3
 800238c:	3301      	adds	r3, #1
 800238e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002392:	e051      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 8002394:	2304      	movs	r3, #4
 8002396:	e04f      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d111      	bne.n	80023c4 <HAL_I2C_Init+0x168>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e58      	subs	r0, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e012      	b.n	80023ea <HAL_I2C_Init+0x18e>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1e58      	subs	r0, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	0099      	lsls	r1, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Init+0x196>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e022      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10e      	bne.n	8002418 <HAL_I2C_Init+0x1bc>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1e58      	subs	r0, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	440b      	add	r3, r1
 8002408:	fbb0 f3f3 	udiv	r3, r0, r3
 800240c:	3301      	adds	r3, #1
 800240e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002416:	e00f      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1e58      	subs	r0, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	0099      	lsls	r1, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	fbb0 f3f3 	udiv	r3, r0, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	6809      	ldr	r1, [r1, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002466:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6911      	ldr	r1, [r2, #16]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68d2      	ldr	r2, [r2, #12]
 8002472:	4311      	orrs	r1, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	430b      	orrs	r3, r1
 800247a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	000186a0 	.word	0x000186a0
 80024d4:	001e847f 	.word	0x001e847f
 80024d8:	003d08ff 	.word	0x003d08ff
 80024dc:	431bde83 	.word	0x431bde83
 80024e0:	10624dd3 	.word	0x10624dd3

080024e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	460b      	mov	r3, r1
 80024f8:	813b      	strh	r3, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024fe:	f7ff fbcf 	bl	8001ca0 <HAL_GetTick>
 8002502:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b20      	cmp	r3, #32
 800250e:	f040 80d9 	bne.w	80026c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2319      	movs	r3, #25
 8002518:	2201      	movs	r2, #1
 800251a:	496d      	ldr	r1, [pc, #436]	; (80026d0 <HAL_I2C_Mem_Write+0x1ec>)
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fcc1 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
 800252a:	e0cc      	b.n	80026c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_I2C_Mem_Write+0x56>
 8002536:	2302      	movs	r3, #2
 8002538:	e0c5      	b.n	80026c6 <HAL_I2C_Mem_Write+0x1e2>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b01      	cmp	r3, #1
 800254e:	d007      	beq.n	8002560 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2221      	movs	r2, #33	; 0x21
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2240      	movs	r2, #64	; 0x40
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a3a      	ldr	r2, [r7, #32]
 800258a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002590:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4a4d      	ldr	r2, [pc, #308]	; (80026d4 <HAL_I2C_Mem_Write+0x1f0>)
 80025a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025a2:	88f8      	ldrh	r0, [r7, #6]
 80025a4:	893a      	ldrh	r2, [r7, #8]
 80025a6:	8979      	ldrh	r1, [r7, #10]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	4603      	mov	r3, r0
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 faf8 	bl	8002ba8 <I2C_RequestMemoryWrite>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d052      	beq.n	8002664 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e081      	b.n	80026c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fd42 	bl	8003050 <I2C_WaitOnTXEFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00d      	beq.n	80025ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d107      	bne.n	80025ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e06b      	b.n	80026c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	781a      	ldrb	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b04      	cmp	r3, #4
 800262a:	d11b      	bne.n	8002664 <HAL_I2C_Mem_Write+0x180>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002630:	2b00      	cmp	r3, #0
 8002632:	d017      	beq.n	8002664 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1aa      	bne.n	80025c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fd2e 	bl	80030d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e016      	b.n	80026c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	00100002 	.word	0x00100002
 80026d4:	ffff0000 	.word	0xffff0000

080026d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	; 0x30
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	4608      	mov	r0, r1
 80026e2:	4611      	mov	r1, r2
 80026e4:	461a      	mov	r2, r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	817b      	strh	r3, [r7, #10]
 80026ea:	460b      	mov	r3, r1
 80026ec:	813b      	strh	r3, [r7, #8]
 80026ee:	4613      	mov	r3, r2
 80026f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026f6:	f7ff fad3 	bl	8001ca0 <HAL_GetTick>
 80026fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b20      	cmp	r3, #32
 8002706:	f040 8244 	bne.w	8002b92 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	2319      	movs	r3, #25
 8002710:	2201      	movs	r2, #1
 8002712:	4982      	ldr	r1, [pc, #520]	; (800291c <HAL_I2C_Mem_Read+0x244>)
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fbc5 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002720:	2302      	movs	r3, #2
 8002722:	e237      	b.n	8002b94 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_I2C_Mem_Read+0x5a>
 800272e:	2302      	movs	r3, #2
 8002730:	e230      	b.n	8002b94 <HAL_I2C_Mem_Read+0x4bc>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b01      	cmp	r3, #1
 8002746:	d007      	beq.n	8002758 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002766:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2222      	movs	r2, #34	; 0x22
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2240      	movs	r2, #64	; 0x40
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a62      	ldr	r2, [pc, #392]	; (8002920 <HAL_I2C_Mem_Read+0x248>)
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800279a:	88f8      	ldrh	r0, [r7, #6]
 800279c:	893a      	ldrh	r2, [r7, #8]
 800279e:	8979      	ldrh	r1, [r7, #10]
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	4603      	mov	r3, r0
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fa92 	bl	8002cd4 <I2C_RequestMemoryRead>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e1ec      	b.n	8002b94 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d113      	bne.n	80027ea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e1c0      	b.n	8002b6c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d11e      	bne.n	8002830 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002800:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002802:	b672      	cpsid	i
}
 8002804:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800282c:	b662      	cpsie	i
}
 800282e:	e035      	b.n	800289c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	2b02      	cmp	r3, #2
 8002836:	d11e      	bne.n	8002876 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002846:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002848:	b672      	cpsid	i
}
 800284a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002870:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002872:	b662      	cpsie	i
}
 8002874:	e012      	b.n	800289c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002884:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800289c:	e166      	b.n	8002b6c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	f200 811f 	bhi.w	8002ae6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d123      	bne.n	80028f8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fc4d 	bl	8003154 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e167      	b.n	8002b94 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028f6:	e139      	b.n	8002b6c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d152      	bne.n	80029a6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002906:	2200      	movs	r2, #0
 8002908:	4906      	ldr	r1, [pc, #24]	; (8002924 <HAL_I2C_Mem_Read+0x24c>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 faca 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e13c      	b.n	8002b94 <HAL_I2C_Mem_Read+0x4bc>
 800291a:	bf00      	nop
 800291c:	00100002 	.word	0x00100002
 8002920:	ffff0000 	.word	0xffff0000
 8002924:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002928:	b672      	cpsid	i
}
 800292a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800296e:	b662      	cpsie	i
}
 8002970:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029a4:	e0e2      	b.n	8002b6c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	2200      	movs	r2, #0
 80029ae:	497b      	ldr	r1, [pc, #492]	; (8002b9c <HAL_I2C_Mem_Read+0x4c4>)
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fa77 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0e9      	b.n	8002b94 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029d0:	b672      	cpsid	i
}
 80029d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a06:	4b66      	ldr	r3, [pc, #408]	; (8002ba0 <HAL_I2C_Mem_Read+0x4c8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	08db      	lsrs	r3, r3, #3
 8002a0c:	4a65      	ldr	r2, [pc, #404]	; (8002ba4 <HAL_I2C_Mem_Read+0x4cc>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0a1a      	lsrs	r2, r3, #8
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	00da      	lsls	r2, r3, #3
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d118      	bne.n	8002a5e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a4e:	b662      	cpsie	i
}
 8002a50:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e09a      	b.n	8002b94 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d1d9      	bne.n	8002a20 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002aae:	b662      	cpsie	i
}
 8002ab0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ae4:	e042      	b.n	8002b6c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fb32 	bl	8003154 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e04c      	b.n	8002b94 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d118      	bne.n	8002b6c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f47f ae94 	bne.w	800289e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3728      	adds	r7, #40	; 0x28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	00010004 	.word	0x00010004
 8002ba0:	2000000c 	.word	0x2000000c
 8002ba4:	14f8b589 	.word	0x14f8b589

08002ba8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	817b      	strh	r3, [r7, #10]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	813b      	strh	r3, [r7, #8]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f960 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf8:	d103      	bne.n	8002c02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e05f      	b.n	8002cc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c06:	897b      	ldrh	r3, [r7, #10]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	6a3a      	ldr	r2, [r7, #32]
 8002c1a:	492d      	ldr	r1, [pc, #180]	; (8002cd0 <I2C_RequestMemoryWrite+0x128>)
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f998 	bl	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e04c      	b.n	8002cc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c44:	6a39      	ldr	r1, [r7, #32]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fa02 	bl	8003050 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00d      	beq.n	8002c6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d107      	bne.n	8002c6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e02b      	b.n	8002cc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c74:	893b      	ldrh	r3, [r7, #8]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	611a      	str	r2, [r3, #16]
 8002c7e:	e021      	b.n	8002cc4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c80:	893b      	ldrh	r3, [r7, #8]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c90:	6a39      	ldr	r1, [r7, #32]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f9dc 	bl	8003050 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d107      	bne.n	8002cb6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e005      	b.n	8002cc6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cba:	893b      	ldrh	r3, [r7, #8]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	00010002 	.word	0x00010002

08002cd4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	817b      	strh	r3, [r7, #10]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	813b      	strh	r3, [r7, #8]
 8002cea:	4613      	mov	r3, r2
 8002cec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cfc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f8c2 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d34:	d103      	bne.n	8002d3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0aa      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d42:	897b      	ldrh	r3, [r7, #10]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	6a3a      	ldr	r2, [r7, #32]
 8002d56:	4952      	ldr	r1, [pc, #328]	; (8002ea0 <I2C_RequestMemoryRead+0x1cc>)
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f8fa 	bl	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e097      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d80:	6a39      	ldr	r1, [r7, #32]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f964 	bl	8003050 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00d      	beq.n	8002daa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d107      	bne.n	8002da6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e076      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d105      	bne.n	8002dbc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002db0:	893b      	ldrh	r3, [r7, #8]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	611a      	str	r2, [r3, #16]
 8002dba:	e021      	b.n	8002e00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dbc:	893b      	ldrh	r3, [r7, #8]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dcc:	6a39      	ldr	r1, [r7, #32]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f93e 	bl	8003050 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00d      	beq.n	8002df6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d107      	bne.n	8002df2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e050      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002df6:	893b      	ldrh	r3, [r7, #8]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e02:	6a39      	ldr	r1, [r7, #32]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f923 	bl	8003050 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00d      	beq.n	8002e2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d107      	bne.n	8002e28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e035      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f82b 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e62:	d103      	bne.n	8002e6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e013      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e70:	897b      	ldrh	r3, [r7, #10]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	6a3a      	ldr	r2, [r7, #32]
 8002e84:	4906      	ldr	r1, [pc, #24]	; (8002ea0 <I2C_RequestMemoryRead+0x1cc>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f863 	bl	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	00010002 	.word	0x00010002

08002ea4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb4:	e025      	b.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d021      	beq.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7fe feef 	bl	8001ca0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d116      	bne.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f043 0220 	orr.w	r2, r3, #32
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e023      	b.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d10d      	bne.n	8002f28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	43da      	mvns	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4013      	ands	r3, r2
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2301      	moveq	r3, #1
 8002f20:	2300      	movne	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	461a      	mov	r2, r3
 8002f26:	e00c      	b.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4013      	ands	r3, r2
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	bf0c      	ite	eq
 8002f3a:	2301      	moveq	r3, #1
 8002f3c:	2300      	movne	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d0b6      	beq.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f60:	e051      	b.n	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f70:	d123      	bne.n	8002fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f043 0204 	orr.w	r2, r3, #4
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e046      	b.n	8003048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d021      	beq.n	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc2:	f7fe fe6d 	bl	8001ca0 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d116      	bne.n	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f043 0220 	orr.w	r2, r3, #32
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e020      	b.n	8003048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10c      	bne.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	e00b      	b.n	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	43da      	mvns	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4013      	ands	r3, r2
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf14      	ite	ne
 800303c:	2301      	movne	r3, #1
 800303e:	2300      	moveq	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d18d      	bne.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800305c:	e02d      	b.n	80030ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f8ce 	bl	8003200 <I2C_IsAcknowledgeFailed>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e02d      	b.n	80030ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d021      	beq.n	80030ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe fe13 	bl	8001ca0 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d116      	bne.n	80030ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e007      	b.n	80030ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	2b80      	cmp	r3, #128	; 0x80
 80030c6:	d1ca      	bne.n	800305e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030de:	e02d      	b.n	800313c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f88d 	bl	8003200 <I2C_IsAcknowledgeFailed>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e02d      	b.n	800314c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f6:	d021      	beq.n	800313c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f8:	f7fe fdd2 	bl	8001ca0 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	429a      	cmp	r2, r3
 8003106:	d302      	bcc.n	800310e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d116      	bne.n	800313c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e007      	b.n	800314c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b04      	cmp	r3, #4
 8003148:	d1ca      	bne.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003160:	e042      	b.n	80031e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b10      	cmp	r3, #16
 800316e:	d119      	bne.n	80031a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0210 	mvn.w	r2, #16
 8003178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e029      	b.n	80031f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a4:	f7fe fd7c 	bl	8001ca0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d302      	bcc.n	80031ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d116      	bne.n	80031e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e007      	b.n	80031f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d1b5      	bne.n	8003162 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003216:	d11b      	bne.n	8003250 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003220:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f043 0204 	orr.w	r2, r3, #4
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e272      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8087 	beq.w	800338a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800327c:	4b92      	ldr	r3, [pc, #584]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b04      	cmp	r3, #4
 8003286:	d00c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003288:	4b8f      	ldr	r3, [pc, #572]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d112      	bne.n	80032ba <HAL_RCC_OscConfig+0x5e>
 8003294:	4b8c      	ldr	r3, [pc, #560]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d10b      	bne.n	80032ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a2:	4b89      	ldr	r3, [pc, #548]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d06c      	beq.n	8003388 <HAL_RCC_OscConfig+0x12c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d168      	bne.n	8003388 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e24c      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x76>
 80032c4:	4b80      	ldr	r3, [pc, #512]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a7f      	ldr	r2, [pc, #508]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	e02e      	b.n	8003330 <HAL_RCC_OscConfig+0xd4>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x98>
 80032da:	4b7b      	ldr	r3, [pc, #492]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7a      	ldr	r2, [pc, #488]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b78      	ldr	r3, [pc, #480]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a77      	ldr	r2, [pc, #476]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e01d      	b.n	8003330 <HAL_RCC_OscConfig+0xd4>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0xbc>
 80032fe:	4b72      	ldr	r3, [pc, #456]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a71      	ldr	r2, [pc, #452]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b6f      	ldr	r3, [pc, #444]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6e      	ldr	r2, [pc, #440]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0xd4>
 8003318:	4b6b      	ldr	r3, [pc, #428]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6a      	ldr	r2, [pc, #424]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a67      	ldr	r2, [pc, #412]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fcb2 	bl	8001ca0 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fcae 	bl	8001ca0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e200      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b5d      	ldr	r3, [pc, #372]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0xe4>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe fc9e 	bl	8001ca0 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe fc9a 	bl	8001ca0 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e1ec      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x10c>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d063      	beq.n	800345e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003396:	4b4c      	ldr	r3, [pc, #304]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033a2:	4b49      	ldr	r3, [pc, #292]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d11c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x18c>
 80033ae:	4b46      	ldr	r3, [pc, #280]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d116      	bne.n	80033e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	4b43      	ldr	r3, [pc, #268]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_RCC_OscConfig+0x176>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d001      	beq.n	80033d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e1c0      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d2:	4b3d      	ldr	r3, [pc, #244]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4939      	ldr	r1, [pc, #228]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	e03a      	b.n	800345e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f0:	4b36      	ldr	r3, [pc, #216]	; (80034cc <HAL_RCC_OscConfig+0x270>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fe fc53 	bl	8001ca0 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fe:	f7fe fc4f 	bl	8001ca0 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e1a1      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341c:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4927      	ldr	r1, [pc, #156]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	600b      	str	r3, [r1, #0]
 8003430:	e015      	b.n	800345e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_RCC_OscConfig+0x270>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fe fc32 	bl	8001ca0 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003440:	f7fe fc2e 	bl	8001ca0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e180      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d03a      	beq.n	80034e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d019      	beq.n	80034a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003478:	f7fe fc12 	bl	8001ca0 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003480:	f7fe fc0e 	bl	8001ca0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e160      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800349e:	2001      	movs	r0, #1
 80034a0:	f000 fad8 	bl	8003a54 <RCC_Delay>
 80034a4:	e01c      	b.n	80034e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <HAL_RCC_OscConfig+0x274>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ac:	f7fe fbf8 	bl	8001ca0 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b2:	e00f      	b.n	80034d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fe fbf4 	bl	8001ca0 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d908      	bls.n	80034d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e146      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	42420000 	.word	0x42420000
 80034d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d4:	4b92      	ldr	r3, [pc, #584]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e9      	bne.n	80034b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80a6 	beq.w	800363a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ee:	2300      	movs	r3, #0
 80034f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f2:	4b8b      	ldr	r3, [pc, #556]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10d      	bne.n	800351a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fe:	4b88      	ldr	r3, [pc, #544]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4a87      	ldr	r2, [pc, #540]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003508:	61d3      	str	r3, [r2, #28]
 800350a:	4b85      	ldr	r3, [pc, #532]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003516:	2301      	movs	r3, #1
 8003518:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351a:	4b82      	ldr	r3, [pc, #520]	; (8003724 <HAL_RCC_OscConfig+0x4c8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d118      	bne.n	8003558 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003526:	4b7f      	ldr	r3, [pc, #508]	; (8003724 <HAL_RCC_OscConfig+0x4c8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a7e      	ldr	r2, [pc, #504]	; (8003724 <HAL_RCC_OscConfig+0x4c8>)
 800352c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003532:	f7fe fbb5 	bl	8001ca0 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353a:	f7fe fbb1 	bl	8001ca0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b64      	cmp	r3, #100	; 0x64
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e103      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	4b75      	ldr	r3, [pc, #468]	; (8003724 <HAL_RCC_OscConfig+0x4c8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d106      	bne.n	800356e <HAL_RCC_OscConfig+0x312>
 8003560:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	4a6e      	ldr	r2, [pc, #440]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6213      	str	r3, [r2, #32]
 800356c:	e02d      	b.n	80035ca <HAL_RCC_OscConfig+0x36e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x334>
 8003576:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a69      	ldr	r2, [pc, #420]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6213      	str	r3, [r2, #32]
 8003582:	4b67      	ldr	r3, [pc, #412]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4a66      	ldr	r2, [pc, #408]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	6213      	str	r3, [r2, #32]
 800358e:	e01c      	b.n	80035ca <HAL_RCC_OscConfig+0x36e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b05      	cmp	r3, #5
 8003596:	d10c      	bne.n	80035b2 <HAL_RCC_OscConfig+0x356>
 8003598:	4b61      	ldr	r3, [pc, #388]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4a60      	ldr	r2, [pc, #384]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	6213      	str	r3, [r2, #32]
 80035a4:	4b5e      	ldr	r3, [pc, #376]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4a5d      	ldr	r2, [pc, #372]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6213      	str	r3, [r2, #32]
 80035b0:	e00b      	b.n	80035ca <HAL_RCC_OscConfig+0x36e>
 80035b2:	4b5b      	ldr	r3, [pc, #364]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4a5a      	ldr	r2, [pc, #360]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	6213      	str	r3, [r2, #32]
 80035be:	4b58      	ldr	r3, [pc, #352]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4a57      	ldr	r2, [pc, #348]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	f023 0304 	bic.w	r3, r3, #4
 80035c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d015      	beq.n	80035fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d2:	f7fe fb65 	bl	8001ca0 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	e00a      	b.n	80035f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7fe fb61 	bl	8001ca0 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e0b1      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f0:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0ee      	beq.n	80035da <HAL_RCC_OscConfig+0x37e>
 80035fc:	e014      	b.n	8003628 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fe:	f7fe fb4f 	bl	8001ca0 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003604:	e00a      	b.n	800361c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f7fe fb4b 	bl	8001ca0 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f241 3288 	movw	r2, #5000	; 0x1388
 8003614:	4293      	cmp	r3, r2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e09b      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361c:	4b40      	ldr	r3, [pc, #256]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ee      	bne.n	8003606 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362e:	4b3c      	ldr	r3, [pc, #240]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	4a3b      	ldr	r2, [pc, #236]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003638:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8087 	beq.w	8003752 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b08      	cmp	r3, #8
 800364e:	d061      	beq.n	8003714 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d146      	bne.n	80036e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003658:	4b33      	ldr	r3, [pc, #204]	; (8003728 <HAL_RCC_OscConfig+0x4cc>)
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365e:	f7fe fb1f 	bl	8001ca0 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003666:	f7fe fb1b 	bl	8001ca0 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e06d      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003678:	4b29      	ldr	r3, [pc, #164]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368c:	d108      	bne.n	80036a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	4921      	ldr	r1, [pc, #132]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a0:	4b1f      	ldr	r3, [pc, #124]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a19      	ldr	r1, [r3, #32]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	430b      	orrs	r3, r1
 80036b2:	491b      	ldr	r1, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <HAL_RCC_OscConfig+0x4cc>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fe faef 	bl	8001ca0 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fe faeb 	bl	8001ca0 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e03d      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x46a>
 80036e4:	e035      	b.n	8003752 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_RCC_OscConfig+0x4cc>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fe fad8 	bl	8001ca0 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fe fad4 	bl	8001ca0 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e026      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x498>
 8003712:	e01e      	b.n	8003752 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d107      	bne.n	800372c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e019      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
 8003720:	40021000 	.word	0x40021000
 8003724:	40007000 	.word	0x40007000
 8003728:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_OscConfig+0x500>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	429a      	cmp	r2, r3
 800373e:	d106      	bne.n	800374e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d001      	beq.n	8003752 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000

08003760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0d0      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003774:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d910      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003782:	4b67      	ldr	r3, [pc, #412]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 0207 	bic.w	r2, r3, #7
 800378a:	4965      	ldr	r1, [pc, #404]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b63      	ldr	r3, [pc, #396]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0b8      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037bc:	4b59      	ldr	r3, [pc, #356]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4a58      	ldr	r2, [pc, #352]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d4:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a52      	ldr	r2, [pc, #328]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e0:	4b50      	ldr	r3, [pc, #320]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	494d      	ldr	r1, [pc, #308]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d040      	beq.n	8003880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d115      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e07f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d107      	bne.n	800382e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381e:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e073      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382e:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e06b      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800383e:	4b39      	ldr	r3, [pc, #228]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f023 0203 	bic.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4936      	ldr	r1, [pc, #216]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003850:	f7fe fa26 	bl	8001ca0 <HAL_GetTick>
 8003854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	e00a      	b.n	800386e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003858:	f7fe fa22 	bl	8001ca0 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e053      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 020c 	and.w	r2, r3, #12
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	429a      	cmp	r2, r3
 800387e:	d1eb      	bne.n	8003858 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d210      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 0207 	bic.w	r2, r3, #7
 8003896:	4922      	ldr	r1, [pc, #136]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e032      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4916      	ldr	r1, [pc, #88]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	490e      	ldr	r1, [pc, #56]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ee:	f000 f821 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80038f2:	4602      	mov	r2, r0
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	490a      	ldr	r1, [pc, #40]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 8003900:	5ccb      	ldrb	r3, [r1, r3]
 8003902:	fa22 f303 	lsr.w	r3, r2, r3
 8003906:	4a09      	ldr	r2, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x1cc>)
 8003908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x1d0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe f984 	bl	8001c1c <HAL_InitTick>

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40022000 	.word	0x40022000
 8003924:	40021000 	.word	0x40021000
 8003928:	08006d8c 	.word	0x08006d8c
 800392c:	2000000c 	.word	0x2000000c
 8003930:	20000020 	.word	0x20000020

08003934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003934:	b490      	push	{r4, r7}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800393a:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800393c:	1d3c      	adds	r4, r7, #4
 800393e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003944:	f240 2301 	movw	r3, #513	; 0x201
 8003948:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	2300      	movs	r3, #0
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800395e:	4b21      	ldr	r3, [pc, #132]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b04      	cmp	r3, #4
 800396c:	d002      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x40>
 800396e:	2b08      	cmp	r3, #8
 8003970:	d003      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0x46>
 8003972:	e02b      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003974:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003976:	623b      	str	r3, [r7, #32]
      break;
 8003978:	e02b      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	0c9b      	lsrs	r3, r3, #18
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	3328      	adds	r3, #40	; 0x28
 8003984:	443b      	add	r3, r7
 8003986:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800398a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d012      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003996:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	0c5b      	lsrs	r3, r3, #17
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	3328      	adds	r3, #40	; 0x28
 80039a2:	443b      	add	r3, r7
 80039a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	4a0e      	ldr	r2, [pc, #56]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039ae:	fb03 f202 	mul.w	r2, r3, r2
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ba:	e004      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c0:	fb02 f303 	mul.w	r3, r2, r3
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	623b      	str	r3, [r7, #32]
      break;
 80039ca:	e002      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039ce:	623b      	str	r3, [r7, #32]
      break;
 80039d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039d2:	6a3b      	ldr	r3, [r7, #32]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3728      	adds	r7, #40	; 0x28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc90      	pop	{r4, r7}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	08006d7c 	.word	0x08006d7c
 80039e4:	40021000 	.word	0x40021000
 80039e8:	007a1200 	.word	0x007a1200
 80039ec:	003d0900 	.word	0x003d0900

080039f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f4:	4b02      	ldr	r3, [pc, #8]	; (8003a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	2000000c 	.word	0x2000000c

08003a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a08:	f7ff fff2 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4903      	ldr	r1, [pc, #12]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08006d9c 	.word	0x08006d9c

08003a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a30:	f7ff ffde 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	0adb      	lsrs	r3, r3, #11
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	4903      	ldr	r1, [pc, #12]	; (8003a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	08006d9c 	.word	0x08006d9c

08003a54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <RCC_Delay+0x34>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <RCC_Delay+0x38>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	0a5b      	lsrs	r3, r3, #9
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a70:	bf00      	nop
  }
  while (Delay --);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1e5a      	subs	r2, r3, #1
 8003a76:	60fa      	str	r2, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f9      	bne.n	8003a70 <RCC_Delay+0x1c>
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	2000000c 	.word	0x2000000c
 8003a8c:	10624dd3 	.word	0x10624dd3

08003a90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e03f      	b.n	8003b22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd fc56 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2224      	movs	r2, #36	; 0x24
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ad2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f905 	bl	8003ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ae8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003af8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b08a      	sub	sp, #40	; 0x28
 8003b2e:	af02      	add	r7, sp, #8
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	4613      	mov	r3, r2
 8003b38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d17c      	bne.n	8003c44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_UART_Transmit+0x2c>
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e075      	b.n	8003c46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_UART_Transmit+0x3e>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e06e      	b.n	8003c46 <HAL_UART_Transmit+0x11c>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2221      	movs	r2, #33	; 0x21
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b7e:	f7fe f88f 	bl	8001ca0 <HAL_GetTick>
 8003b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	88fa      	ldrh	r2, [r7, #6]
 8003b88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	88fa      	ldrh	r2, [r7, #6]
 8003b8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b98:	d108      	bne.n	8003bac <HAL_UART_Transmit+0x82>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e003      	b.n	8003bb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bbc:	e02a      	b.n	8003c14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2180      	movs	r1, #128	; 0x80
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f840 	bl	8003c4e <UART_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e036      	b.n	8003c46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10b      	bne.n	8003bf6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	61bb      	str	r3, [r7, #24]
 8003bf4:	e007      	b.n	8003c06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	781a      	ldrb	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	3301      	adds	r3, #1
 8003c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1cf      	bne.n	8003bbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2200      	movs	r2, #0
 8003c26:	2140      	movs	r1, #64	; 0x40
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f810 	bl	8003c4e <UART_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e006      	b.n	8003c46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e000      	b.n	8003c46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
  }
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3720      	adds	r7, #32
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5e:	e02c      	b.n	8003cba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d028      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c6e:	f7fe f817 	bl	8001ca0 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d21d      	bcs.n	8003cba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c8c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e00f      	b.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	bf0c      	ite	eq
 8003cca:	2301      	moveq	r3, #1
 8003ccc:	2300      	movne	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d0c3      	beq.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d1e:	f023 030c 	bic.w	r3, r3, #12
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a2c      	ldr	r2, [pc, #176]	; (8003df8 <UART_SetConfig+0x114>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d103      	bne.n	8003d54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d4c:	f7ff fe6e 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	e002      	b.n	8003d5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d54:	f7ff fe56 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8003d58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	009a      	lsls	r2, r3, #2
 8003d64:	441a      	add	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <UART_SetConfig+0x118>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	0119      	lsls	r1, r3, #4
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009a      	lsls	r2, r3, #2
 8003d84:	441a      	add	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <UART_SetConfig+0x118>)
 8003d92:	fba3 0302 	umull	r0, r3, r3, r2
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	2064      	movs	r0, #100	; 0x64
 8003d9a:	fb00 f303 	mul.w	r3, r0, r3
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	3332      	adds	r3, #50	; 0x32
 8003da4:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <UART_SetConfig+0x118>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db0:	4419      	add	r1, r3
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	009a      	lsls	r2, r3, #2
 8003dbc:	441a      	add	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <UART_SetConfig+0x118>)
 8003dca:	fba3 0302 	umull	r0, r3, r3, r2
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	2064      	movs	r0, #100	; 0x64
 8003dd2:	fb00 f303 	mul.w	r3, r0, r3
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	3332      	adds	r3, #50	; 0x32
 8003ddc:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <UART_SetConfig+0x118>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	f003 020f 	and.w	r2, r3, #15
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	440a      	add	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40013800 	.word	0x40013800
 8003dfc:	51eb851f 	.word	0x51eb851f

08003e00 <__errno>:
 8003e00:	4b01      	ldr	r3, [pc, #4]	; (8003e08 <__errno+0x8>)
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000028 	.word	0x20000028

08003e0c <__libc_init_array>:
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	2600      	movs	r6, #0
 8003e10:	4d0c      	ldr	r5, [pc, #48]	; (8003e44 <__libc_init_array+0x38>)
 8003e12:	4c0d      	ldr	r4, [pc, #52]	; (8003e48 <__libc_init_array+0x3c>)
 8003e14:	1b64      	subs	r4, r4, r5
 8003e16:	10a4      	asrs	r4, r4, #2
 8003e18:	42a6      	cmp	r6, r4
 8003e1a:	d109      	bne.n	8003e30 <__libc_init_array+0x24>
 8003e1c:	f002 fefc 	bl	8006c18 <_init>
 8003e20:	2600      	movs	r6, #0
 8003e22:	4d0a      	ldr	r5, [pc, #40]	; (8003e4c <__libc_init_array+0x40>)
 8003e24:	4c0a      	ldr	r4, [pc, #40]	; (8003e50 <__libc_init_array+0x44>)
 8003e26:	1b64      	subs	r4, r4, r5
 8003e28:	10a4      	asrs	r4, r4, #2
 8003e2a:	42a6      	cmp	r6, r4
 8003e2c:	d105      	bne.n	8003e3a <__libc_init_array+0x2e>
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e34:	4798      	blx	r3
 8003e36:	3601      	adds	r6, #1
 8003e38:	e7ee      	b.n	8003e18 <__libc_init_array+0xc>
 8003e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3e:	4798      	blx	r3
 8003e40:	3601      	adds	r6, #1
 8003e42:	e7f2      	b.n	8003e2a <__libc_init_array+0x1e>
 8003e44:	0800717c 	.word	0x0800717c
 8003e48:	0800717c 	.word	0x0800717c
 8003e4c:	0800717c 	.word	0x0800717c
 8003e50:	08007180 	.word	0x08007180

08003e54 <memset>:
 8003e54:	4603      	mov	r3, r0
 8003e56:	4402      	add	r2, r0
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d100      	bne.n	8003e5e <memset+0xa>
 8003e5c:	4770      	bx	lr
 8003e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e62:	e7f9      	b.n	8003e58 <memset+0x4>

08003e64 <__cvt>:
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e6a:	461f      	mov	r7, r3
 8003e6c:	bfbb      	ittet	lt
 8003e6e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003e72:	461f      	movlt	r7, r3
 8003e74:	2300      	movge	r3, #0
 8003e76:	232d      	movlt	r3, #45	; 0x2d
 8003e78:	b088      	sub	sp, #32
 8003e7a:	4614      	mov	r4, r2
 8003e7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003e7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003e80:	7013      	strb	r3, [r2, #0]
 8003e82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e84:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003e88:	f023 0820 	bic.w	r8, r3, #32
 8003e8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e90:	d005      	beq.n	8003e9e <__cvt+0x3a>
 8003e92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e96:	d100      	bne.n	8003e9a <__cvt+0x36>
 8003e98:	3501      	adds	r5, #1
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e000      	b.n	8003ea0 <__cvt+0x3c>
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	aa07      	add	r2, sp, #28
 8003ea2:	9204      	str	r2, [sp, #16]
 8003ea4:	aa06      	add	r2, sp, #24
 8003ea6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003eaa:	e9cd 3500 	strd	r3, r5, [sp]
 8003eae:	4622      	mov	r2, r4
 8003eb0:	463b      	mov	r3, r7
 8003eb2:	f000 fce5 	bl	8004880 <_dtoa_r>
 8003eb6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003eba:	4606      	mov	r6, r0
 8003ebc:	d102      	bne.n	8003ec4 <__cvt+0x60>
 8003ebe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003ec0:	07db      	lsls	r3, r3, #31
 8003ec2:	d522      	bpl.n	8003f0a <__cvt+0xa6>
 8003ec4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ec8:	eb06 0905 	add.w	r9, r6, r5
 8003ecc:	d110      	bne.n	8003ef0 <__cvt+0x8c>
 8003ece:	7833      	ldrb	r3, [r6, #0]
 8003ed0:	2b30      	cmp	r3, #48	; 0x30
 8003ed2:	d10a      	bne.n	8003eea <__cvt+0x86>
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	4620      	mov	r0, r4
 8003eda:	4639      	mov	r1, r7
 8003edc:	f7fc fd64 	bl	80009a8 <__aeabi_dcmpeq>
 8003ee0:	b918      	cbnz	r0, 8003eea <__cvt+0x86>
 8003ee2:	f1c5 0501 	rsb	r5, r5, #1
 8003ee6:	f8ca 5000 	str.w	r5, [sl]
 8003eea:	f8da 3000 	ldr.w	r3, [sl]
 8003eee:	4499      	add	r9, r3
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	4639      	mov	r1, r7
 8003ef8:	f7fc fd56 	bl	80009a8 <__aeabi_dcmpeq>
 8003efc:	b108      	cbz	r0, 8003f02 <__cvt+0x9e>
 8003efe:	f8cd 901c 	str.w	r9, [sp, #28]
 8003f02:	2230      	movs	r2, #48	; 0x30
 8003f04:	9b07      	ldr	r3, [sp, #28]
 8003f06:	454b      	cmp	r3, r9
 8003f08:	d307      	bcc.n	8003f1a <__cvt+0xb6>
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	9b07      	ldr	r3, [sp, #28]
 8003f0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003f10:	1b9b      	subs	r3, r3, r6
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	b008      	add	sp, #32
 8003f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f1a:	1c59      	adds	r1, r3, #1
 8003f1c:	9107      	str	r1, [sp, #28]
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e7f0      	b.n	8003f04 <__cvt+0xa0>

08003f22 <__exponent>:
 8003f22:	4603      	mov	r3, r0
 8003f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f26:	2900      	cmp	r1, #0
 8003f28:	f803 2b02 	strb.w	r2, [r3], #2
 8003f2c:	bfb6      	itet	lt
 8003f2e:	222d      	movlt	r2, #45	; 0x2d
 8003f30:	222b      	movge	r2, #43	; 0x2b
 8003f32:	4249      	neglt	r1, r1
 8003f34:	2909      	cmp	r1, #9
 8003f36:	7042      	strb	r2, [r0, #1]
 8003f38:	dd2b      	ble.n	8003f92 <__exponent+0x70>
 8003f3a:	f10d 0407 	add.w	r4, sp, #7
 8003f3e:	46a4      	mov	ip, r4
 8003f40:	270a      	movs	r7, #10
 8003f42:	fb91 f6f7 	sdiv	r6, r1, r7
 8003f46:	460a      	mov	r2, r1
 8003f48:	46a6      	mov	lr, r4
 8003f4a:	fb07 1516 	mls	r5, r7, r6, r1
 8003f4e:	2a63      	cmp	r2, #99	; 0x63
 8003f50:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003f54:	4631      	mov	r1, r6
 8003f56:	f104 34ff 	add.w	r4, r4, #4294967295
 8003f5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003f5e:	dcf0      	bgt.n	8003f42 <__exponent+0x20>
 8003f60:	3130      	adds	r1, #48	; 0x30
 8003f62:	f1ae 0502 	sub.w	r5, lr, #2
 8003f66:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	1c44      	adds	r4, r0, #1
 8003f6e:	4561      	cmp	r1, ip
 8003f70:	d30a      	bcc.n	8003f88 <__exponent+0x66>
 8003f72:	f10d 0209 	add.w	r2, sp, #9
 8003f76:	eba2 020e 	sub.w	r2, r2, lr
 8003f7a:	4565      	cmp	r5, ip
 8003f7c:	bf88      	it	hi
 8003f7e:	2200      	movhi	r2, #0
 8003f80:	4413      	add	r3, r2
 8003f82:	1a18      	subs	r0, r3, r0
 8003f84:	b003      	add	sp, #12
 8003f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f8c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003f90:	e7ed      	b.n	8003f6e <__exponent+0x4c>
 8003f92:	2330      	movs	r3, #48	; 0x30
 8003f94:	3130      	adds	r1, #48	; 0x30
 8003f96:	7083      	strb	r3, [r0, #2]
 8003f98:	70c1      	strb	r1, [r0, #3]
 8003f9a:	1d03      	adds	r3, r0, #4
 8003f9c:	e7f1      	b.n	8003f82 <__exponent+0x60>
	...

08003fa0 <_printf_float>:
 8003fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa4:	b091      	sub	sp, #68	; 0x44
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003fac:	4616      	mov	r6, r2
 8003fae:	461f      	mov	r7, r3
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	f001 fa53 	bl	800545c <_localeconv_r>
 8003fb6:	6803      	ldr	r3, [r0, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	9309      	str	r3, [sp, #36]	; 0x24
 8003fbc:	f7fc f8c8 	bl	8000150 <strlen>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	930e      	str	r3, [sp, #56]	; 0x38
 8003fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8003fc8:	900a      	str	r0, [sp, #40]	; 0x28
 8003fca:	3307      	adds	r3, #7
 8003fcc:	f023 0307 	bic.w	r3, r3, #7
 8003fd0:	f103 0208 	add.w	r2, r3, #8
 8003fd4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003fd8:	f8d4 b000 	ldr.w	fp, [r4]
 8003fdc:	f8c8 2000 	str.w	r2, [r8]
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003fe8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003fec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003ff0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	4b9c      	ldr	r3, [pc, #624]	; (800426c <_printf_float+0x2cc>)
 8003ffa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ffc:	f7fc fd06 	bl	8000a0c <__aeabi_dcmpun>
 8004000:	bb70      	cbnz	r0, 8004060 <_printf_float+0xc0>
 8004002:	f04f 32ff 	mov.w	r2, #4294967295
 8004006:	4640      	mov	r0, r8
 8004008:	4b98      	ldr	r3, [pc, #608]	; (800426c <_printf_float+0x2cc>)
 800400a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800400c:	f7fc fce0 	bl	80009d0 <__aeabi_dcmple>
 8004010:	bb30      	cbnz	r0, 8004060 <_printf_float+0xc0>
 8004012:	2200      	movs	r2, #0
 8004014:	2300      	movs	r3, #0
 8004016:	4640      	mov	r0, r8
 8004018:	4651      	mov	r1, sl
 800401a:	f7fc fccf 	bl	80009bc <__aeabi_dcmplt>
 800401e:	b110      	cbz	r0, 8004026 <_printf_float+0x86>
 8004020:	232d      	movs	r3, #45	; 0x2d
 8004022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004026:	4b92      	ldr	r3, [pc, #584]	; (8004270 <_printf_float+0x2d0>)
 8004028:	4892      	ldr	r0, [pc, #584]	; (8004274 <_printf_float+0x2d4>)
 800402a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800402e:	bf94      	ite	ls
 8004030:	4698      	movls	r8, r3
 8004032:	4680      	movhi	r8, r0
 8004034:	2303      	movs	r3, #3
 8004036:	f04f 0a00 	mov.w	sl, #0
 800403a:	6123      	str	r3, [r4, #16]
 800403c:	f02b 0304 	bic.w	r3, fp, #4
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	4633      	mov	r3, r6
 8004044:	4621      	mov	r1, r4
 8004046:	4628      	mov	r0, r5
 8004048:	9700      	str	r7, [sp, #0]
 800404a:	aa0f      	add	r2, sp, #60	; 0x3c
 800404c:	f000 f9d4 	bl	80043f8 <_printf_common>
 8004050:	3001      	adds	r0, #1
 8004052:	f040 8090 	bne.w	8004176 <_printf_float+0x1d6>
 8004056:	f04f 30ff 	mov.w	r0, #4294967295
 800405a:	b011      	add	sp, #68	; 0x44
 800405c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004060:	4642      	mov	r2, r8
 8004062:	4653      	mov	r3, sl
 8004064:	4640      	mov	r0, r8
 8004066:	4651      	mov	r1, sl
 8004068:	f7fc fcd0 	bl	8000a0c <__aeabi_dcmpun>
 800406c:	b148      	cbz	r0, 8004082 <_printf_float+0xe2>
 800406e:	f1ba 0f00 	cmp.w	sl, #0
 8004072:	bfb8      	it	lt
 8004074:	232d      	movlt	r3, #45	; 0x2d
 8004076:	4880      	ldr	r0, [pc, #512]	; (8004278 <_printf_float+0x2d8>)
 8004078:	bfb8      	it	lt
 800407a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800407e:	4b7f      	ldr	r3, [pc, #508]	; (800427c <_printf_float+0x2dc>)
 8004080:	e7d3      	b.n	800402a <_printf_float+0x8a>
 8004082:	6863      	ldr	r3, [r4, #4]
 8004084:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	d142      	bne.n	8004112 <_printf_float+0x172>
 800408c:	2306      	movs	r3, #6
 800408e:	6063      	str	r3, [r4, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	9206      	str	r2, [sp, #24]
 8004094:	aa0e      	add	r2, sp, #56	; 0x38
 8004096:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800409a:	aa0d      	add	r2, sp, #52	; 0x34
 800409c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80040a0:	9203      	str	r2, [sp, #12]
 80040a2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80040a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80040aa:	6023      	str	r3, [r4, #0]
 80040ac:	6863      	ldr	r3, [r4, #4]
 80040ae:	4642      	mov	r2, r8
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	4628      	mov	r0, r5
 80040b4:	4653      	mov	r3, sl
 80040b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80040b8:	f7ff fed4 	bl	8003e64 <__cvt>
 80040bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040be:	4680      	mov	r8, r0
 80040c0:	2947      	cmp	r1, #71	; 0x47
 80040c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80040c4:	d108      	bne.n	80040d8 <_printf_float+0x138>
 80040c6:	1cc8      	adds	r0, r1, #3
 80040c8:	db02      	blt.n	80040d0 <_printf_float+0x130>
 80040ca:	6863      	ldr	r3, [r4, #4]
 80040cc:	4299      	cmp	r1, r3
 80040ce:	dd40      	ble.n	8004152 <_printf_float+0x1b2>
 80040d0:	f1a9 0902 	sub.w	r9, r9, #2
 80040d4:	fa5f f989 	uxtb.w	r9, r9
 80040d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040dc:	d81f      	bhi.n	800411e <_printf_float+0x17e>
 80040de:	464a      	mov	r2, r9
 80040e0:	3901      	subs	r1, #1
 80040e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040e6:	910d      	str	r1, [sp, #52]	; 0x34
 80040e8:	f7ff ff1b 	bl	8003f22 <__exponent>
 80040ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040ee:	4682      	mov	sl, r0
 80040f0:	1813      	adds	r3, r2, r0
 80040f2:	2a01      	cmp	r2, #1
 80040f4:	6123      	str	r3, [r4, #16]
 80040f6:	dc02      	bgt.n	80040fe <_printf_float+0x15e>
 80040f8:	6822      	ldr	r2, [r4, #0]
 80040fa:	07d2      	lsls	r2, r2, #31
 80040fc:	d501      	bpl.n	8004102 <_printf_float+0x162>
 80040fe:	3301      	adds	r3, #1
 8004100:	6123      	str	r3, [r4, #16]
 8004102:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004106:	2b00      	cmp	r3, #0
 8004108:	d09b      	beq.n	8004042 <_printf_float+0xa2>
 800410a:	232d      	movs	r3, #45	; 0x2d
 800410c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004110:	e797      	b.n	8004042 <_printf_float+0xa2>
 8004112:	2947      	cmp	r1, #71	; 0x47
 8004114:	d1bc      	bne.n	8004090 <_printf_float+0xf0>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1ba      	bne.n	8004090 <_printf_float+0xf0>
 800411a:	2301      	movs	r3, #1
 800411c:	e7b7      	b.n	800408e <_printf_float+0xee>
 800411e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004122:	d118      	bne.n	8004156 <_printf_float+0x1b6>
 8004124:	2900      	cmp	r1, #0
 8004126:	6863      	ldr	r3, [r4, #4]
 8004128:	dd0b      	ble.n	8004142 <_printf_float+0x1a2>
 800412a:	6121      	str	r1, [r4, #16]
 800412c:	b913      	cbnz	r3, 8004134 <_printf_float+0x194>
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	07d0      	lsls	r0, r2, #31
 8004132:	d502      	bpl.n	800413a <_printf_float+0x19a>
 8004134:	3301      	adds	r3, #1
 8004136:	440b      	add	r3, r1
 8004138:	6123      	str	r3, [r4, #16]
 800413a:	f04f 0a00 	mov.w	sl, #0
 800413e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004140:	e7df      	b.n	8004102 <_printf_float+0x162>
 8004142:	b913      	cbnz	r3, 800414a <_printf_float+0x1aa>
 8004144:	6822      	ldr	r2, [r4, #0]
 8004146:	07d2      	lsls	r2, r2, #31
 8004148:	d501      	bpl.n	800414e <_printf_float+0x1ae>
 800414a:	3302      	adds	r3, #2
 800414c:	e7f4      	b.n	8004138 <_printf_float+0x198>
 800414e:	2301      	movs	r3, #1
 8004150:	e7f2      	b.n	8004138 <_printf_float+0x198>
 8004152:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004158:	4299      	cmp	r1, r3
 800415a:	db05      	blt.n	8004168 <_printf_float+0x1c8>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	6121      	str	r1, [r4, #16]
 8004160:	07d8      	lsls	r0, r3, #31
 8004162:	d5ea      	bpl.n	800413a <_printf_float+0x19a>
 8004164:	1c4b      	adds	r3, r1, #1
 8004166:	e7e7      	b.n	8004138 <_printf_float+0x198>
 8004168:	2900      	cmp	r1, #0
 800416a:	bfcc      	ite	gt
 800416c:	2201      	movgt	r2, #1
 800416e:	f1c1 0202 	rsble	r2, r1, #2
 8004172:	4413      	add	r3, r2
 8004174:	e7e0      	b.n	8004138 <_printf_float+0x198>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	055a      	lsls	r2, r3, #21
 800417a:	d407      	bmi.n	800418c <_printf_float+0x1ec>
 800417c:	6923      	ldr	r3, [r4, #16]
 800417e:	4642      	mov	r2, r8
 8004180:	4631      	mov	r1, r6
 8004182:	4628      	mov	r0, r5
 8004184:	47b8      	blx	r7
 8004186:	3001      	adds	r0, #1
 8004188:	d12b      	bne.n	80041e2 <_printf_float+0x242>
 800418a:	e764      	b.n	8004056 <_printf_float+0xb6>
 800418c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004190:	f240 80dd 	bls.w	800434e <_printf_float+0x3ae>
 8004194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004198:	2200      	movs	r2, #0
 800419a:	2300      	movs	r3, #0
 800419c:	f7fc fc04 	bl	80009a8 <__aeabi_dcmpeq>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d033      	beq.n	800420c <_printf_float+0x26c>
 80041a4:	2301      	movs	r3, #1
 80041a6:	4631      	mov	r1, r6
 80041a8:	4628      	mov	r0, r5
 80041aa:	4a35      	ldr	r2, [pc, #212]	; (8004280 <_printf_float+0x2e0>)
 80041ac:	47b8      	blx	r7
 80041ae:	3001      	adds	r0, #1
 80041b0:	f43f af51 	beq.w	8004056 <_printf_float+0xb6>
 80041b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041b8:	429a      	cmp	r2, r3
 80041ba:	db02      	blt.n	80041c2 <_printf_float+0x222>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	07d8      	lsls	r0, r3, #31
 80041c0:	d50f      	bpl.n	80041e2 <_printf_float+0x242>
 80041c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041c6:	4631      	mov	r1, r6
 80041c8:	4628      	mov	r0, r5
 80041ca:	47b8      	blx	r7
 80041cc:	3001      	adds	r0, #1
 80041ce:	f43f af42 	beq.w	8004056 <_printf_float+0xb6>
 80041d2:	f04f 0800 	mov.w	r8, #0
 80041d6:	f104 091a 	add.w	r9, r4, #26
 80041da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041dc:	3b01      	subs	r3, #1
 80041de:	4543      	cmp	r3, r8
 80041e0:	dc09      	bgt.n	80041f6 <_printf_float+0x256>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	079b      	lsls	r3, r3, #30
 80041e6:	f100 8102 	bmi.w	80043ee <_printf_float+0x44e>
 80041ea:	68e0      	ldr	r0, [r4, #12]
 80041ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041ee:	4298      	cmp	r0, r3
 80041f0:	bfb8      	it	lt
 80041f2:	4618      	movlt	r0, r3
 80041f4:	e731      	b.n	800405a <_printf_float+0xba>
 80041f6:	2301      	movs	r3, #1
 80041f8:	464a      	mov	r2, r9
 80041fa:	4631      	mov	r1, r6
 80041fc:	4628      	mov	r0, r5
 80041fe:	47b8      	blx	r7
 8004200:	3001      	adds	r0, #1
 8004202:	f43f af28 	beq.w	8004056 <_printf_float+0xb6>
 8004206:	f108 0801 	add.w	r8, r8, #1
 800420a:	e7e6      	b.n	80041da <_printf_float+0x23a>
 800420c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800420e:	2b00      	cmp	r3, #0
 8004210:	dc38      	bgt.n	8004284 <_printf_float+0x2e4>
 8004212:	2301      	movs	r3, #1
 8004214:	4631      	mov	r1, r6
 8004216:	4628      	mov	r0, r5
 8004218:	4a19      	ldr	r2, [pc, #100]	; (8004280 <_printf_float+0x2e0>)
 800421a:	47b8      	blx	r7
 800421c:	3001      	adds	r0, #1
 800421e:	f43f af1a 	beq.w	8004056 <_printf_float+0xb6>
 8004222:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004226:	4313      	orrs	r3, r2
 8004228:	d102      	bne.n	8004230 <_printf_float+0x290>
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	07d9      	lsls	r1, r3, #31
 800422e:	d5d8      	bpl.n	80041e2 <_printf_float+0x242>
 8004230:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004234:	4631      	mov	r1, r6
 8004236:	4628      	mov	r0, r5
 8004238:	47b8      	blx	r7
 800423a:	3001      	adds	r0, #1
 800423c:	f43f af0b 	beq.w	8004056 <_printf_float+0xb6>
 8004240:	f04f 0900 	mov.w	r9, #0
 8004244:	f104 0a1a 	add.w	sl, r4, #26
 8004248:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800424a:	425b      	negs	r3, r3
 800424c:	454b      	cmp	r3, r9
 800424e:	dc01      	bgt.n	8004254 <_printf_float+0x2b4>
 8004250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004252:	e794      	b.n	800417e <_printf_float+0x1de>
 8004254:	2301      	movs	r3, #1
 8004256:	4652      	mov	r2, sl
 8004258:	4631      	mov	r1, r6
 800425a:	4628      	mov	r0, r5
 800425c:	47b8      	blx	r7
 800425e:	3001      	adds	r0, #1
 8004260:	f43f aef9 	beq.w	8004056 <_printf_float+0xb6>
 8004264:	f109 0901 	add.w	r9, r9, #1
 8004268:	e7ee      	b.n	8004248 <_printf_float+0x2a8>
 800426a:	bf00      	nop
 800426c:	7fefffff 	.word	0x7fefffff
 8004270:	08006da8 	.word	0x08006da8
 8004274:	08006dac 	.word	0x08006dac
 8004278:	08006db4 	.word	0x08006db4
 800427c:	08006db0 	.word	0x08006db0
 8004280:	08006db8 	.word	0x08006db8
 8004284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004286:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004288:	429a      	cmp	r2, r3
 800428a:	bfa8      	it	ge
 800428c:	461a      	movge	r2, r3
 800428e:	2a00      	cmp	r2, #0
 8004290:	4691      	mov	r9, r2
 8004292:	dc37      	bgt.n	8004304 <_printf_float+0x364>
 8004294:	f04f 0b00 	mov.w	fp, #0
 8004298:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800429c:	f104 021a 	add.w	r2, r4, #26
 80042a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80042a4:	ebaa 0309 	sub.w	r3, sl, r9
 80042a8:	455b      	cmp	r3, fp
 80042aa:	dc33      	bgt.n	8004314 <_printf_float+0x374>
 80042ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042b0:	429a      	cmp	r2, r3
 80042b2:	db3b      	blt.n	800432c <_printf_float+0x38c>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	07da      	lsls	r2, r3, #31
 80042b8:	d438      	bmi.n	800432c <_printf_float+0x38c>
 80042ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042be:	eba3 020a 	sub.w	r2, r3, sl
 80042c2:	eba3 0901 	sub.w	r9, r3, r1
 80042c6:	4591      	cmp	r9, r2
 80042c8:	bfa8      	it	ge
 80042ca:	4691      	movge	r9, r2
 80042cc:	f1b9 0f00 	cmp.w	r9, #0
 80042d0:	dc34      	bgt.n	800433c <_printf_float+0x39c>
 80042d2:	f04f 0800 	mov.w	r8, #0
 80042d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042da:	f104 0a1a 	add.w	sl, r4, #26
 80042de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	eba3 0309 	sub.w	r3, r3, r9
 80042e8:	4543      	cmp	r3, r8
 80042ea:	f77f af7a 	ble.w	80041e2 <_printf_float+0x242>
 80042ee:	2301      	movs	r3, #1
 80042f0:	4652      	mov	r2, sl
 80042f2:	4631      	mov	r1, r6
 80042f4:	4628      	mov	r0, r5
 80042f6:	47b8      	blx	r7
 80042f8:	3001      	adds	r0, #1
 80042fa:	f43f aeac 	beq.w	8004056 <_printf_float+0xb6>
 80042fe:	f108 0801 	add.w	r8, r8, #1
 8004302:	e7ec      	b.n	80042de <_printf_float+0x33e>
 8004304:	4613      	mov	r3, r2
 8004306:	4631      	mov	r1, r6
 8004308:	4642      	mov	r2, r8
 800430a:	4628      	mov	r0, r5
 800430c:	47b8      	blx	r7
 800430e:	3001      	adds	r0, #1
 8004310:	d1c0      	bne.n	8004294 <_printf_float+0x2f4>
 8004312:	e6a0      	b.n	8004056 <_printf_float+0xb6>
 8004314:	2301      	movs	r3, #1
 8004316:	4631      	mov	r1, r6
 8004318:	4628      	mov	r0, r5
 800431a:	920b      	str	r2, [sp, #44]	; 0x2c
 800431c:	47b8      	blx	r7
 800431e:	3001      	adds	r0, #1
 8004320:	f43f ae99 	beq.w	8004056 <_printf_float+0xb6>
 8004324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004326:	f10b 0b01 	add.w	fp, fp, #1
 800432a:	e7b9      	b.n	80042a0 <_printf_float+0x300>
 800432c:	4631      	mov	r1, r6
 800432e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004332:	4628      	mov	r0, r5
 8004334:	47b8      	blx	r7
 8004336:	3001      	adds	r0, #1
 8004338:	d1bf      	bne.n	80042ba <_printf_float+0x31a>
 800433a:	e68c      	b.n	8004056 <_printf_float+0xb6>
 800433c:	464b      	mov	r3, r9
 800433e:	4631      	mov	r1, r6
 8004340:	4628      	mov	r0, r5
 8004342:	eb08 020a 	add.w	r2, r8, sl
 8004346:	47b8      	blx	r7
 8004348:	3001      	adds	r0, #1
 800434a:	d1c2      	bne.n	80042d2 <_printf_float+0x332>
 800434c:	e683      	b.n	8004056 <_printf_float+0xb6>
 800434e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004350:	2a01      	cmp	r2, #1
 8004352:	dc01      	bgt.n	8004358 <_printf_float+0x3b8>
 8004354:	07db      	lsls	r3, r3, #31
 8004356:	d537      	bpl.n	80043c8 <_printf_float+0x428>
 8004358:	2301      	movs	r3, #1
 800435a:	4642      	mov	r2, r8
 800435c:	4631      	mov	r1, r6
 800435e:	4628      	mov	r0, r5
 8004360:	47b8      	blx	r7
 8004362:	3001      	adds	r0, #1
 8004364:	f43f ae77 	beq.w	8004056 <_printf_float+0xb6>
 8004368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800436c:	4631      	mov	r1, r6
 800436e:	4628      	mov	r0, r5
 8004370:	47b8      	blx	r7
 8004372:	3001      	adds	r0, #1
 8004374:	f43f ae6f 	beq.w	8004056 <_printf_float+0xb6>
 8004378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800437c:	2200      	movs	r2, #0
 800437e:	2300      	movs	r3, #0
 8004380:	f7fc fb12 	bl	80009a8 <__aeabi_dcmpeq>
 8004384:	b9d8      	cbnz	r0, 80043be <_printf_float+0x41e>
 8004386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004388:	f108 0201 	add.w	r2, r8, #1
 800438c:	3b01      	subs	r3, #1
 800438e:	4631      	mov	r1, r6
 8004390:	4628      	mov	r0, r5
 8004392:	47b8      	blx	r7
 8004394:	3001      	adds	r0, #1
 8004396:	d10e      	bne.n	80043b6 <_printf_float+0x416>
 8004398:	e65d      	b.n	8004056 <_printf_float+0xb6>
 800439a:	2301      	movs	r3, #1
 800439c:	464a      	mov	r2, r9
 800439e:	4631      	mov	r1, r6
 80043a0:	4628      	mov	r0, r5
 80043a2:	47b8      	blx	r7
 80043a4:	3001      	adds	r0, #1
 80043a6:	f43f ae56 	beq.w	8004056 <_printf_float+0xb6>
 80043aa:	f108 0801 	add.w	r8, r8, #1
 80043ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043b0:	3b01      	subs	r3, #1
 80043b2:	4543      	cmp	r3, r8
 80043b4:	dcf1      	bgt.n	800439a <_printf_float+0x3fa>
 80043b6:	4653      	mov	r3, sl
 80043b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80043bc:	e6e0      	b.n	8004180 <_printf_float+0x1e0>
 80043be:	f04f 0800 	mov.w	r8, #0
 80043c2:	f104 091a 	add.w	r9, r4, #26
 80043c6:	e7f2      	b.n	80043ae <_printf_float+0x40e>
 80043c8:	2301      	movs	r3, #1
 80043ca:	4642      	mov	r2, r8
 80043cc:	e7df      	b.n	800438e <_printf_float+0x3ee>
 80043ce:	2301      	movs	r3, #1
 80043d0:	464a      	mov	r2, r9
 80043d2:	4631      	mov	r1, r6
 80043d4:	4628      	mov	r0, r5
 80043d6:	47b8      	blx	r7
 80043d8:	3001      	adds	r0, #1
 80043da:	f43f ae3c 	beq.w	8004056 <_printf_float+0xb6>
 80043de:	f108 0801 	add.w	r8, r8, #1
 80043e2:	68e3      	ldr	r3, [r4, #12]
 80043e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80043e6:	1a5b      	subs	r3, r3, r1
 80043e8:	4543      	cmp	r3, r8
 80043ea:	dcf0      	bgt.n	80043ce <_printf_float+0x42e>
 80043ec:	e6fd      	b.n	80041ea <_printf_float+0x24a>
 80043ee:	f04f 0800 	mov.w	r8, #0
 80043f2:	f104 0919 	add.w	r9, r4, #25
 80043f6:	e7f4      	b.n	80043e2 <_printf_float+0x442>

080043f8 <_printf_common>:
 80043f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043fc:	4616      	mov	r6, r2
 80043fe:	4699      	mov	r9, r3
 8004400:	688a      	ldr	r2, [r1, #8]
 8004402:	690b      	ldr	r3, [r1, #16]
 8004404:	4607      	mov	r7, r0
 8004406:	4293      	cmp	r3, r2
 8004408:	bfb8      	it	lt
 800440a:	4613      	movlt	r3, r2
 800440c:	6033      	str	r3, [r6, #0]
 800440e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004412:	460c      	mov	r4, r1
 8004414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004418:	b10a      	cbz	r2, 800441e <_printf_common+0x26>
 800441a:	3301      	adds	r3, #1
 800441c:	6033      	str	r3, [r6, #0]
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	0699      	lsls	r1, r3, #26
 8004422:	bf42      	ittt	mi
 8004424:	6833      	ldrmi	r3, [r6, #0]
 8004426:	3302      	addmi	r3, #2
 8004428:	6033      	strmi	r3, [r6, #0]
 800442a:	6825      	ldr	r5, [r4, #0]
 800442c:	f015 0506 	ands.w	r5, r5, #6
 8004430:	d106      	bne.n	8004440 <_printf_common+0x48>
 8004432:	f104 0a19 	add.w	sl, r4, #25
 8004436:	68e3      	ldr	r3, [r4, #12]
 8004438:	6832      	ldr	r2, [r6, #0]
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	42ab      	cmp	r3, r5
 800443e:	dc28      	bgt.n	8004492 <_printf_common+0x9a>
 8004440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004444:	1e13      	subs	r3, r2, #0
 8004446:	6822      	ldr	r2, [r4, #0]
 8004448:	bf18      	it	ne
 800444a:	2301      	movne	r3, #1
 800444c:	0692      	lsls	r2, r2, #26
 800444e:	d42d      	bmi.n	80044ac <_printf_common+0xb4>
 8004450:	4649      	mov	r1, r9
 8004452:	4638      	mov	r0, r7
 8004454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004458:	47c0      	blx	r8
 800445a:	3001      	adds	r0, #1
 800445c:	d020      	beq.n	80044a0 <_printf_common+0xa8>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	68e5      	ldr	r5, [r4, #12]
 8004462:	f003 0306 	and.w	r3, r3, #6
 8004466:	2b04      	cmp	r3, #4
 8004468:	bf18      	it	ne
 800446a:	2500      	movne	r5, #0
 800446c:	6832      	ldr	r2, [r6, #0]
 800446e:	f04f 0600 	mov.w	r6, #0
 8004472:	68a3      	ldr	r3, [r4, #8]
 8004474:	bf08      	it	eq
 8004476:	1aad      	subeq	r5, r5, r2
 8004478:	6922      	ldr	r2, [r4, #16]
 800447a:	bf08      	it	eq
 800447c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004480:	4293      	cmp	r3, r2
 8004482:	bfc4      	itt	gt
 8004484:	1a9b      	subgt	r3, r3, r2
 8004486:	18ed      	addgt	r5, r5, r3
 8004488:	341a      	adds	r4, #26
 800448a:	42b5      	cmp	r5, r6
 800448c:	d11a      	bne.n	80044c4 <_printf_common+0xcc>
 800448e:	2000      	movs	r0, #0
 8004490:	e008      	b.n	80044a4 <_printf_common+0xac>
 8004492:	2301      	movs	r3, #1
 8004494:	4652      	mov	r2, sl
 8004496:	4649      	mov	r1, r9
 8004498:	4638      	mov	r0, r7
 800449a:	47c0      	blx	r8
 800449c:	3001      	adds	r0, #1
 800449e:	d103      	bne.n	80044a8 <_printf_common+0xb0>
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a8:	3501      	adds	r5, #1
 80044aa:	e7c4      	b.n	8004436 <_printf_common+0x3e>
 80044ac:	2030      	movs	r0, #48	; 0x30
 80044ae:	18e1      	adds	r1, r4, r3
 80044b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044ba:	4422      	add	r2, r4
 80044bc:	3302      	adds	r3, #2
 80044be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044c2:	e7c5      	b.n	8004450 <_printf_common+0x58>
 80044c4:	2301      	movs	r3, #1
 80044c6:	4622      	mov	r2, r4
 80044c8:	4649      	mov	r1, r9
 80044ca:	4638      	mov	r0, r7
 80044cc:	47c0      	blx	r8
 80044ce:	3001      	adds	r0, #1
 80044d0:	d0e6      	beq.n	80044a0 <_printf_common+0xa8>
 80044d2:	3601      	adds	r6, #1
 80044d4:	e7d9      	b.n	800448a <_printf_common+0x92>
	...

080044d8 <_printf_i>:
 80044d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044dc:	7e0f      	ldrb	r7, [r1, #24]
 80044de:	4691      	mov	r9, r2
 80044e0:	2f78      	cmp	r7, #120	; 0x78
 80044e2:	4680      	mov	r8, r0
 80044e4:	460c      	mov	r4, r1
 80044e6:	469a      	mov	sl, r3
 80044e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ee:	d807      	bhi.n	8004500 <_printf_i+0x28>
 80044f0:	2f62      	cmp	r7, #98	; 0x62
 80044f2:	d80a      	bhi.n	800450a <_printf_i+0x32>
 80044f4:	2f00      	cmp	r7, #0
 80044f6:	f000 80d9 	beq.w	80046ac <_printf_i+0x1d4>
 80044fa:	2f58      	cmp	r7, #88	; 0x58
 80044fc:	f000 80a4 	beq.w	8004648 <_printf_i+0x170>
 8004500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004508:	e03a      	b.n	8004580 <_printf_i+0xa8>
 800450a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800450e:	2b15      	cmp	r3, #21
 8004510:	d8f6      	bhi.n	8004500 <_printf_i+0x28>
 8004512:	a101      	add	r1, pc, #4	; (adr r1, 8004518 <_printf_i+0x40>)
 8004514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004518:	08004571 	.word	0x08004571
 800451c:	08004585 	.word	0x08004585
 8004520:	08004501 	.word	0x08004501
 8004524:	08004501 	.word	0x08004501
 8004528:	08004501 	.word	0x08004501
 800452c:	08004501 	.word	0x08004501
 8004530:	08004585 	.word	0x08004585
 8004534:	08004501 	.word	0x08004501
 8004538:	08004501 	.word	0x08004501
 800453c:	08004501 	.word	0x08004501
 8004540:	08004501 	.word	0x08004501
 8004544:	08004693 	.word	0x08004693
 8004548:	080045b5 	.word	0x080045b5
 800454c:	08004675 	.word	0x08004675
 8004550:	08004501 	.word	0x08004501
 8004554:	08004501 	.word	0x08004501
 8004558:	080046b5 	.word	0x080046b5
 800455c:	08004501 	.word	0x08004501
 8004560:	080045b5 	.word	0x080045b5
 8004564:	08004501 	.word	0x08004501
 8004568:	08004501 	.word	0x08004501
 800456c:	0800467d 	.word	0x0800467d
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	1d1a      	adds	r2, r3, #4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	602a      	str	r2, [r5, #0]
 8004578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800457c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004580:	2301      	movs	r3, #1
 8004582:	e0a4      	b.n	80046ce <_printf_i+0x1f6>
 8004584:	6820      	ldr	r0, [r4, #0]
 8004586:	6829      	ldr	r1, [r5, #0]
 8004588:	0606      	lsls	r6, r0, #24
 800458a:	f101 0304 	add.w	r3, r1, #4
 800458e:	d50a      	bpl.n	80045a6 <_printf_i+0xce>
 8004590:	680e      	ldr	r6, [r1, #0]
 8004592:	602b      	str	r3, [r5, #0]
 8004594:	2e00      	cmp	r6, #0
 8004596:	da03      	bge.n	80045a0 <_printf_i+0xc8>
 8004598:	232d      	movs	r3, #45	; 0x2d
 800459a:	4276      	negs	r6, r6
 800459c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a0:	230a      	movs	r3, #10
 80045a2:	485e      	ldr	r0, [pc, #376]	; (800471c <_printf_i+0x244>)
 80045a4:	e019      	b.n	80045da <_printf_i+0x102>
 80045a6:	680e      	ldr	r6, [r1, #0]
 80045a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045ac:	602b      	str	r3, [r5, #0]
 80045ae:	bf18      	it	ne
 80045b0:	b236      	sxthne	r6, r6
 80045b2:	e7ef      	b.n	8004594 <_printf_i+0xbc>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	6820      	ldr	r0, [r4, #0]
 80045b8:	1d19      	adds	r1, r3, #4
 80045ba:	6029      	str	r1, [r5, #0]
 80045bc:	0601      	lsls	r1, r0, #24
 80045be:	d501      	bpl.n	80045c4 <_printf_i+0xec>
 80045c0:	681e      	ldr	r6, [r3, #0]
 80045c2:	e002      	b.n	80045ca <_printf_i+0xf2>
 80045c4:	0646      	lsls	r6, r0, #25
 80045c6:	d5fb      	bpl.n	80045c0 <_printf_i+0xe8>
 80045c8:	881e      	ldrh	r6, [r3, #0]
 80045ca:	2f6f      	cmp	r7, #111	; 0x6f
 80045cc:	bf0c      	ite	eq
 80045ce:	2308      	moveq	r3, #8
 80045d0:	230a      	movne	r3, #10
 80045d2:	4852      	ldr	r0, [pc, #328]	; (800471c <_printf_i+0x244>)
 80045d4:	2100      	movs	r1, #0
 80045d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045da:	6865      	ldr	r5, [r4, #4]
 80045dc:	2d00      	cmp	r5, #0
 80045de:	bfa8      	it	ge
 80045e0:	6821      	ldrge	r1, [r4, #0]
 80045e2:	60a5      	str	r5, [r4, #8]
 80045e4:	bfa4      	itt	ge
 80045e6:	f021 0104 	bicge.w	r1, r1, #4
 80045ea:	6021      	strge	r1, [r4, #0]
 80045ec:	b90e      	cbnz	r6, 80045f2 <_printf_i+0x11a>
 80045ee:	2d00      	cmp	r5, #0
 80045f0:	d04d      	beq.n	800468e <_printf_i+0x1b6>
 80045f2:	4615      	mov	r5, r2
 80045f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80045f8:	fb03 6711 	mls	r7, r3, r1, r6
 80045fc:	5dc7      	ldrb	r7, [r0, r7]
 80045fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004602:	4637      	mov	r7, r6
 8004604:	42bb      	cmp	r3, r7
 8004606:	460e      	mov	r6, r1
 8004608:	d9f4      	bls.n	80045f4 <_printf_i+0x11c>
 800460a:	2b08      	cmp	r3, #8
 800460c:	d10b      	bne.n	8004626 <_printf_i+0x14e>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	07de      	lsls	r6, r3, #31
 8004612:	d508      	bpl.n	8004626 <_printf_i+0x14e>
 8004614:	6923      	ldr	r3, [r4, #16]
 8004616:	6861      	ldr	r1, [r4, #4]
 8004618:	4299      	cmp	r1, r3
 800461a:	bfde      	ittt	le
 800461c:	2330      	movle	r3, #48	; 0x30
 800461e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004622:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004626:	1b52      	subs	r2, r2, r5
 8004628:	6122      	str	r2, [r4, #16]
 800462a:	464b      	mov	r3, r9
 800462c:	4621      	mov	r1, r4
 800462e:	4640      	mov	r0, r8
 8004630:	f8cd a000 	str.w	sl, [sp]
 8004634:	aa03      	add	r2, sp, #12
 8004636:	f7ff fedf 	bl	80043f8 <_printf_common>
 800463a:	3001      	adds	r0, #1
 800463c:	d14c      	bne.n	80046d8 <_printf_i+0x200>
 800463e:	f04f 30ff 	mov.w	r0, #4294967295
 8004642:	b004      	add	sp, #16
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	4834      	ldr	r0, [pc, #208]	; (800471c <_printf_i+0x244>)
 800464a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800464e:	6829      	ldr	r1, [r5, #0]
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	f851 6b04 	ldr.w	r6, [r1], #4
 8004656:	6029      	str	r1, [r5, #0]
 8004658:	061d      	lsls	r5, r3, #24
 800465a:	d514      	bpl.n	8004686 <_printf_i+0x1ae>
 800465c:	07df      	lsls	r7, r3, #31
 800465e:	bf44      	itt	mi
 8004660:	f043 0320 	orrmi.w	r3, r3, #32
 8004664:	6023      	strmi	r3, [r4, #0]
 8004666:	b91e      	cbnz	r6, 8004670 <_printf_i+0x198>
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	f023 0320 	bic.w	r3, r3, #32
 800466e:	6023      	str	r3, [r4, #0]
 8004670:	2310      	movs	r3, #16
 8004672:	e7af      	b.n	80045d4 <_printf_i+0xfc>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	f043 0320 	orr.w	r3, r3, #32
 800467a:	6023      	str	r3, [r4, #0]
 800467c:	2378      	movs	r3, #120	; 0x78
 800467e:	4828      	ldr	r0, [pc, #160]	; (8004720 <_printf_i+0x248>)
 8004680:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004684:	e7e3      	b.n	800464e <_printf_i+0x176>
 8004686:	0659      	lsls	r1, r3, #25
 8004688:	bf48      	it	mi
 800468a:	b2b6      	uxthmi	r6, r6
 800468c:	e7e6      	b.n	800465c <_printf_i+0x184>
 800468e:	4615      	mov	r5, r2
 8004690:	e7bb      	b.n	800460a <_printf_i+0x132>
 8004692:	682b      	ldr	r3, [r5, #0]
 8004694:	6826      	ldr	r6, [r4, #0]
 8004696:	1d18      	adds	r0, r3, #4
 8004698:	6961      	ldr	r1, [r4, #20]
 800469a:	6028      	str	r0, [r5, #0]
 800469c:	0635      	lsls	r5, r6, #24
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	d501      	bpl.n	80046a6 <_printf_i+0x1ce>
 80046a2:	6019      	str	r1, [r3, #0]
 80046a4:	e002      	b.n	80046ac <_printf_i+0x1d4>
 80046a6:	0670      	lsls	r0, r6, #25
 80046a8:	d5fb      	bpl.n	80046a2 <_printf_i+0x1ca>
 80046aa:	8019      	strh	r1, [r3, #0]
 80046ac:	2300      	movs	r3, #0
 80046ae:	4615      	mov	r5, r2
 80046b0:	6123      	str	r3, [r4, #16]
 80046b2:	e7ba      	b.n	800462a <_printf_i+0x152>
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	2100      	movs	r1, #0
 80046b8:	1d1a      	adds	r2, r3, #4
 80046ba:	602a      	str	r2, [r5, #0]
 80046bc:	681d      	ldr	r5, [r3, #0]
 80046be:	6862      	ldr	r2, [r4, #4]
 80046c0:	4628      	mov	r0, r5
 80046c2:	f000 fed7 	bl	8005474 <memchr>
 80046c6:	b108      	cbz	r0, 80046cc <_printf_i+0x1f4>
 80046c8:	1b40      	subs	r0, r0, r5
 80046ca:	6060      	str	r0, [r4, #4]
 80046cc:	6863      	ldr	r3, [r4, #4]
 80046ce:	6123      	str	r3, [r4, #16]
 80046d0:	2300      	movs	r3, #0
 80046d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d6:	e7a8      	b.n	800462a <_printf_i+0x152>
 80046d8:	462a      	mov	r2, r5
 80046da:	4649      	mov	r1, r9
 80046dc:	4640      	mov	r0, r8
 80046de:	6923      	ldr	r3, [r4, #16]
 80046e0:	47d0      	blx	sl
 80046e2:	3001      	adds	r0, #1
 80046e4:	d0ab      	beq.n	800463e <_printf_i+0x166>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	079b      	lsls	r3, r3, #30
 80046ea:	d413      	bmi.n	8004714 <_printf_i+0x23c>
 80046ec:	68e0      	ldr	r0, [r4, #12]
 80046ee:	9b03      	ldr	r3, [sp, #12]
 80046f0:	4298      	cmp	r0, r3
 80046f2:	bfb8      	it	lt
 80046f4:	4618      	movlt	r0, r3
 80046f6:	e7a4      	b.n	8004642 <_printf_i+0x16a>
 80046f8:	2301      	movs	r3, #1
 80046fa:	4632      	mov	r2, r6
 80046fc:	4649      	mov	r1, r9
 80046fe:	4640      	mov	r0, r8
 8004700:	47d0      	blx	sl
 8004702:	3001      	adds	r0, #1
 8004704:	d09b      	beq.n	800463e <_printf_i+0x166>
 8004706:	3501      	adds	r5, #1
 8004708:	68e3      	ldr	r3, [r4, #12]
 800470a:	9903      	ldr	r1, [sp, #12]
 800470c:	1a5b      	subs	r3, r3, r1
 800470e:	42ab      	cmp	r3, r5
 8004710:	dcf2      	bgt.n	80046f8 <_printf_i+0x220>
 8004712:	e7eb      	b.n	80046ec <_printf_i+0x214>
 8004714:	2500      	movs	r5, #0
 8004716:	f104 0619 	add.w	r6, r4, #25
 800471a:	e7f5      	b.n	8004708 <_printf_i+0x230>
 800471c:	08006dba 	.word	0x08006dba
 8004720:	08006dcb 	.word	0x08006dcb

08004724 <siprintf>:
 8004724:	b40e      	push	{r1, r2, r3}
 8004726:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800472a:	b500      	push	{lr}
 800472c:	b09c      	sub	sp, #112	; 0x70
 800472e:	ab1d      	add	r3, sp, #116	; 0x74
 8004730:	9002      	str	r0, [sp, #8]
 8004732:	9006      	str	r0, [sp, #24]
 8004734:	9107      	str	r1, [sp, #28]
 8004736:	9104      	str	r1, [sp, #16]
 8004738:	4808      	ldr	r0, [pc, #32]	; (800475c <siprintf+0x38>)
 800473a:	4909      	ldr	r1, [pc, #36]	; (8004760 <siprintf+0x3c>)
 800473c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004740:	9105      	str	r1, [sp, #20]
 8004742:	6800      	ldr	r0, [r0, #0]
 8004744:	a902      	add	r1, sp, #8
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	f001 fb7e 	bl	8005e48 <_svfiprintf_r>
 800474c:	2200      	movs	r2, #0
 800474e:	9b02      	ldr	r3, [sp, #8]
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	b01c      	add	sp, #112	; 0x70
 8004754:	f85d eb04 	ldr.w	lr, [sp], #4
 8004758:	b003      	add	sp, #12
 800475a:	4770      	bx	lr
 800475c:	20000028 	.word	0x20000028
 8004760:	ffff0208 	.word	0xffff0208

08004764 <quorem>:
 8004764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004768:	6903      	ldr	r3, [r0, #16]
 800476a:	690c      	ldr	r4, [r1, #16]
 800476c:	4607      	mov	r7, r0
 800476e:	42a3      	cmp	r3, r4
 8004770:	f2c0 8082 	blt.w	8004878 <quorem+0x114>
 8004774:	3c01      	subs	r4, #1
 8004776:	f100 0514 	add.w	r5, r0, #20
 800477a:	f101 0814 	add.w	r8, r1, #20
 800477e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004788:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800478c:	3301      	adds	r3, #1
 800478e:	429a      	cmp	r2, r3
 8004790:	fbb2 f6f3 	udiv	r6, r2, r3
 8004794:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004798:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800479c:	d331      	bcc.n	8004802 <quorem+0x9e>
 800479e:	f04f 0e00 	mov.w	lr, #0
 80047a2:	4640      	mov	r0, r8
 80047a4:	46ac      	mov	ip, r5
 80047a6:	46f2      	mov	sl, lr
 80047a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80047ac:	b293      	uxth	r3, r2
 80047ae:	fb06 e303 	mla	r3, r6, r3, lr
 80047b2:	0c12      	lsrs	r2, r2, #16
 80047b4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	fb06 e202 	mla	r2, r6, r2, lr
 80047be:	ebaa 0303 	sub.w	r3, sl, r3
 80047c2:	f8dc a000 	ldr.w	sl, [ip]
 80047c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80047ca:	fa1f fa8a 	uxth.w	sl, sl
 80047ce:	4453      	add	r3, sl
 80047d0:	f8dc a000 	ldr.w	sl, [ip]
 80047d4:	b292      	uxth	r2, r2
 80047d6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80047da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047de:	b29b      	uxth	r3, r3
 80047e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047e4:	4581      	cmp	r9, r0
 80047e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80047ea:	f84c 3b04 	str.w	r3, [ip], #4
 80047ee:	d2db      	bcs.n	80047a8 <quorem+0x44>
 80047f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80047f4:	b92b      	cbnz	r3, 8004802 <quorem+0x9e>
 80047f6:	9b01      	ldr	r3, [sp, #4]
 80047f8:	3b04      	subs	r3, #4
 80047fa:	429d      	cmp	r5, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	d32f      	bcc.n	8004860 <quorem+0xfc>
 8004800:	613c      	str	r4, [r7, #16]
 8004802:	4638      	mov	r0, r7
 8004804:	f001 f8d0 	bl	80059a8 <__mcmp>
 8004808:	2800      	cmp	r0, #0
 800480a:	db25      	blt.n	8004858 <quorem+0xf4>
 800480c:	4628      	mov	r0, r5
 800480e:	f04f 0c00 	mov.w	ip, #0
 8004812:	3601      	adds	r6, #1
 8004814:	f858 1b04 	ldr.w	r1, [r8], #4
 8004818:	f8d0 e000 	ldr.w	lr, [r0]
 800481c:	b28b      	uxth	r3, r1
 800481e:	ebac 0303 	sub.w	r3, ip, r3
 8004822:	fa1f f28e 	uxth.w	r2, lr
 8004826:	4413      	add	r3, r2
 8004828:	0c0a      	lsrs	r2, r1, #16
 800482a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800482e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004832:	b29b      	uxth	r3, r3
 8004834:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004838:	45c1      	cmp	r9, r8
 800483a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800483e:	f840 3b04 	str.w	r3, [r0], #4
 8004842:	d2e7      	bcs.n	8004814 <quorem+0xb0>
 8004844:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004848:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800484c:	b922      	cbnz	r2, 8004858 <quorem+0xf4>
 800484e:	3b04      	subs	r3, #4
 8004850:	429d      	cmp	r5, r3
 8004852:	461a      	mov	r2, r3
 8004854:	d30a      	bcc.n	800486c <quorem+0x108>
 8004856:	613c      	str	r4, [r7, #16]
 8004858:	4630      	mov	r0, r6
 800485a:	b003      	add	sp, #12
 800485c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	3b04      	subs	r3, #4
 8004864:	2a00      	cmp	r2, #0
 8004866:	d1cb      	bne.n	8004800 <quorem+0x9c>
 8004868:	3c01      	subs	r4, #1
 800486a:	e7c6      	b.n	80047fa <quorem+0x96>
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	3b04      	subs	r3, #4
 8004870:	2a00      	cmp	r2, #0
 8004872:	d1f0      	bne.n	8004856 <quorem+0xf2>
 8004874:	3c01      	subs	r4, #1
 8004876:	e7eb      	b.n	8004850 <quorem+0xec>
 8004878:	2000      	movs	r0, #0
 800487a:	e7ee      	b.n	800485a <quorem+0xf6>
 800487c:	0000      	movs	r0, r0
	...

08004880 <_dtoa_r>:
 8004880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004884:	4616      	mov	r6, r2
 8004886:	461f      	mov	r7, r3
 8004888:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800488a:	b099      	sub	sp, #100	; 0x64
 800488c:	4605      	mov	r5, r0
 800488e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004892:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004896:	b974      	cbnz	r4, 80048b6 <_dtoa_r+0x36>
 8004898:	2010      	movs	r0, #16
 800489a:	f000 fde3 	bl	8005464 <malloc>
 800489e:	4602      	mov	r2, r0
 80048a0:	6268      	str	r0, [r5, #36]	; 0x24
 80048a2:	b920      	cbnz	r0, 80048ae <_dtoa_r+0x2e>
 80048a4:	21ea      	movs	r1, #234	; 0xea
 80048a6:	4ba8      	ldr	r3, [pc, #672]	; (8004b48 <_dtoa_r+0x2c8>)
 80048a8:	48a8      	ldr	r0, [pc, #672]	; (8004b4c <_dtoa_r+0x2cc>)
 80048aa:	f001 fbdd 	bl	8006068 <__assert_func>
 80048ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80048b2:	6004      	str	r4, [r0, #0]
 80048b4:	60c4      	str	r4, [r0, #12]
 80048b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80048b8:	6819      	ldr	r1, [r3, #0]
 80048ba:	b151      	cbz	r1, 80048d2 <_dtoa_r+0x52>
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	2301      	movs	r3, #1
 80048c0:	4093      	lsls	r3, r2
 80048c2:	604a      	str	r2, [r1, #4]
 80048c4:	608b      	str	r3, [r1, #8]
 80048c6:	4628      	mov	r0, r5
 80048c8:	f000 fe30 	bl	800552c <_Bfree>
 80048cc:	2200      	movs	r2, #0
 80048ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	1e3b      	subs	r3, r7, #0
 80048d4:	bfaf      	iteee	ge
 80048d6:	2300      	movge	r3, #0
 80048d8:	2201      	movlt	r2, #1
 80048da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80048de:	9305      	strlt	r3, [sp, #20]
 80048e0:	bfa8      	it	ge
 80048e2:	f8c8 3000 	strge.w	r3, [r8]
 80048e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80048ea:	4b99      	ldr	r3, [pc, #612]	; (8004b50 <_dtoa_r+0x2d0>)
 80048ec:	bfb8      	it	lt
 80048ee:	f8c8 2000 	strlt.w	r2, [r8]
 80048f2:	ea33 0309 	bics.w	r3, r3, r9
 80048f6:	d119      	bne.n	800492c <_dtoa_r+0xac>
 80048f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80048fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004904:	4333      	orrs	r3, r6
 8004906:	f000 857f 	beq.w	8005408 <_dtoa_r+0xb88>
 800490a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800490c:	b953      	cbnz	r3, 8004924 <_dtoa_r+0xa4>
 800490e:	4b91      	ldr	r3, [pc, #580]	; (8004b54 <_dtoa_r+0x2d4>)
 8004910:	e022      	b.n	8004958 <_dtoa_r+0xd8>
 8004912:	4b91      	ldr	r3, [pc, #580]	; (8004b58 <_dtoa_r+0x2d8>)
 8004914:	9303      	str	r3, [sp, #12]
 8004916:	3308      	adds	r3, #8
 8004918:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	9803      	ldr	r0, [sp, #12]
 800491e:	b019      	add	sp, #100	; 0x64
 8004920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004924:	4b8b      	ldr	r3, [pc, #556]	; (8004b54 <_dtoa_r+0x2d4>)
 8004926:	9303      	str	r3, [sp, #12]
 8004928:	3303      	adds	r3, #3
 800492a:	e7f5      	b.n	8004918 <_dtoa_r+0x98>
 800492c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004930:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004934:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004938:	2200      	movs	r2, #0
 800493a:	2300      	movs	r3, #0
 800493c:	f7fc f834 	bl	80009a8 <__aeabi_dcmpeq>
 8004940:	4680      	mov	r8, r0
 8004942:	b158      	cbz	r0, 800495c <_dtoa_r+0xdc>
 8004944:	2301      	movs	r3, #1
 8004946:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8558 	beq.w	8005402 <_dtoa_r+0xb82>
 8004952:	4882      	ldr	r0, [pc, #520]	; (8004b5c <_dtoa_r+0x2dc>)
 8004954:	6018      	str	r0, [r3, #0]
 8004956:	1e43      	subs	r3, r0, #1
 8004958:	9303      	str	r3, [sp, #12]
 800495a:	e7df      	b.n	800491c <_dtoa_r+0x9c>
 800495c:	ab16      	add	r3, sp, #88	; 0x58
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	ab17      	add	r3, sp, #92	; 0x5c
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	4628      	mov	r0, r5
 8004966:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800496a:	f001 f8c5 	bl	8005af8 <__d2b>
 800496e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004972:	4683      	mov	fp, r0
 8004974:	2c00      	cmp	r4, #0
 8004976:	d07f      	beq.n	8004a78 <_dtoa_r+0x1f8>
 8004978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800497c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800497e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004986:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800498a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800498e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004992:	2200      	movs	r2, #0
 8004994:	4b72      	ldr	r3, [pc, #456]	; (8004b60 <_dtoa_r+0x2e0>)
 8004996:	f7fb fbe7 	bl	8000168 <__aeabi_dsub>
 800499a:	a365      	add	r3, pc, #404	; (adr r3, 8004b30 <_dtoa_r+0x2b0>)
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f7fb fd9a 	bl	80004d8 <__aeabi_dmul>
 80049a4:	a364      	add	r3, pc, #400	; (adr r3, 8004b38 <_dtoa_r+0x2b8>)
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	f7fb fbdf 	bl	800016c <__adddf3>
 80049ae:	4606      	mov	r6, r0
 80049b0:	4620      	mov	r0, r4
 80049b2:	460f      	mov	r7, r1
 80049b4:	f7fb fd26 	bl	8000404 <__aeabi_i2d>
 80049b8:	a361      	add	r3, pc, #388	; (adr r3, 8004b40 <_dtoa_r+0x2c0>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f7fb fd8b 	bl	80004d8 <__aeabi_dmul>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4630      	mov	r0, r6
 80049c8:	4639      	mov	r1, r7
 80049ca:	f7fb fbcf 	bl	800016c <__adddf3>
 80049ce:	4606      	mov	r6, r0
 80049d0:	460f      	mov	r7, r1
 80049d2:	f7fc f831 	bl	8000a38 <__aeabi_d2iz>
 80049d6:	2200      	movs	r2, #0
 80049d8:	4682      	mov	sl, r0
 80049da:	2300      	movs	r3, #0
 80049dc:	4630      	mov	r0, r6
 80049de:	4639      	mov	r1, r7
 80049e0:	f7fb ffec 	bl	80009bc <__aeabi_dcmplt>
 80049e4:	b148      	cbz	r0, 80049fa <_dtoa_r+0x17a>
 80049e6:	4650      	mov	r0, sl
 80049e8:	f7fb fd0c 	bl	8000404 <__aeabi_i2d>
 80049ec:	4632      	mov	r2, r6
 80049ee:	463b      	mov	r3, r7
 80049f0:	f7fb ffda 	bl	80009a8 <__aeabi_dcmpeq>
 80049f4:	b908      	cbnz	r0, 80049fa <_dtoa_r+0x17a>
 80049f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049fa:	f1ba 0f16 	cmp.w	sl, #22
 80049fe:	d858      	bhi.n	8004ab2 <_dtoa_r+0x232>
 8004a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a04:	4b57      	ldr	r3, [pc, #348]	; (8004b64 <_dtoa_r+0x2e4>)
 8004a06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	f7fb ffd5 	bl	80009bc <__aeabi_dcmplt>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d04f      	beq.n	8004ab6 <_dtoa_r+0x236>
 8004a16:	2300      	movs	r3, #0
 8004a18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004a20:	1b1c      	subs	r4, r3, r4
 8004a22:	1e63      	subs	r3, r4, #1
 8004a24:	9309      	str	r3, [sp, #36]	; 0x24
 8004a26:	bf49      	itett	mi
 8004a28:	f1c4 0301 	rsbmi	r3, r4, #1
 8004a2c:	2300      	movpl	r3, #0
 8004a2e:	9306      	strmi	r3, [sp, #24]
 8004a30:	2300      	movmi	r3, #0
 8004a32:	bf54      	ite	pl
 8004a34:	9306      	strpl	r3, [sp, #24]
 8004a36:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004a38:	f1ba 0f00 	cmp.w	sl, #0
 8004a3c:	db3d      	blt.n	8004aba <_dtoa_r+0x23a>
 8004a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a40:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004a44:	4453      	add	r3, sl
 8004a46:	9309      	str	r3, [sp, #36]	; 0x24
 8004a48:	2300      	movs	r3, #0
 8004a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a4e:	2b09      	cmp	r3, #9
 8004a50:	f200 808c 	bhi.w	8004b6c <_dtoa_r+0x2ec>
 8004a54:	2b05      	cmp	r3, #5
 8004a56:	bfc4      	itt	gt
 8004a58:	3b04      	subgt	r3, #4
 8004a5a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004a5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a5e:	bfc8      	it	gt
 8004a60:	2400      	movgt	r4, #0
 8004a62:	f1a3 0302 	sub.w	r3, r3, #2
 8004a66:	bfd8      	it	le
 8004a68:	2401      	movle	r4, #1
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	f200 808a 	bhi.w	8004b84 <_dtoa_r+0x304>
 8004a70:	e8df f003 	tbb	[pc, r3]
 8004a74:	5b4d4f2d 	.word	0x5b4d4f2d
 8004a78:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004a7c:	441c      	add	r4, r3
 8004a7e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	bfc3      	ittte	gt
 8004a86:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a8a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004a8e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004a92:	f1c3 0320 	rsble	r3, r3, #32
 8004a96:	bfc6      	itte	gt
 8004a98:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004a9c:	4318      	orrgt	r0, r3
 8004a9e:	fa06 f003 	lslle.w	r0, r6, r3
 8004aa2:	f7fb fc9f 	bl	80003e4 <__aeabi_ui2d>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004aac:	3c01      	subs	r4, #1
 8004aae:	9313      	str	r3, [sp, #76]	; 0x4c
 8004ab0:	e76f      	b.n	8004992 <_dtoa_r+0x112>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e7b2      	b.n	8004a1c <_dtoa_r+0x19c>
 8004ab6:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ab8:	e7b1      	b.n	8004a1e <_dtoa_r+0x19e>
 8004aba:	9b06      	ldr	r3, [sp, #24]
 8004abc:	eba3 030a 	sub.w	r3, r3, sl
 8004ac0:	9306      	str	r3, [sp, #24]
 8004ac2:	f1ca 0300 	rsb	r3, sl, #0
 8004ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ac8:	2300      	movs	r3, #0
 8004aca:	930e      	str	r3, [sp, #56]	; 0x38
 8004acc:	e7be      	b.n	8004a4c <_dtoa_r+0x1cc>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ad2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	dc58      	bgt.n	8004b8a <_dtoa_r+0x30a>
 8004ad8:	f04f 0901 	mov.w	r9, #1
 8004adc:	464b      	mov	r3, r9
 8004ade:	f8cd 9020 	str.w	r9, [sp, #32]
 8004ae2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004aea:	6042      	str	r2, [r0, #4]
 8004aec:	2204      	movs	r2, #4
 8004aee:	f102 0614 	add.w	r6, r2, #20
 8004af2:	429e      	cmp	r6, r3
 8004af4:	6841      	ldr	r1, [r0, #4]
 8004af6:	d94e      	bls.n	8004b96 <_dtoa_r+0x316>
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 fcd7 	bl	80054ac <_Balloc>
 8004afe:	9003      	str	r0, [sp, #12]
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d14c      	bne.n	8004b9e <_dtoa_r+0x31e>
 8004b04:	4602      	mov	r2, r0
 8004b06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004b0a:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <_dtoa_r+0x2e8>)
 8004b0c:	e6cc      	b.n	80048a8 <_dtoa_r+0x28>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e7de      	b.n	8004ad0 <_dtoa_r+0x250>
 8004b12:	2300      	movs	r3, #0
 8004b14:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b18:	eb0a 0903 	add.w	r9, sl, r3
 8004b1c:	f109 0301 	add.w	r3, r9, #1
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	9308      	str	r3, [sp, #32]
 8004b24:	bfb8      	it	lt
 8004b26:	2301      	movlt	r3, #1
 8004b28:	e7dd      	b.n	8004ae6 <_dtoa_r+0x266>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e7f2      	b.n	8004b14 <_dtoa_r+0x294>
 8004b2e:	bf00      	nop
 8004b30:	636f4361 	.word	0x636f4361
 8004b34:	3fd287a7 	.word	0x3fd287a7
 8004b38:	8b60c8b3 	.word	0x8b60c8b3
 8004b3c:	3fc68a28 	.word	0x3fc68a28
 8004b40:	509f79fb 	.word	0x509f79fb
 8004b44:	3fd34413 	.word	0x3fd34413
 8004b48:	08006de9 	.word	0x08006de9
 8004b4c:	08006e00 	.word	0x08006e00
 8004b50:	7ff00000 	.word	0x7ff00000
 8004b54:	08006de5 	.word	0x08006de5
 8004b58:	08006ddc 	.word	0x08006ddc
 8004b5c:	08006db9 	.word	0x08006db9
 8004b60:	3ff80000 	.word	0x3ff80000
 8004b64:	08006ef0 	.word	0x08006ef0
 8004b68:	08006e5b 	.word	0x08006e5b
 8004b6c:	2401      	movs	r4, #1
 8004b6e:	2300      	movs	r3, #0
 8004b70:	940b      	str	r4, [sp, #44]	; 0x2c
 8004b72:	9322      	str	r3, [sp, #136]	; 0x88
 8004b74:	f04f 39ff 	mov.w	r9, #4294967295
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2312      	movs	r3, #18
 8004b7c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b80:	9223      	str	r2, [sp, #140]	; 0x8c
 8004b82:	e7b0      	b.n	8004ae6 <_dtoa_r+0x266>
 8004b84:	2301      	movs	r3, #1
 8004b86:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b88:	e7f4      	b.n	8004b74 <_dtoa_r+0x2f4>
 8004b8a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004b8e:	464b      	mov	r3, r9
 8004b90:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b94:	e7a7      	b.n	8004ae6 <_dtoa_r+0x266>
 8004b96:	3101      	adds	r1, #1
 8004b98:	6041      	str	r1, [r0, #4]
 8004b9a:	0052      	lsls	r2, r2, #1
 8004b9c:	e7a7      	b.n	8004aee <_dtoa_r+0x26e>
 8004b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ba0:	9a03      	ldr	r2, [sp, #12]
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	9b08      	ldr	r3, [sp, #32]
 8004ba6:	2b0e      	cmp	r3, #14
 8004ba8:	f200 80a8 	bhi.w	8004cfc <_dtoa_r+0x47c>
 8004bac:	2c00      	cmp	r4, #0
 8004bae:	f000 80a5 	beq.w	8004cfc <_dtoa_r+0x47c>
 8004bb2:	f1ba 0f00 	cmp.w	sl, #0
 8004bb6:	dd34      	ble.n	8004c22 <_dtoa_r+0x3a2>
 8004bb8:	4a9a      	ldr	r2, [pc, #616]	; (8004e24 <_dtoa_r+0x5a4>)
 8004bba:	f00a 030f 	and.w	r3, sl, #15
 8004bbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004bc2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004bc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004bce:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004bd2:	d016      	beq.n	8004c02 <_dtoa_r+0x382>
 8004bd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bd8:	4b93      	ldr	r3, [pc, #588]	; (8004e28 <_dtoa_r+0x5a8>)
 8004bda:	2703      	movs	r7, #3
 8004bdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004be0:	f7fb fda4 	bl	800072c <__aeabi_ddiv>
 8004be4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004be8:	f004 040f 	and.w	r4, r4, #15
 8004bec:	4e8e      	ldr	r6, [pc, #568]	; (8004e28 <_dtoa_r+0x5a8>)
 8004bee:	b954      	cbnz	r4, 8004c06 <_dtoa_r+0x386>
 8004bf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bf8:	f7fb fd98 	bl	800072c <__aeabi_ddiv>
 8004bfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c00:	e029      	b.n	8004c56 <_dtoa_r+0x3d6>
 8004c02:	2702      	movs	r7, #2
 8004c04:	e7f2      	b.n	8004bec <_dtoa_r+0x36c>
 8004c06:	07e1      	lsls	r1, r4, #31
 8004c08:	d508      	bpl.n	8004c1c <_dtoa_r+0x39c>
 8004c0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c12:	f7fb fc61 	bl	80004d8 <__aeabi_dmul>
 8004c16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c1a:	3701      	adds	r7, #1
 8004c1c:	1064      	asrs	r4, r4, #1
 8004c1e:	3608      	adds	r6, #8
 8004c20:	e7e5      	b.n	8004bee <_dtoa_r+0x36e>
 8004c22:	f000 80a5 	beq.w	8004d70 <_dtoa_r+0x4f0>
 8004c26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c2a:	f1ca 0400 	rsb	r4, sl, #0
 8004c2e:	4b7d      	ldr	r3, [pc, #500]	; (8004e24 <_dtoa_r+0x5a4>)
 8004c30:	f004 020f 	and.w	r2, r4, #15
 8004c34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f7fb fc4c 	bl	80004d8 <__aeabi_dmul>
 8004c40:	2702      	movs	r7, #2
 8004c42:	2300      	movs	r3, #0
 8004c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c48:	4e77      	ldr	r6, [pc, #476]	; (8004e28 <_dtoa_r+0x5a8>)
 8004c4a:	1124      	asrs	r4, r4, #4
 8004c4c:	2c00      	cmp	r4, #0
 8004c4e:	f040 8084 	bne.w	8004d5a <_dtoa_r+0x4da>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1d2      	bne.n	8004bfc <_dtoa_r+0x37c>
 8004c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 808b 	beq.w	8004d74 <_dtoa_r+0x4f4>
 8004c5e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004c62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004c66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	4b6f      	ldr	r3, [pc, #444]	; (8004e2c <_dtoa_r+0x5ac>)
 8004c6e:	f7fb fea5 	bl	80009bc <__aeabi_dcmplt>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	d07e      	beq.n	8004d74 <_dtoa_r+0x4f4>
 8004c76:	9b08      	ldr	r3, [sp, #32]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d07b      	beq.n	8004d74 <_dtoa_r+0x4f4>
 8004c7c:	f1b9 0f00 	cmp.w	r9, #0
 8004c80:	dd38      	ble.n	8004cf4 <_dtoa_r+0x474>
 8004c82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c86:	2200      	movs	r2, #0
 8004c88:	4b69      	ldr	r3, [pc, #420]	; (8004e30 <_dtoa_r+0x5b0>)
 8004c8a:	f7fb fc25 	bl	80004d8 <__aeabi_dmul>
 8004c8e:	464c      	mov	r4, r9
 8004c90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c94:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004c98:	3701      	adds	r7, #1
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	f7fb fbb2 	bl	8000404 <__aeabi_i2d>
 8004ca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ca4:	f7fb fc18 	bl	80004d8 <__aeabi_dmul>
 8004ca8:	2200      	movs	r2, #0
 8004caa:	4b62      	ldr	r3, [pc, #392]	; (8004e34 <_dtoa_r+0x5b4>)
 8004cac:	f7fb fa5e 	bl	800016c <__adddf3>
 8004cb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004cb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cb8:	9611      	str	r6, [sp, #68]	; 0x44
 8004cba:	2c00      	cmp	r4, #0
 8004cbc:	d15d      	bne.n	8004d7a <_dtoa_r+0x4fa>
 8004cbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	4b5c      	ldr	r3, [pc, #368]	; (8004e38 <_dtoa_r+0x5b8>)
 8004cc6:	f7fb fa4f 	bl	8000168 <__aeabi_dsub>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004cd2:	4633      	mov	r3, r6
 8004cd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cd6:	f7fb fe8f 	bl	80009f8 <__aeabi_dcmpgt>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	f040 829c 	bne.w	8005218 <_dtoa_r+0x998>
 8004ce0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ce4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ce6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004cea:	f7fb fe67 	bl	80009bc <__aeabi_dcmplt>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	f040 8290 	bne.w	8005214 <_dtoa_r+0x994>
 8004cf4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004cf8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004cfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f2c0 8152 	blt.w	8004fa8 <_dtoa_r+0x728>
 8004d04:	f1ba 0f0e 	cmp.w	sl, #14
 8004d08:	f300 814e 	bgt.w	8004fa8 <_dtoa_r+0x728>
 8004d0c:	4b45      	ldr	r3, [pc, #276]	; (8004e24 <_dtoa_r+0x5a4>)
 8004d0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004d12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004d1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f280 80db 	bge.w	8004ed8 <_dtoa_r+0x658>
 8004d22:	9b08      	ldr	r3, [sp, #32]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f300 80d7 	bgt.w	8004ed8 <_dtoa_r+0x658>
 8004d2a:	f040 8272 	bne.w	8005212 <_dtoa_r+0x992>
 8004d2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d32:	2200      	movs	r2, #0
 8004d34:	4b40      	ldr	r3, [pc, #256]	; (8004e38 <_dtoa_r+0x5b8>)
 8004d36:	f7fb fbcf 	bl	80004d8 <__aeabi_dmul>
 8004d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d3e:	f7fb fe51 	bl	80009e4 <__aeabi_dcmpge>
 8004d42:	9c08      	ldr	r4, [sp, #32]
 8004d44:	4626      	mov	r6, r4
 8004d46:	2800      	cmp	r0, #0
 8004d48:	f040 8248 	bne.w	80051dc <_dtoa_r+0x95c>
 8004d4c:	2331      	movs	r3, #49	; 0x31
 8004d4e:	9f03      	ldr	r7, [sp, #12]
 8004d50:	f10a 0a01 	add.w	sl, sl, #1
 8004d54:	f807 3b01 	strb.w	r3, [r7], #1
 8004d58:	e244      	b.n	80051e4 <_dtoa_r+0x964>
 8004d5a:	07e2      	lsls	r2, r4, #31
 8004d5c:	d505      	bpl.n	8004d6a <_dtoa_r+0x4ea>
 8004d5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d62:	f7fb fbb9 	bl	80004d8 <__aeabi_dmul>
 8004d66:	2301      	movs	r3, #1
 8004d68:	3701      	adds	r7, #1
 8004d6a:	1064      	asrs	r4, r4, #1
 8004d6c:	3608      	adds	r6, #8
 8004d6e:	e76d      	b.n	8004c4c <_dtoa_r+0x3cc>
 8004d70:	2702      	movs	r7, #2
 8004d72:	e770      	b.n	8004c56 <_dtoa_r+0x3d6>
 8004d74:	46d0      	mov	r8, sl
 8004d76:	9c08      	ldr	r4, [sp, #32]
 8004d78:	e78f      	b.n	8004c9a <_dtoa_r+0x41a>
 8004d7a:	9903      	ldr	r1, [sp, #12]
 8004d7c:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <_dtoa_r+0x5a4>)
 8004d7e:	4421      	add	r1, r4
 8004d80:	9112      	str	r1, [sp, #72]	; 0x48
 8004d82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004d8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d90:	2900      	cmp	r1, #0
 8004d92:	d055      	beq.n	8004e40 <_dtoa_r+0x5c0>
 8004d94:	2000      	movs	r0, #0
 8004d96:	4929      	ldr	r1, [pc, #164]	; (8004e3c <_dtoa_r+0x5bc>)
 8004d98:	f7fb fcc8 	bl	800072c <__aeabi_ddiv>
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	4632      	mov	r2, r6
 8004da0:	f7fb f9e2 	bl	8000168 <__aeabi_dsub>
 8004da4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004da8:	9f03      	ldr	r7, [sp, #12]
 8004daa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dae:	f7fb fe43 	bl	8000a38 <__aeabi_d2iz>
 8004db2:	4604      	mov	r4, r0
 8004db4:	f7fb fb26 	bl	8000404 <__aeabi_i2d>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dc0:	f7fb f9d2 	bl	8000168 <__aeabi_dsub>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	3430      	adds	r4, #48	; 0x30
 8004dca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004dce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004dd2:	f807 4b01 	strb.w	r4, [r7], #1
 8004dd6:	f7fb fdf1 	bl	80009bc <__aeabi_dcmplt>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	d174      	bne.n	8004ec8 <_dtoa_r+0x648>
 8004dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004de2:	2000      	movs	r0, #0
 8004de4:	4911      	ldr	r1, [pc, #68]	; (8004e2c <_dtoa_r+0x5ac>)
 8004de6:	f7fb f9bf 	bl	8000168 <__aeabi_dsub>
 8004dea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004dee:	f7fb fde5 	bl	80009bc <__aeabi_dcmplt>
 8004df2:	2800      	cmp	r0, #0
 8004df4:	f040 80b7 	bne.w	8004f66 <_dtoa_r+0x6e6>
 8004df8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dfa:	429f      	cmp	r7, r3
 8004dfc:	f43f af7a 	beq.w	8004cf4 <_dtoa_r+0x474>
 8004e00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e04:	2200      	movs	r2, #0
 8004e06:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <_dtoa_r+0x5b0>)
 8004e08:	f7fb fb66 	bl	80004d8 <__aeabi_dmul>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e16:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <_dtoa_r+0x5b0>)
 8004e18:	f7fb fb5e 	bl	80004d8 <__aeabi_dmul>
 8004e1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e20:	e7c3      	b.n	8004daa <_dtoa_r+0x52a>
 8004e22:	bf00      	nop
 8004e24:	08006ef0 	.word	0x08006ef0
 8004e28:	08006ec8 	.word	0x08006ec8
 8004e2c:	3ff00000 	.word	0x3ff00000
 8004e30:	40240000 	.word	0x40240000
 8004e34:	401c0000 	.word	0x401c0000
 8004e38:	40140000 	.word	0x40140000
 8004e3c:	3fe00000 	.word	0x3fe00000
 8004e40:	4630      	mov	r0, r6
 8004e42:	4639      	mov	r1, r7
 8004e44:	f7fb fb48 	bl	80004d8 <__aeabi_dmul>
 8004e48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e4e:	9c03      	ldr	r4, [sp, #12]
 8004e50:	9314      	str	r3, [sp, #80]	; 0x50
 8004e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e56:	f7fb fdef 	bl	8000a38 <__aeabi_d2iz>
 8004e5a:	9015      	str	r0, [sp, #84]	; 0x54
 8004e5c:	f7fb fad2 	bl	8000404 <__aeabi_i2d>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e68:	f7fb f97e 	bl	8000168 <__aeabi_dsub>
 8004e6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e6e:	4606      	mov	r6, r0
 8004e70:	3330      	adds	r3, #48	; 0x30
 8004e72:	f804 3b01 	strb.w	r3, [r4], #1
 8004e76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e78:	460f      	mov	r7, r1
 8004e7a:	429c      	cmp	r4, r3
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	d124      	bne.n	8004ecc <_dtoa_r+0x64c>
 8004e82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e86:	4bb0      	ldr	r3, [pc, #704]	; (8005148 <_dtoa_r+0x8c8>)
 8004e88:	f7fb f970 	bl	800016c <__adddf3>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4630      	mov	r0, r6
 8004e92:	4639      	mov	r1, r7
 8004e94:	f7fb fdb0 	bl	80009f8 <__aeabi_dcmpgt>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d163      	bne.n	8004f64 <_dtoa_r+0x6e4>
 8004e9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	49a9      	ldr	r1, [pc, #676]	; (8005148 <_dtoa_r+0x8c8>)
 8004ea4:	f7fb f960 	bl	8000168 <__aeabi_dsub>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4630      	mov	r0, r6
 8004eae:	4639      	mov	r1, r7
 8004eb0:	f7fb fd84 	bl	80009bc <__aeabi_dcmplt>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	f43f af1d 	beq.w	8004cf4 <_dtoa_r+0x474>
 8004eba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004ebc:	1e7b      	subs	r3, r7, #1
 8004ebe:	9314      	str	r3, [sp, #80]	; 0x50
 8004ec0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004ec4:	2b30      	cmp	r3, #48	; 0x30
 8004ec6:	d0f8      	beq.n	8004eba <_dtoa_r+0x63a>
 8004ec8:	46c2      	mov	sl, r8
 8004eca:	e03b      	b.n	8004f44 <_dtoa_r+0x6c4>
 8004ecc:	4b9f      	ldr	r3, [pc, #636]	; (800514c <_dtoa_r+0x8cc>)
 8004ece:	f7fb fb03 	bl	80004d8 <__aeabi_dmul>
 8004ed2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ed6:	e7bc      	b.n	8004e52 <_dtoa_r+0x5d2>
 8004ed8:	9f03      	ldr	r7, [sp, #12]
 8004eda:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004ede:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	f7fb fc21 	bl	800072c <__aeabi_ddiv>
 8004eea:	f7fb fda5 	bl	8000a38 <__aeabi_d2iz>
 8004eee:	4604      	mov	r4, r0
 8004ef0:	f7fb fa88 	bl	8000404 <__aeabi_i2d>
 8004ef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ef8:	f7fb faee 	bl	80004d8 <__aeabi_dmul>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4640      	mov	r0, r8
 8004f02:	4649      	mov	r1, r9
 8004f04:	f7fb f930 	bl	8000168 <__aeabi_dsub>
 8004f08:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004f0c:	f807 6b01 	strb.w	r6, [r7], #1
 8004f10:	9e03      	ldr	r6, [sp, #12]
 8004f12:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004f16:	1bbe      	subs	r6, r7, r6
 8004f18:	45b4      	cmp	ip, r6
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	d136      	bne.n	8004f8e <_dtoa_r+0x70e>
 8004f20:	f7fb f924 	bl	800016c <__adddf3>
 8004f24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f28:	4680      	mov	r8, r0
 8004f2a:	4689      	mov	r9, r1
 8004f2c:	f7fb fd64 	bl	80009f8 <__aeabi_dcmpgt>
 8004f30:	bb58      	cbnz	r0, 8004f8a <_dtoa_r+0x70a>
 8004f32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f36:	4640      	mov	r0, r8
 8004f38:	4649      	mov	r1, r9
 8004f3a:	f7fb fd35 	bl	80009a8 <__aeabi_dcmpeq>
 8004f3e:	b108      	cbz	r0, 8004f44 <_dtoa_r+0x6c4>
 8004f40:	07e1      	lsls	r1, r4, #31
 8004f42:	d422      	bmi.n	8004f8a <_dtoa_r+0x70a>
 8004f44:	4628      	mov	r0, r5
 8004f46:	4659      	mov	r1, fp
 8004f48:	f000 faf0 	bl	800552c <_Bfree>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	703b      	strb	r3, [r7, #0]
 8004f50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004f52:	f10a 0001 	add.w	r0, sl, #1
 8004f56:	6018      	str	r0, [r3, #0]
 8004f58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f43f acde 	beq.w	800491c <_dtoa_r+0x9c>
 8004f60:	601f      	str	r7, [r3, #0]
 8004f62:	e4db      	b.n	800491c <_dtoa_r+0x9c>
 8004f64:	4627      	mov	r7, r4
 8004f66:	463b      	mov	r3, r7
 8004f68:	461f      	mov	r7, r3
 8004f6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f6e:	2a39      	cmp	r2, #57	; 0x39
 8004f70:	d107      	bne.n	8004f82 <_dtoa_r+0x702>
 8004f72:	9a03      	ldr	r2, [sp, #12]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d1f7      	bne.n	8004f68 <_dtoa_r+0x6e8>
 8004f78:	2230      	movs	r2, #48	; 0x30
 8004f7a:	9903      	ldr	r1, [sp, #12]
 8004f7c:	f108 0801 	add.w	r8, r8, #1
 8004f80:	700a      	strb	r2, [r1, #0]
 8004f82:	781a      	ldrb	r2, [r3, #0]
 8004f84:	3201      	adds	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	e79e      	b.n	8004ec8 <_dtoa_r+0x648>
 8004f8a:	46d0      	mov	r8, sl
 8004f8c:	e7eb      	b.n	8004f66 <_dtoa_r+0x6e6>
 8004f8e:	2200      	movs	r2, #0
 8004f90:	4b6e      	ldr	r3, [pc, #440]	; (800514c <_dtoa_r+0x8cc>)
 8004f92:	f7fb faa1 	bl	80004d8 <__aeabi_dmul>
 8004f96:	2200      	movs	r2, #0
 8004f98:	2300      	movs	r3, #0
 8004f9a:	4680      	mov	r8, r0
 8004f9c:	4689      	mov	r9, r1
 8004f9e:	f7fb fd03 	bl	80009a8 <__aeabi_dcmpeq>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	d09b      	beq.n	8004ede <_dtoa_r+0x65e>
 8004fa6:	e7cd      	b.n	8004f44 <_dtoa_r+0x6c4>
 8004fa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004faa:	2a00      	cmp	r2, #0
 8004fac:	f000 80d0 	beq.w	8005150 <_dtoa_r+0x8d0>
 8004fb0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004fb2:	2a01      	cmp	r2, #1
 8004fb4:	f300 80ae 	bgt.w	8005114 <_dtoa_r+0x894>
 8004fb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004fba:	2a00      	cmp	r2, #0
 8004fbc:	f000 80a6 	beq.w	800510c <_dtoa_r+0x88c>
 8004fc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004fc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004fc6:	9f06      	ldr	r7, [sp, #24]
 8004fc8:	9a06      	ldr	r2, [sp, #24]
 8004fca:	2101      	movs	r1, #1
 8004fcc:	441a      	add	r2, r3
 8004fce:	9206      	str	r2, [sp, #24]
 8004fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	441a      	add	r2, r3
 8004fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8004fd8:	f000 fb5e 	bl	8005698 <__i2b>
 8004fdc:	4606      	mov	r6, r0
 8004fde:	2f00      	cmp	r7, #0
 8004fe0:	dd0c      	ble.n	8004ffc <_dtoa_r+0x77c>
 8004fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	dd09      	ble.n	8004ffc <_dtoa_r+0x77c>
 8004fe8:	42bb      	cmp	r3, r7
 8004fea:	bfa8      	it	ge
 8004fec:	463b      	movge	r3, r7
 8004fee:	9a06      	ldr	r2, [sp, #24]
 8004ff0:	1aff      	subs	r7, r7, r3
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	9206      	str	r2, [sp, #24]
 8004ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8004ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ffe:	b1f3      	cbz	r3, 800503e <_dtoa_r+0x7be>
 8005000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80a8 	beq.w	8005158 <_dtoa_r+0x8d8>
 8005008:	2c00      	cmp	r4, #0
 800500a:	dd10      	ble.n	800502e <_dtoa_r+0x7ae>
 800500c:	4631      	mov	r1, r6
 800500e:	4622      	mov	r2, r4
 8005010:	4628      	mov	r0, r5
 8005012:	f000 fbff 	bl	8005814 <__pow5mult>
 8005016:	465a      	mov	r2, fp
 8005018:	4601      	mov	r1, r0
 800501a:	4606      	mov	r6, r0
 800501c:	4628      	mov	r0, r5
 800501e:	f000 fb51 	bl	80056c4 <__multiply>
 8005022:	4680      	mov	r8, r0
 8005024:	4659      	mov	r1, fp
 8005026:	4628      	mov	r0, r5
 8005028:	f000 fa80 	bl	800552c <_Bfree>
 800502c:	46c3      	mov	fp, r8
 800502e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005030:	1b1a      	subs	r2, r3, r4
 8005032:	d004      	beq.n	800503e <_dtoa_r+0x7be>
 8005034:	4659      	mov	r1, fp
 8005036:	4628      	mov	r0, r5
 8005038:	f000 fbec 	bl	8005814 <__pow5mult>
 800503c:	4683      	mov	fp, r0
 800503e:	2101      	movs	r1, #1
 8005040:	4628      	mov	r0, r5
 8005042:	f000 fb29 	bl	8005698 <__i2b>
 8005046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005048:	4604      	mov	r4, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	f340 8086 	ble.w	800515c <_dtoa_r+0x8dc>
 8005050:	461a      	mov	r2, r3
 8005052:	4601      	mov	r1, r0
 8005054:	4628      	mov	r0, r5
 8005056:	f000 fbdd 	bl	8005814 <__pow5mult>
 800505a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800505c:	4604      	mov	r4, r0
 800505e:	2b01      	cmp	r3, #1
 8005060:	dd7f      	ble.n	8005162 <_dtoa_r+0x8e2>
 8005062:	f04f 0800 	mov.w	r8, #0
 8005066:	6923      	ldr	r3, [r4, #16]
 8005068:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800506c:	6918      	ldr	r0, [r3, #16]
 800506e:	f000 fac5 	bl	80055fc <__hi0bits>
 8005072:	f1c0 0020 	rsb	r0, r0, #32
 8005076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005078:	4418      	add	r0, r3
 800507a:	f010 001f 	ands.w	r0, r0, #31
 800507e:	f000 8092 	beq.w	80051a6 <_dtoa_r+0x926>
 8005082:	f1c0 0320 	rsb	r3, r0, #32
 8005086:	2b04      	cmp	r3, #4
 8005088:	f340 808a 	ble.w	80051a0 <_dtoa_r+0x920>
 800508c:	f1c0 001c 	rsb	r0, r0, #28
 8005090:	9b06      	ldr	r3, [sp, #24]
 8005092:	4407      	add	r7, r0
 8005094:	4403      	add	r3, r0
 8005096:	9306      	str	r3, [sp, #24]
 8005098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509a:	4403      	add	r3, r0
 800509c:	9309      	str	r3, [sp, #36]	; 0x24
 800509e:	9b06      	ldr	r3, [sp, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	dd05      	ble.n	80050b0 <_dtoa_r+0x830>
 80050a4:	4659      	mov	r1, fp
 80050a6:	461a      	mov	r2, r3
 80050a8:	4628      	mov	r0, r5
 80050aa:	f000 fc0d 	bl	80058c8 <__lshift>
 80050ae:	4683      	mov	fp, r0
 80050b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	dd05      	ble.n	80050c2 <_dtoa_r+0x842>
 80050b6:	4621      	mov	r1, r4
 80050b8:	461a      	mov	r2, r3
 80050ba:	4628      	mov	r0, r5
 80050bc:	f000 fc04 	bl	80058c8 <__lshift>
 80050c0:	4604      	mov	r4, r0
 80050c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d070      	beq.n	80051aa <_dtoa_r+0x92a>
 80050c8:	4621      	mov	r1, r4
 80050ca:	4658      	mov	r0, fp
 80050cc:	f000 fc6c 	bl	80059a8 <__mcmp>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	da6a      	bge.n	80051aa <_dtoa_r+0x92a>
 80050d4:	2300      	movs	r3, #0
 80050d6:	4659      	mov	r1, fp
 80050d8:	220a      	movs	r2, #10
 80050da:	4628      	mov	r0, r5
 80050dc:	f000 fa48 	bl	8005570 <__multadd>
 80050e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050e2:	4683      	mov	fp, r0
 80050e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8194 	beq.w	8005416 <_dtoa_r+0xb96>
 80050ee:	4631      	mov	r1, r6
 80050f0:	2300      	movs	r3, #0
 80050f2:	220a      	movs	r2, #10
 80050f4:	4628      	mov	r0, r5
 80050f6:	f000 fa3b 	bl	8005570 <__multadd>
 80050fa:	f1b9 0f00 	cmp.w	r9, #0
 80050fe:	4606      	mov	r6, r0
 8005100:	f300 8093 	bgt.w	800522a <_dtoa_r+0x9aa>
 8005104:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005106:	2b02      	cmp	r3, #2
 8005108:	dc57      	bgt.n	80051ba <_dtoa_r+0x93a>
 800510a:	e08e      	b.n	800522a <_dtoa_r+0x9aa>
 800510c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800510e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005112:	e757      	b.n	8004fc4 <_dtoa_r+0x744>
 8005114:	9b08      	ldr	r3, [sp, #32]
 8005116:	1e5c      	subs	r4, r3, #1
 8005118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800511a:	42a3      	cmp	r3, r4
 800511c:	bfb7      	itett	lt
 800511e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005120:	1b1c      	subge	r4, r3, r4
 8005122:	1ae2      	sublt	r2, r4, r3
 8005124:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005126:	bfbe      	ittt	lt
 8005128:	940a      	strlt	r4, [sp, #40]	; 0x28
 800512a:	189b      	addlt	r3, r3, r2
 800512c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800512e:	9b08      	ldr	r3, [sp, #32]
 8005130:	bfb8      	it	lt
 8005132:	2400      	movlt	r4, #0
 8005134:	2b00      	cmp	r3, #0
 8005136:	bfbb      	ittet	lt
 8005138:	9b06      	ldrlt	r3, [sp, #24]
 800513a:	9a08      	ldrlt	r2, [sp, #32]
 800513c:	9f06      	ldrge	r7, [sp, #24]
 800513e:	1a9f      	sublt	r7, r3, r2
 8005140:	bfac      	ite	ge
 8005142:	9b08      	ldrge	r3, [sp, #32]
 8005144:	2300      	movlt	r3, #0
 8005146:	e73f      	b.n	8004fc8 <_dtoa_r+0x748>
 8005148:	3fe00000 	.word	0x3fe00000
 800514c:	40240000 	.word	0x40240000
 8005150:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005152:	9f06      	ldr	r7, [sp, #24]
 8005154:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005156:	e742      	b.n	8004fde <_dtoa_r+0x75e>
 8005158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800515a:	e76b      	b.n	8005034 <_dtoa_r+0x7b4>
 800515c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800515e:	2b01      	cmp	r3, #1
 8005160:	dc19      	bgt.n	8005196 <_dtoa_r+0x916>
 8005162:	9b04      	ldr	r3, [sp, #16]
 8005164:	b9bb      	cbnz	r3, 8005196 <_dtoa_r+0x916>
 8005166:	9b05      	ldr	r3, [sp, #20]
 8005168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800516c:	b99b      	cbnz	r3, 8005196 <_dtoa_r+0x916>
 800516e:	9b05      	ldr	r3, [sp, #20]
 8005170:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005174:	0d1b      	lsrs	r3, r3, #20
 8005176:	051b      	lsls	r3, r3, #20
 8005178:	b183      	cbz	r3, 800519c <_dtoa_r+0x91c>
 800517a:	f04f 0801 	mov.w	r8, #1
 800517e:	9b06      	ldr	r3, [sp, #24]
 8005180:	3301      	adds	r3, #1
 8005182:	9306      	str	r3, [sp, #24]
 8005184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005186:	3301      	adds	r3, #1
 8005188:	9309      	str	r3, [sp, #36]	; 0x24
 800518a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	f47f af6a 	bne.w	8005066 <_dtoa_r+0x7e6>
 8005192:	2001      	movs	r0, #1
 8005194:	e76f      	b.n	8005076 <_dtoa_r+0x7f6>
 8005196:	f04f 0800 	mov.w	r8, #0
 800519a:	e7f6      	b.n	800518a <_dtoa_r+0x90a>
 800519c:	4698      	mov	r8, r3
 800519e:	e7f4      	b.n	800518a <_dtoa_r+0x90a>
 80051a0:	f43f af7d 	beq.w	800509e <_dtoa_r+0x81e>
 80051a4:	4618      	mov	r0, r3
 80051a6:	301c      	adds	r0, #28
 80051a8:	e772      	b.n	8005090 <_dtoa_r+0x810>
 80051aa:	9b08      	ldr	r3, [sp, #32]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	dc36      	bgt.n	800521e <_dtoa_r+0x99e>
 80051b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	dd33      	ble.n	800521e <_dtoa_r+0x99e>
 80051b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051ba:	f1b9 0f00 	cmp.w	r9, #0
 80051be:	d10d      	bne.n	80051dc <_dtoa_r+0x95c>
 80051c0:	4621      	mov	r1, r4
 80051c2:	464b      	mov	r3, r9
 80051c4:	2205      	movs	r2, #5
 80051c6:	4628      	mov	r0, r5
 80051c8:	f000 f9d2 	bl	8005570 <__multadd>
 80051cc:	4601      	mov	r1, r0
 80051ce:	4604      	mov	r4, r0
 80051d0:	4658      	mov	r0, fp
 80051d2:	f000 fbe9 	bl	80059a8 <__mcmp>
 80051d6:	2800      	cmp	r0, #0
 80051d8:	f73f adb8 	bgt.w	8004d4c <_dtoa_r+0x4cc>
 80051dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051de:	9f03      	ldr	r7, [sp, #12]
 80051e0:	ea6f 0a03 	mvn.w	sl, r3
 80051e4:	f04f 0800 	mov.w	r8, #0
 80051e8:	4621      	mov	r1, r4
 80051ea:	4628      	mov	r0, r5
 80051ec:	f000 f99e 	bl	800552c <_Bfree>
 80051f0:	2e00      	cmp	r6, #0
 80051f2:	f43f aea7 	beq.w	8004f44 <_dtoa_r+0x6c4>
 80051f6:	f1b8 0f00 	cmp.w	r8, #0
 80051fa:	d005      	beq.n	8005208 <_dtoa_r+0x988>
 80051fc:	45b0      	cmp	r8, r6
 80051fe:	d003      	beq.n	8005208 <_dtoa_r+0x988>
 8005200:	4641      	mov	r1, r8
 8005202:	4628      	mov	r0, r5
 8005204:	f000 f992 	bl	800552c <_Bfree>
 8005208:	4631      	mov	r1, r6
 800520a:	4628      	mov	r0, r5
 800520c:	f000 f98e 	bl	800552c <_Bfree>
 8005210:	e698      	b.n	8004f44 <_dtoa_r+0x6c4>
 8005212:	2400      	movs	r4, #0
 8005214:	4626      	mov	r6, r4
 8005216:	e7e1      	b.n	80051dc <_dtoa_r+0x95c>
 8005218:	46c2      	mov	sl, r8
 800521a:	4626      	mov	r6, r4
 800521c:	e596      	b.n	8004d4c <_dtoa_r+0x4cc>
 800521e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005220:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80fd 	beq.w	8005424 <_dtoa_r+0xba4>
 800522a:	2f00      	cmp	r7, #0
 800522c:	dd05      	ble.n	800523a <_dtoa_r+0x9ba>
 800522e:	4631      	mov	r1, r6
 8005230:	463a      	mov	r2, r7
 8005232:	4628      	mov	r0, r5
 8005234:	f000 fb48 	bl	80058c8 <__lshift>
 8005238:	4606      	mov	r6, r0
 800523a:	f1b8 0f00 	cmp.w	r8, #0
 800523e:	d05c      	beq.n	80052fa <_dtoa_r+0xa7a>
 8005240:	4628      	mov	r0, r5
 8005242:	6871      	ldr	r1, [r6, #4]
 8005244:	f000 f932 	bl	80054ac <_Balloc>
 8005248:	4607      	mov	r7, r0
 800524a:	b928      	cbnz	r0, 8005258 <_dtoa_r+0x9d8>
 800524c:	4602      	mov	r2, r0
 800524e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005252:	4b7f      	ldr	r3, [pc, #508]	; (8005450 <_dtoa_r+0xbd0>)
 8005254:	f7ff bb28 	b.w	80048a8 <_dtoa_r+0x28>
 8005258:	6932      	ldr	r2, [r6, #16]
 800525a:	f106 010c 	add.w	r1, r6, #12
 800525e:	3202      	adds	r2, #2
 8005260:	0092      	lsls	r2, r2, #2
 8005262:	300c      	adds	r0, #12
 8005264:	f000 f914 	bl	8005490 <memcpy>
 8005268:	2201      	movs	r2, #1
 800526a:	4639      	mov	r1, r7
 800526c:	4628      	mov	r0, r5
 800526e:	f000 fb2b 	bl	80058c8 <__lshift>
 8005272:	46b0      	mov	r8, r6
 8005274:	4606      	mov	r6, r0
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	3301      	adds	r3, #1
 800527a:	9308      	str	r3, [sp, #32]
 800527c:	9b03      	ldr	r3, [sp, #12]
 800527e:	444b      	add	r3, r9
 8005280:	930a      	str	r3, [sp, #40]	; 0x28
 8005282:	9b04      	ldr	r3, [sp, #16]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	9309      	str	r3, [sp, #36]	; 0x24
 800528a:	9b08      	ldr	r3, [sp, #32]
 800528c:	4621      	mov	r1, r4
 800528e:	3b01      	subs	r3, #1
 8005290:	4658      	mov	r0, fp
 8005292:	9304      	str	r3, [sp, #16]
 8005294:	f7ff fa66 	bl	8004764 <quorem>
 8005298:	4603      	mov	r3, r0
 800529a:	4641      	mov	r1, r8
 800529c:	3330      	adds	r3, #48	; 0x30
 800529e:	9006      	str	r0, [sp, #24]
 80052a0:	4658      	mov	r0, fp
 80052a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80052a4:	f000 fb80 	bl	80059a8 <__mcmp>
 80052a8:	4632      	mov	r2, r6
 80052aa:	4681      	mov	r9, r0
 80052ac:	4621      	mov	r1, r4
 80052ae:	4628      	mov	r0, r5
 80052b0:	f000 fb96 	bl	80059e0 <__mdiff>
 80052b4:	68c2      	ldr	r2, [r0, #12]
 80052b6:	4607      	mov	r7, r0
 80052b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ba:	bb02      	cbnz	r2, 80052fe <_dtoa_r+0xa7e>
 80052bc:	4601      	mov	r1, r0
 80052be:	4658      	mov	r0, fp
 80052c0:	f000 fb72 	bl	80059a8 <__mcmp>
 80052c4:	4602      	mov	r2, r0
 80052c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052c8:	4639      	mov	r1, r7
 80052ca:	4628      	mov	r0, r5
 80052cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80052d0:	f000 f92c 	bl	800552c <_Bfree>
 80052d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052d8:	9f08      	ldr	r7, [sp, #32]
 80052da:	ea43 0102 	orr.w	r1, r3, r2
 80052de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e0:	430b      	orrs	r3, r1
 80052e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052e4:	d10d      	bne.n	8005302 <_dtoa_r+0xa82>
 80052e6:	2b39      	cmp	r3, #57	; 0x39
 80052e8:	d029      	beq.n	800533e <_dtoa_r+0xabe>
 80052ea:	f1b9 0f00 	cmp.w	r9, #0
 80052ee:	dd01      	ble.n	80052f4 <_dtoa_r+0xa74>
 80052f0:	9b06      	ldr	r3, [sp, #24]
 80052f2:	3331      	adds	r3, #49	; 0x31
 80052f4:	9a04      	ldr	r2, [sp, #16]
 80052f6:	7013      	strb	r3, [r2, #0]
 80052f8:	e776      	b.n	80051e8 <_dtoa_r+0x968>
 80052fa:	4630      	mov	r0, r6
 80052fc:	e7b9      	b.n	8005272 <_dtoa_r+0x9f2>
 80052fe:	2201      	movs	r2, #1
 8005300:	e7e2      	b.n	80052c8 <_dtoa_r+0xa48>
 8005302:	f1b9 0f00 	cmp.w	r9, #0
 8005306:	db06      	blt.n	8005316 <_dtoa_r+0xa96>
 8005308:	9922      	ldr	r1, [sp, #136]	; 0x88
 800530a:	ea41 0909 	orr.w	r9, r1, r9
 800530e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005310:	ea59 0101 	orrs.w	r1, r9, r1
 8005314:	d120      	bne.n	8005358 <_dtoa_r+0xad8>
 8005316:	2a00      	cmp	r2, #0
 8005318:	ddec      	ble.n	80052f4 <_dtoa_r+0xa74>
 800531a:	4659      	mov	r1, fp
 800531c:	2201      	movs	r2, #1
 800531e:	4628      	mov	r0, r5
 8005320:	9308      	str	r3, [sp, #32]
 8005322:	f000 fad1 	bl	80058c8 <__lshift>
 8005326:	4621      	mov	r1, r4
 8005328:	4683      	mov	fp, r0
 800532a:	f000 fb3d 	bl	80059a8 <__mcmp>
 800532e:	2800      	cmp	r0, #0
 8005330:	9b08      	ldr	r3, [sp, #32]
 8005332:	dc02      	bgt.n	800533a <_dtoa_r+0xaba>
 8005334:	d1de      	bne.n	80052f4 <_dtoa_r+0xa74>
 8005336:	07da      	lsls	r2, r3, #31
 8005338:	d5dc      	bpl.n	80052f4 <_dtoa_r+0xa74>
 800533a:	2b39      	cmp	r3, #57	; 0x39
 800533c:	d1d8      	bne.n	80052f0 <_dtoa_r+0xa70>
 800533e:	2339      	movs	r3, #57	; 0x39
 8005340:	9a04      	ldr	r2, [sp, #16]
 8005342:	7013      	strb	r3, [r2, #0]
 8005344:	463b      	mov	r3, r7
 8005346:	461f      	mov	r7, r3
 8005348:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800534c:	3b01      	subs	r3, #1
 800534e:	2a39      	cmp	r2, #57	; 0x39
 8005350:	d050      	beq.n	80053f4 <_dtoa_r+0xb74>
 8005352:	3201      	adds	r2, #1
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	e747      	b.n	80051e8 <_dtoa_r+0x968>
 8005358:	2a00      	cmp	r2, #0
 800535a:	dd03      	ble.n	8005364 <_dtoa_r+0xae4>
 800535c:	2b39      	cmp	r3, #57	; 0x39
 800535e:	d0ee      	beq.n	800533e <_dtoa_r+0xabe>
 8005360:	3301      	adds	r3, #1
 8005362:	e7c7      	b.n	80052f4 <_dtoa_r+0xa74>
 8005364:	9a08      	ldr	r2, [sp, #32]
 8005366:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005368:	f802 3c01 	strb.w	r3, [r2, #-1]
 800536c:	428a      	cmp	r2, r1
 800536e:	d02a      	beq.n	80053c6 <_dtoa_r+0xb46>
 8005370:	4659      	mov	r1, fp
 8005372:	2300      	movs	r3, #0
 8005374:	220a      	movs	r2, #10
 8005376:	4628      	mov	r0, r5
 8005378:	f000 f8fa 	bl	8005570 <__multadd>
 800537c:	45b0      	cmp	r8, r6
 800537e:	4683      	mov	fp, r0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	f04f 020a 	mov.w	r2, #10
 8005388:	4641      	mov	r1, r8
 800538a:	4628      	mov	r0, r5
 800538c:	d107      	bne.n	800539e <_dtoa_r+0xb1e>
 800538e:	f000 f8ef 	bl	8005570 <__multadd>
 8005392:	4680      	mov	r8, r0
 8005394:	4606      	mov	r6, r0
 8005396:	9b08      	ldr	r3, [sp, #32]
 8005398:	3301      	adds	r3, #1
 800539a:	9308      	str	r3, [sp, #32]
 800539c:	e775      	b.n	800528a <_dtoa_r+0xa0a>
 800539e:	f000 f8e7 	bl	8005570 <__multadd>
 80053a2:	4631      	mov	r1, r6
 80053a4:	4680      	mov	r8, r0
 80053a6:	2300      	movs	r3, #0
 80053a8:	220a      	movs	r2, #10
 80053aa:	4628      	mov	r0, r5
 80053ac:	f000 f8e0 	bl	8005570 <__multadd>
 80053b0:	4606      	mov	r6, r0
 80053b2:	e7f0      	b.n	8005396 <_dtoa_r+0xb16>
 80053b4:	f1b9 0f00 	cmp.w	r9, #0
 80053b8:	bfcc      	ite	gt
 80053ba:	464f      	movgt	r7, r9
 80053bc:	2701      	movle	r7, #1
 80053be:	f04f 0800 	mov.w	r8, #0
 80053c2:	9a03      	ldr	r2, [sp, #12]
 80053c4:	4417      	add	r7, r2
 80053c6:	4659      	mov	r1, fp
 80053c8:	2201      	movs	r2, #1
 80053ca:	4628      	mov	r0, r5
 80053cc:	9308      	str	r3, [sp, #32]
 80053ce:	f000 fa7b 	bl	80058c8 <__lshift>
 80053d2:	4621      	mov	r1, r4
 80053d4:	4683      	mov	fp, r0
 80053d6:	f000 fae7 	bl	80059a8 <__mcmp>
 80053da:	2800      	cmp	r0, #0
 80053dc:	dcb2      	bgt.n	8005344 <_dtoa_r+0xac4>
 80053de:	d102      	bne.n	80053e6 <_dtoa_r+0xb66>
 80053e0:	9b08      	ldr	r3, [sp, #32]
 80053e2:	07db      	lsls	r3, r3, #31
 80053e4:	d4ae      	bmi.n	8005344 <_dtoa_r+0xac4>
 80053e6:	463b      	mov	r3, r7
 80053e8:	461f      	mov	r7, r3
 80053ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053ee:	2a30      	cmp	r2, #48	; 0x30
 80053f0:	d0fa      	beq.n	80053e8 <_dtoa_r+0xb68>
 80053f2:	e6f9      	b.n	80051e8 <_dtoa_r+0x968>
 80053f4:	9a03      	ldr	r2, [sp, #12]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d1a5      	bne.n	8005346 <_dtoa_r+0xac6>
 80053fa:	2331      	movs	r3, #49	; 0x31
 80053fc:	f10a 0a01 	add.w	sl, sl, #1
 8005400:	e779      	b.n	80052f6 <_dtoa_r+0xa76>
 8005402:	4b14      	ldr	r3, [pc, #80]	; (8005454 <_dtoa_r+0xbd4>)
 8005404:	f7ff baa8 	b.w	8004958 <_dtoa_r+0xd8>
 8005408:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800540a:	2b00      	cmp	r3, #0
 800540c:	f47f aa81 	bne.w	8004912 <_dtoa_r+0x92>
 8005410:	4b11      	ldr	r3, [pc, #68]	; (8005458 <_dtoa_r+0xbd8>)
 8005412:	f7ff baa1 	b.w	8004958 <_dtoa_r+0xd8>
 8005416:	f1b9 0f00 	cmp.w	r9, #0
 800541a:	dc03      	bgt.n	8005424 <_dtoa_r+0xba4>
 800541c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800541e:	2b02      	cmp	r3, #2
 8005420:	f73f aecb 	bgt.w	80051ba <_dtoa_r+0x93a>
 8005424:	9f03      	ldr	r7, [sp, #12]
 8005426:	4621      	mov	r1, r4
 8005428:	4658      	mov	r0, fp
 800542a:	f7ff f99b 	bl	8004764 <quorem>
 800542e:	9a03      	ldr	r2, [sp, #12]
 8005430:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005434:	f807 3b01 	strb.w	r3, [r7], #1
 8005438:	1aba      	subs	r2, r7, r2
 800543a:	4591      	cmp	r9, r2
 800543c:	ddba      	ble.n	80053b4 <_dtoa_r+0xb34>
 800543e:	4659      	mov	r1, fp
 8005440:	2300      	movs	r3, #0
 8005442:	220a      	movs	r2, #10
 8005444:	4628      	mov	r0, r5
 8005446:	f000 f893 	bl	8005570 <__multadd>
 800544a:	4683      	mov	fp, r0
 800544c:	e7eb      	b.n	8005426 <_dtoa_r+0xba6>
 800544e:	bf00      	nop
 8005450:	08006e5b 	.word	0x08006e5b
 8005454:	08006db8 	.word	0x08006db8
 8005458:	08006ddc 	.word	0x08006ddc

0800545c <_localeconv_r>:
 800545c:	4800      	ldr	r0, [pc, #0]	; (8005460 <_localeconv_r+0x4>)
 800545e:	4770      	bx	lr
 8005460:	2000017c 	.word	0x2000017c

08005464 <malloc>:
 8005464:	4b02      	ldr	r3, [pc, #8]	; (8005470 <malloc+0xc>)
 8005466:	4601      	mov	r1, r0
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	f000 bc1d 	b.w	8005ca8 <_malloc_r>
 800546e:	bf00      	nop
 8005470:	20000028 	.word	0x20000028

08005474 <memchr>:
 8005474:	4603      	mov	r3, r0
 8005476:	b510      	push	{r4, lr}
 8005478:	b2c9      	uxtb	r1, r1
 800547a:	4402      	add	r2, r0
 800547c:	4293      	cmp	r3, r2
 800547e:	4618      	mov	r0, r3
 8005480:	d101      	bne.n	8005486 <memchr+0x12>
 8005482:	2000      	movs	r0, #0
 8005484:	e003      	b.n	800548e <memchr+0x1a>
 8005486:	7804      	ldrb	r4, [r0, #0]
 8005488:	3301      	adds	r3, #1
 800548a:	428c      	cmp	r4, r1
 800548c:	d1f6      	bne.n	800547c <memchr+0x8>
 800548e:	bd10      	pop	{r4, pc}

08005490 <memcpy>:
 8005490:	440a      	add	r2, r1
 8005492:	4291      	cmp	r1, r2
 8005494:	f100 33ff 	add.w	r3, r0, #4294967295
 8005498:	d100      	bne.n	800549c <memcpy+0xc>
 800549a:	4770      	bx	lr
 800549c:	b510      	push	{r4, lr}
 800549e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a2:	4291      	cmp	r1, r2
 80054a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054a8:	d1f9      	bne.n	800549e <memcpy+0xe>
 80054aa:	bd10      	pop	{r4, pc}

080054ac <_Balloc>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054b0:	4604      	mov	r4, r0
 80054b2:	460d      	mov	r5, r1
 80054b4:	b976      	cbnz	r6, 80054d4 <_Balloc+0x28>
 80054b6:	2010      	movs	r0, #16
 80054b8:	f7ff ffd4 	bl	8005464 <malloc>
 80054bc:	4602      	mov	r2, r0
 80054be:	6260      	str	r0, [r4, #36]	; 0x24
 80054c0:	b920      	cbnz	r0, 80054cc <_Balloc+0x20>
 80054c2:	2166      	movs	r1, #102	; 0x66
 80054c4:	4b17      	ldr	r3, [pc, #92]	; (8005524 <_Balloc+0x78>)
 80054c6:	4818      	ldr	r0, [pc, #96]	; (8005528 <_Balloc+0x7c>)
 80054c8:	f000 fdce 	bl	8006068 <__assert_func>
 80054cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054d0:	6006      	str	r6, [r0, #0]
 80054d2:	60c6      	str	r6, [r0, #12]
 80054d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054d6:	68f3      	ldr	r3, [r6, #12]
 80054d8:	b183      	cbz	r3, 80054fc <_Balloc+0x50>
 80054da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80054e2:	b9b8      	cbnz	r0, 8005514 <_Balloc+0x68>
 80054e4:	2101      	movs	r1, #1
 80054e6:	fa01 f605 	lsl.w	r6, r1, r5
 80054ea:	1d72      	adds	r2, r6, #5
 80054ec:	4620      	mov	r0, r4
 80054ee:	0092      	lsls	r2, r2, #2
 80054f0:	f000 fb5e 	bl	8005bb0 <_calloc_r>
 80054f4:	b160      	cbz	r0, 8005510 <_Balloc+0x64>
 80054f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054fa:	e00e      	b.n	800551a <_Balloc+0x6e>
 80054fc:	2221      	movs	r2, #33	; 0x21
 80054fe:	2104      	movs	r1, #4
 8005500:	4620      	mov	r0, r4
 8005502:	f000 fb55 	bl	8005bb0 <_calloc_r>
 8005506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005508:	60f0      	str	r0, [r6, #12]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e4      	bne.n	80054da <_Balloc+0x2e>
 8005510:	2000      	movs	r0, #0
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	6802      	ldr	r2, [r0, #0]
 8005516:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800551a:	2300      	movs	r3, #0
 800551c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005520:	e7f7      	b.n	8005512 <_Balloc+0x66>
 8005522:	bf00      	nop
 8005524:	08006de9 	.word	0x08006de9
 8005528:	08006e6c 	.word	0x08006e6c

0800552c <_Bfree>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005530:	4605      	mov	r5, r0
 8005532:	460c      	mov	r4, r1
 8005534:	b976      	cbnz	r6, 8005554 <_Bfree+0x28>
 8005536:	2010      	movs	r0, #16
 8005538:	f7ff ff94 	bl	8005464 <malloc>
 800553c:	4602      	mov	r2, r0
 800553e:	6268      	str	r0, [r5, #36]	; 0x24
 8005540:	b920      	cbnz	r0, 800554c <_Bfree+0x20>
 8005542:	218a      	movs	r1, #138	; 0x8a
 8005544:	4b08      	ldr	r3, [pc, #32]	; (8005568 <_Bfree+0x3c>)
 8005546:	4809      	ldr	r0, [pc, #36]	; (800556c <_Bfree+0x40>)
 8005548:	f000 fd8e 	bl	8006068 <__assert_func>
 800554c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005550:	6006      	str	r6, [r0, #0]
 8005552:	60c6      	str	r6, [r0, #12]
 8005554:	b13c      	cbz	r4, 8005566 <_Bfree+0x3a>
 8005556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005558:	6862      	ldr	r2, [r4, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005560:	6021      	str	r1, [r4, #0]
 8005562:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005566:	bd70      	pop	{r4, r5, r6, pc}
 8005568:	08006de9 	.word	0x08006de9
 800556c:	08006e6c 	.word	0x08006e6c

08005570 <__multadd>:
 8005570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005574:	4607      	mov	r7, r0
 8005576:	460c      	mov	r4, r1
 8005578:	461e      	mov	r6, r3
 800557a:	2000      	movs	r0, #0
 800557c:	690d      	ldr	r5, [r1, #16]
 800557e:	f101 0c14 	add.w	ip, r1, #20
 8005582:	f8dc 3000 	ldr.w	r3, [ip]
 8005586:	3001      	adds	r0, #1
 8005588:	b299      	uxth	r1, r3
 800558a:	fb02 6101 	mla	r1, r2, r1, r6
 800558e:	0c1e      	lsrs	r6, r3, #16
 8005590:	0c0b      	lsrs	r3, r1, #16
 8005592:	fb02 3306 	mla	r3, r2, r6, r3
 8005596:	b289      	uxth	r1, r1
 8005598:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800559c:	4285      	cmp	r5, r0
 800559e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80055a2:	f84c 1b04 	str.w	r1, [ip], #4
 80055a6:	dcec      	bgt.n	8005582 <__multadd+0x12>
 80055a8:	b30e      	cbz	r6, 80055ee <__multadd+0x7e>
 80055aa:	68a3      	ldr	r3, [r4, #8]
 80055ac:	42ab      	cmp	r3, r5
 80055ae:	dc19      	bgt.n	80055e4 <__multadd+0x74>
 80055b0:	6861      	ldr	r1, [r4, #4]
 80055b2:	4638      	mov	r0, r7
 80055b4:	3101      	adds	r1, #1
 80055b6:	f7ff ff79 	bl	80054ac <_Balloc>
 80055ba:	4680      	mov	r8, r0
 80055bc:	b928      	cbnz	r0, 80055ca <__multadd+0x5a>
 80055be:	4602      	mov	r2, r0
 80055c0:	21b5      	movs	r1, #181	; 0xb5
 80055c2:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <__multadd+0x84>)
 80055c4:	480c      	ldr	r0, [pc, #48]	; (80055f8 <__multadd+0x88>)
 80055c6:	f000 fd4f 	bl	8006068 <__assert_func>
 80055ca:	6922      	ldr	r2, [r4, #16]
 80055cc:	f104 010c 	add.w	r1, r4, #12
 80055d0:	3202      	adds	r2, #2
 80055d2:	0092      	lsls	r2, r2, #2
 80055d4:	300c      	adds	r0, #12
 80055d6:	f7ff ff5b 	bl	8005490 <memcpy>
 80055da:	4621      	mov	r1, r4
 80055dc:	4638      	mov	r0, r7
 80055de:	f7ff ffa5 	bl	800552c <_Bfree>
 80055e2:	4644      	mov	r4, r8
 80055e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055e8:	3501      	adds	r5, #1
 80055ea:	615e      	str	r6, [r3, #20]
 80055ec:	6125      	str	r5, [r4, #16]
 80055ee:	4620      	mov	r0, r4
 80055f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f4:	08006e5b 	.word	0x08006e5b
 80055f8:	08006e6c 	.word	0x08006e6c

080055fc <__hi0bits>:
 80055fc:	0c02      	lsrs	r2, r0, #16
 80055fe:	0412      	lsls	r2, r2, #16
 8005600:	4603      	mov	r3, r0
 8005602:	b9ca      	cbnz	r2, 8005638 <__hi0bits+0x3c>
 8005604:	0403      	lsls	r3, r0, #16
 8005606:	2010      	movs	r0, #16
 8005608:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800560c:	bf04      	itt	eq
 800560e:	021b      	lsleq	r3, r3, #8
 8005610:	3008      	addeq	r0, #8
 8005612:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005616:	bf04      	itt	eq
 8005618:	011b      	lsleq	r3, r3, #4
 800561a:	3004      	addeq	r0, #4
 800561c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005620:	bf04      	itt	eq
 8005622:	009b      	lsleq	r3, r3, #2
 8005624:	3002      	addeq	r0, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	db05      	blt.n	8005636 <__hi0bits+0x3a>
 800562a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800562e:	f100 0001 	add.w	r0, r0, #1
 8005632:	bf08      	it	eq
 8005634:	2020      	moveq	r0, #32
 8005636:	4770      	bx	lr
 8005638:	2000      	movs	r0, #0
 800563a:	e7e5      	b.n	8005608 <__hi0bits+0xc>

0800563c <__lo0bits>:
 800563c:	6803      	ldr	r3, [r0, #0]
 800563e:	4602      	mov	r2, r0
 8005640:	f013 0007 	ands.w	r0, r3, #7
 8005644:	d00b      	beq.n	800565e <__lo0bits+0x22>
 8005646:	07d9      	lsls	r1, r3, #31
 8005648:	d421      	bmi.n	800568e <__lo0bits+0x52>
 800564a:	0798      	lsls	r0, r3, #30
 800564c:	bf49      	itett	mi
 800564e:	085b      	lsrmi	r3, r3, #1
 8005650:	089b      	lsrpl	r3, r3, #2
 8005652:	2001      	movmi	r0, #1
 8005654:	6013      	strmi	r3, [r2, #0]
 8005656:	bf5c      	itt	pl
 8005658:	2002      	movpl	r0, #2
 800565a:	6013      	strpl	r3, [r2, #0]
 800565c:	4770      	bx	lr
 800565e:	b299      	uxth	r1, r3
 8005660:	b909      	cbnz	r1, 8005666 <__lo0bits+0x2a>
 8005662:	2010      	movs	r0, #16
 8005664:	0c1b      	lsrs	r3, r3, #16
 8005666:	b2d9      	uxtb	r1, r3
 8005668:	b909      	cbnz	r1, 800566e <__lo0bits+0x32>
 800566a:	3008      	adds	r0, #8
 800566c:	0a1b      	lsrs	r3, r3, #8
 800566e:	0719      	lsls	r1, r3, #28
 8005670:	bf04      	itt	eq
 8005672:	091b      	lsreq	r3, r3, #4
 8005674:	3004      	addeq	r0, #4
 8005676:	0799      	lsls	r1, r3, #30
 8005678:	bf04      	itt	eq
 800567a:	089b      	lsreq	r3, r3, #2
 800567c:	3002      	addeq	r0, #2
 800567e:	07d9      	lsls	r1, r3, #31
 8005680:	d403      	bmi.n	800568a <__lo0bits+0x4e>
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	f100 0001 	add.w	r0, r0, #1
 8005688:	d003      	beq.n	8005692 <__lo0bits+0x56>
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	4770      	bx	lr
 800568e:	2000      	movs	r0, #0
 8005690:	4770      	bx	lr
 8005692:	2020      	movs	r0, #32
 8005694:	4770      	bx	lr
	...

08005698 <__i2b>:
 8005698:	b510      	push	{r4, lr}
 800569a:	460c      	mov	r4, r1
 800569c:	2101      	movs	r1, #1
 800569e:	f7ff ff05 	bl	80054ac <_Balloc>
 80056a2:	4602      	mov	r2, r0
 80056a4:	b928      	cbnz	r0, 80056b2 <__i2b+0x1a>
 80056a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80056aa:	4b04      	ldr	r3, [pc, #16]	; (80056bc <__i2b+0x24>)
 80056ac:	4804      	ldr	r0, [pc, #16]	; (80056c0 <__i2b+0x28>)
 80056ae:	f000 fcdb 	bl	8006068 <__assert_func>
 80056b2:	2301      	movs	r3, #1
 80056b4:	6144      	str	r4, [r0, #20]
 80056b6:	6103      	str	r3, [r0, #16]
 80056b8:	bd10      	pop	{r4, pc}
 80056ba:	bf00      	nop
 80056bc:	08006e5b 	.word	0x08006e5b
 80056c0:	08006e6c 	.word	0x08006e6c

080056c4 <__multiply>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	4691      	mov	r9, r2
 80056ca:	690a      	ldr	r2, [r1, #16]
 80056cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80056d0:	460c      	mov	r4, r1
 80056d2:	429a      	cmp	r2, r3
 80056d4:	bfbe      	ittt	lt
 80056d6:	460b      	movlt	r3, r1
 80056d8:	464c      	movlt	r4, r9
 80056da:	4699      	movlt	r9, r3
 80056dc:	6927      	ldr	r7, [r4, #16]
 80056de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80056e2:	68a3      	ldr	r3, [r4, #8]
 80056e4:	6861      	ldr	r1, [r4, #4]
 80056e6:	eb07 060a 	add.w	r6, r7, sl
 80056ea:	42b3      	cmp	r3, r6
 80056ec:	b085      	sub	sp, #20
 80056ee:	bfb8      	it	lt
 80056f0:	3101      	addlt	r1, #1
 80056f2:	f7ff fedb 	bl	80054ac <_Balloc>
 80056f6:	b930      	cbnz	r0, 8005706 <__multiply+0x42>
 80056f8:	4602      	mov	r2, r0
 80056fa:	f240 115d 	movw	r1, #349	; 0x15d
 80056fe:	4b43      	ldr	r3, [pc, #268]	; (800580c <__multiply+0x148>)
 8005700:	4843      	ldr	r0, [pc, #268]	; (8005810 <__multiply+0x14c>)
 8005702:	f000 fcb1 	bl	8006068 <__assert_func>
 8005706:	f100 0514 	add.w	r5, r0, #20
 800570a:	462b      	mov	r3, r5
 800570c:	2200      	movs	r2, #0
 800570e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005712:	4543      	cmp	r3, r8
 8005714:	d321      	bcc.n	800575a <__multiply+0x96>
 8005716:	f104 0314 	add.w	r3, r4, #20
 800571a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800571e:	f109 0314 	add.w	r3, r9, #20
 8005722:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005726:	9202      	str	r2, [sp, #8]
 8005728:	1b3a      	subs	r2, r7, r4
 800572a:	3a15      	subs	r2, #21
 800572c:	f022 0203 	bic.w	r2, r2, #3
 8005730:	3204      	adds	r2, #4
 8005732:	f104 0115 	add.w	r1, r4, #21
 8005736:	428f      	cmp	r7, r1
 8005738:	bf38      	it	cc
 800573a:	2204      	movcc	r2, #4
 800573c:	9201      	str	r2, [sp, #4]
 800573e:	9a02      	ldr	r2, [sp, #8]
 8005740:	9303      	str	r3, [sp, #12]
 8005742:	429a      	cmp	r2, r3
 8005744:	d80c      	bhi.n	8005760 <__multiply+0x9c>
 8005746:	2e00      	cmp	r6, #0
 8005748:	dd03      	ble.n	8005752 <__multiply+0x8e>
 800574a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800574e:	2b00      	cmp	r3, #0
 8005750:	d059      	beq.n	8005806 <__multiply+0x142>
 8005752:	6106      	str	r6, [r0, #16]
 8005754:	b005      	add	sp, #20
 8005756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575a:	f843 2b04 	str.w	r2, [r3], #4
 800575e:	e7d8      	b.n	8005712 <__multiply+0x4e>
 8005760:	f8b3 a000 	ldrh.w	sl, [r3]
 8005764:	f1ba 0f00 	cmp.w	sl, #0
 8005768:	d023      	beq.n	80057b2 <__multiply+0xee>
 800576a:	46a9      	mov	r9, r5
 800576c:	f04f 0c00 	mov.w	ip, #0
 8005770:	f104 0e14 	add.w	lr, r4, #20
 8005774:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005778:	f8d9 1000 	ldr.w	r1, [r9]
 800577c:	fa1f fb82 	uxth.w	fp, r2
 8005780:	b289      	uxth	r1, r1
 8005782:	fb0a 110b 	mla	r1, sl, fp, r1
 8005786:	4461      	add	r1, ip
 8005788:	f8d9 c000 	ldr.w	ip, [r9]
 800578c:	0c12      	lsrs	r2, r2, #16
 800578e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005792:	fb0a c202 	mla	r2, sl, r2, ip
 8005796:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800579a:	b289      	uxth	r1, r1
 800579c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80057a0:	4577      	cmp	r7, lr
 80057a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80057a6:	f849 1b04 	str.w	r1, [r9], #4
 80057aa:	d8e3      	bhi.n	8005774 <__multiply+0xb0>
 80057ac:	9a01      	ldr	r2, [sp, #4]
 80057ae:	f845 c002 	str.w	ip, [r5, r2]
 80057b2:	9a03      	ldr	r2, [sp, #12]
 80057b4:	3304      	adds	r3, #4
 80057b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80057ba:	f1b9 0f00 	cmp.w	r9, #0
 80057be:	d020      	beq.n	8005802 <__multiply+0x13e>
 80057c0:	46ae      	mov	lr, r5
 80057c2:	f04f 0a00 	mov.w	sl, #0
 80057c6:	6829      	ldr	r1, [r5, #0]
 80057c8:	f104 0c14 	add.w	ip, r4, #20
 80057cc:	f8bc b000 	ldrh.w	fp, [ip]
 80057d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80057d4:	b289      	uxth	r1, r1
 80057d6:	fb09 220b 	mla	r2, r9, fp, r2
 80057da:	4492      	add	sl, r2
 80057dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80057e0:	f84e 1b04 	str.w	r1, [lr], #4
 80057e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80057e8:	f8be 1000 	ldrh.w	r1, [lr]
 80057ec:	0c12      	lsrs	r2, r2, #16
 80057ee:	fb09 1102 	mla	r1, r9, r2, r1
 80057f2:	4567      	cmp	r7, ip
 80057f4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80057f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80057fc:	d8e6      	bhi.n	80057cc <__multiply+0x108>
 80057fe:	9a01      	ldr	r2, [sp, #4]
 8005800:	50a9      	str	r1, [r5, r2]
 8005802:	3504      	adds	r5, #4
 8005804:	e79b      	b.n	800573e <__multiply+0x7a>
 8005806:	3e01      	subs	r6, #1
 8005808:	e79d      	b.n	8005746 <__multiply+0x82>
 800580a:	bf00      	nop
 800580c:	08006e5b 	.word	0x08006e5b
 8005810:	08006e6c 	.word	0x08006e6c

08005814 <__pow5mult>:
 8005814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005818:	4615      	mov	r5, r2
 800581a:	f012 0203 	ands.w	r2, r2, #3
 800581e:	4606      	mov	r6, r0
 8005820:	460f      	mov	r7, r1
 8005822:	d007      	beq.n	8005834 <__pow5mult+0x20>
 8005824:	4c25      	ldr	r4, [pc, #148]	; (80058bc <__pow5mult+0xa8>)
 8005826:	3a01      	subs	r2, #1
 8005828:	2300      	movs	r3, #0
 800582a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800582e:	f7ff fe9f 	bl	8005570 <__multadd>
 8005832:	4607      	mov	r7, r0
 8005834:	10ad      	asrs	r5, r5, #2
 8005836:	d03d      	beq.n	80058b4 <__pow5mult+0xa0>
 8005838:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800583a:	b97c      	cbnz	r4, 800585c <__pow5mult+0x48>
 800583c:	2010      	movs	r0, #16
 800583e:	f7ff fe11 	bl	8005464 <malloc>
 8005842:	4602      	mov	r2, r0
 8005844:	6270      	str	r0, [r6, #36]	; 0x24
 8005846:	b928      	cbnz	r0, 8005854 <__pow5mult+0x40>
 8005848:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800584c:	4b1c      	ldr	r3, [pc, #112]	; (80058c0 <__pow5mult+0xac>)
 800584e:	481d      	ldr	r0, [pc, #116]	; (80058c4 <__pow5mult+0xb0>)
 8005850:	f000 fc0a 	bl	8006068 <__assert_func>
 8005854:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005858:	6004      	str	r4, [r0, #0]
 800585a:	60c4      	str	r4, [r0, #12]
 800585c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005860:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005864:	b94c      	cbnz	r4, 800587a <__pow5mult+0x66>
 8005866:	f240 2171 	movw	r1, #625	; 0x271
 800586a:	4630      	mov	r0, r6
 800586c:	f7ff ff14 	bl	8005698 <__i2b>
 8005870:	2300      	movs	r3, #0
 8005872:	4604      	mov	r4, r0
 8005874:	f8c8 0008 	str.w	r0, [r8, #8]
 8005878:	6003      	str	r3, [r0, #0]
 800587a:	f04f 0900 	mov.w	r9, #0
 800587e:	07eb      	lsls	r3, r5, #31
 8005880:	d50a      	bpl.n	8005898 <__pow5mult+0x84>
 8005882:	4639      	mov	r1, r7
 8005884:	4622      	mov	r2, r4
 8005886:	4630      	mov	r0, r6
 8005888:	f7ff ff1c 	bl	80056c4 <__multiply>
 800588c:	4680      	mov	r8, r0
 800588e:	4639      	mov	r1, r7
 8005890:	4630      	mov	r0, r6
 8005892:	f7ff fe4b 	bl	800552c <_Bfree>
 8005896:	4647      	mov	r7, r8
 8005898:	106d      	asrs	r5, r5, #1
 800589a:	d00b      	beq.n	80058b4 <__pow5mult+0xa0>
 800589c:	6820      	ldr	r0, [r4, #0]
 800589e:	b938      	cbnz	r0, 80058b0 <__pow5mult+0x9c>
 80058a0:	4622      	mov	r2, r4
 80058a2:	4621      	mov	r1, r4
 80058a4:	4630      	mov	r0, r6
 80058a6:	f7ff ff0d 	bl	80056c4 <__multiply>
 80058aa:	6020      	str	r0, [r4, #0]
 80058ac:	f8c0 9000 	str.w	r9, [r0]
 80058b0:	4604      	mov	r4, r0
 80058b2:	e7e4      	b.n	800587e <__pow5mult+0x6a>
 80058b4:	4638      	mov	r0, r7
 80058b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ba:	bf00      	nop
 80058bc:	08006fb8 	.word	0x08006fb8
 80058c0:	08006de9 	.word	0x08006de9
 80058c4:	08006e6c 	.word	0x08006e6c

080058c8 <__lshift>:
 80058c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058cc:	460c      	mov	r4, r1
 80058ce:	4607      	mov	r7, r0
 80058d0:	4691      	mov	r9, r2
 80058d2:	6923      	ldr	r3, [r4, #16]
 80058d4:	6849      	ldr	r1, [r1, #4]
 80058d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058da:	68a3      	ldr	r3, [r4, #8]
 80058dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058e0:	f108 0601 	add.w	r6, r8, #1
 80058e4:	42b3      	cmp	r3, r6
 80058e6:	db0b      	blt.n	8005900 <__lshift+0x38>
 80058e8:	4638      	mov	r0, r7
 80058ea:	f7ff fddf 	bl	80054ac <_Balloc>
 80058ee:	4605      	mov	r5, r0
 80058f0:	b948      	cbnz	r0, 8005906 <__lshift+0x3e>
 80058f2:	4602      	mov	r2, r0
 80058f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80058f8:	4b29      	ldr	r3, [pc, #164]	; (80059a0 <__lshift+0xd8>)
 80058fa:	482a      	ldr	r0, [pc, #168]	; (80059a4 <__lshift+0xdc>)
 80058fc:	f000 fbb4 	bl	8006068 <__assert_func>
 8005900:	3101      	adds	r1, #1
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	e7ee      	b.n	80058e4 <__lshift+0x1c>
 8005906:	2300      	movs	r3, #0
 8005908:	f100 0114 	add.w	r1, r0, #20
 800590c:	f100 0210 	add.w	r2, r0, #16
 8005910:	4618      	mov	r0, r3
 8005912:	4553      	cmp	r3, sl
 8005914:	db37      	blt.n	8005986 <__lshift+0xbe>
 8005916:	6920      	ldr	r0, [r4, #16]
 8005918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800591c:	f104 0314 	add.w	r3, r4, #20
 8005920:	f019 091f 	ands.w	r9, r9, #31
 8005924:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005928:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800592c:	d02f      	beq.n	800598e <__lshift+0xc6>
 800592e:	468a      	mov	sl, r1
 8005930:	f04f 0c00 	mov.w	ip, #0
 8005934:	f1c9 0e20 	rsb	lr, r9, #32
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	fa02 f209 	lsl.w	r2, r2, r9
 800593e:	ea42 020c 	orr.w	r2, r2, ip
 8005942:	f84a 2b04 	str.w	r2, [sl], #4
 8005946:	f853 2b04 	ldr.w	r2, [r3], #4
 800594a:	4298      	cmp	r0, r3
 800594c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005950:	d8f2      	bhi.n	8005938 <__lshift+0x70>
 8005952:	1b03      	subs	r3, r0, r4
 8005954:	3b15      	subs	r3, #21
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	3304      	adds	r3, #4
 800595c:	f104 0215 	add.w	r2, r4, #21
 8005960:	4290      	cmp	r0, r2
 8005962:	bf38      	it	cc
 8005964:	2304      	movcc	r3, #4
 8005966:	f841 c003 	str.w	ip, [r1, r3]
 800596a:	f1bc 0f00 	cmp.w	ip, #0
 800596e:	d001      	beq.n	8005974 <__lshift+0xac>
 8005970:	f108 0602 	add.w	r6, r8, #2
 8005974:	3e01      	subs	r6, #1
 8005976:	4638      	mov	r0, r7
 8005978:	4621      	mov	r1, r4
 800597a:	612e      	str	r6, [r5, #16]
 800597c:	f7ff fdd6 	bl	800552c <_Bfree>
 8005980:	4628      	mov	r0, r5
 8005982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005986:	f842 0f04 	str.w	r0, [r2, #4]!
 800598a:	3301      	adds	r3, #1
 800598c:	e7c1      	b.n	8005912 <__lshift+0x4a>
 800598e:	3904      	subs	r1, #4
 8005990:	f853 2b04 	ldr.w	r2, [r3], #4
 8005994:	4298      	cmp	r0, r3
 8005996:	f841 2f04 	str.w	r2, [r1, #4]!
 800599a:	d8f9      	bhi.n	8005990 <__lshift+0xc8>
 800599c:	e7ea      	b.n	8005974 <__lshift+0xac>
 800599e:	bf00      	nop
 80059a0:	08006e5b 	.word	0x08006e5b
 80059a4:	08006e6c 	.word	0x08006e6c

080059a8 <__mcmp>:
 80059a8:	4603      	mov	r3, r0
 80059aa:	690a      	ldr	r2, [r1, #16]
 80059ac:	6900      	ldr	r0, [r0, #16]
 80059ae:	b530      	push	{r4, r5, lr}
 80059b0:	1a80      	subs	r0, r0, r2
 80059b2:	d10d      	bne.n	80059d0 <__mcmp+0x28>
 80059b4:	3314      	adds	r3, #20
 80059b6:	3114      	adds	r1, #20
 80059b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80059bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80059c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80059c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80059c8:	4295      	cmp	r5, r2
 80059ca:	d002      	beq.n	80059d2 <__mcmp+0x2a>
 80059cc:	d304      	bcc.n	80059d8 <__mcmp+0x30>
 80059ce:	2001      	movs	r0, #1
 80059d0:	bd30      	pop	{r4, r5, pc}
 80059d2:	42a3      	cmp	r3, r4
 80059d4:	d3f4      	bcc.n	80059c0 <__mcmp+0x18>
 80059d6:	e7fb      	b.n	80059d0 <__mcmp+0x28>
 80059d8:	f04f 30ff 	mov.w	r0, #4294967295
 80059dc:	e7f8      	b.n	80059d0 <__mcmp+0x28>
	...

080059e0 <__mdiff>:
 80059e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	460d      	mov	r5, r1
 80059e6:	4607      	mov	r7, r0
 80059e8:	4611      	mov	r1, r2
 80059ea:	4628      	mov	r0, r5
 80059ec:	4614      	mov	r4, r2
 80059ee:	f7ff ffdb 	bl	80059a8 <__mcmp>
 80059f2:	1e06      	subs	r6, r0, #0
 80059f4:	d111      	bne.n	8005a1a <__mdiff+0x3a>
 80059f6:	4631      	mov	r1, r6
 80059f8:	4638      	mov	r0, r7
 80059fa:	f7ff fd57 	bl	80054ac <_Balloc>
 80059fe:	4602      	mov	r2, r0
 8005a00:	b928      	cbnz	r0, 8005a0e <__mdiff+0x2e>
 8005a02:	f240 2132 	movw	r1, #562	; 0x232
 8005a06:	4b3a      	ldr	r3, [pc, #232]	; (8005af0 <__mdiff+0x110>)
 8005a08:	483a      	ldr	r0, [pc, #232]	; (8005af4 <__mdiff+0x114>)
 8005a0a:	f000 fb2d 	bl	8006068 <__assert_func>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005a14:	4610      	mov	r0, r2
 8005a16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1a:	bfa4      	itt	ge
 8005a1c:	4623      	movge	r3, r4
 8005a1e:	462c      	movge	r4, r5
 8005a20:	4638      	mov	r0, r7
 8005a22:	6861      	ldr	r1, [r4, #4]
 8005a24:	bfa6      	itte	ge
 8005a26:	461d      	movge	r5, r3
 8005a28:	2600      	movge	r6, #0
 8005a2a:	2601      	movlt	r6, #1
 8005a2c:	f7ff fd3e 	bl	80054ac <_Balloc>
 8005a30:	4602      	mov	r2, r0
 8005a32:	b918      	cbnz	r0, 8005a3c <__mdiff+0x5c>
 8005a34:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005a38:	4b2d      	ldr	r3, [pc, #180]	; (8005af0 <__mdiff+0x110>)
 8005a3a:	e7e5      	b.n	8005a08 <__mdiff+0x28>
 8005a3c:	f102 0814 	add.w	r8, r2, #20
 8005a40:	46c2      	mov	sl, r8
 8005a42:	f04f 0c00 	mov.w	ip, #0
 8005a46:	6927      	ldr	r7, [r4, #16]
 8005a48:	60c6      	str	r6, [r0, #12]
 8005a4a:	692e      	ldr	r6, [r5, #16]
 8005a4c:	f104 0014 	add.w	r0, r4, #20
 8005a50:	f105 0914 	add.w	r9, r5, #20
 8005a54:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005a58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a5c:	3410      	adds	r4, #16
 8005a5e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005a62:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a66:	fa1f f18b 	uxth.w	r1, fp
 8005a6a:	448c      	add	ip, r1
 8005a6c:	b299      	uxth	r1, r3
 8005a6e:	0c1b      	lsrs	r3, r3, #16
 8005a70:	ebac 0101 	sub.w	r1, ip, r1
 8005a74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005a78:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005a7c:	b289      	uxth	r1, r1
 8005a7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005a82:	454e      	cmp	r6, r9
 8005a84:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005a88:	f84a 3b04 	str.w	r3, [sl], #4
 8005a8c:	d8e7      	bhi.n	8005a5e <__mdiff+0x7e>
 8005a8e:	1b73      	subs	r3, r6, r5
 8005a90:	3b15      	subs	r3, #21
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	3515      	adds	r5, #21
 8005a98:	3304      	adds	r3, #4
 8005a9a:	42ae      	cmp	r6, r5
 8005a9c:	bf38      	it	cc
 8005a9e:	2304      	movcc	r3, #4
 8005aa0:	4418      	add	r0, r3
 8005aa2:	4443      	add	r3, r8
 8005aa4:	461e      	mov	r6, r3
 8005aa6:	4605      	mov	r5, r0
 8005aa8:	4575      	cmp	r5, lr
 8005aaa:	d30e      	bcc.n	8005aca <__mdiff+0xea>
 8005aac:	f10e 0103 	add.w	r1, lr, #3
 8005ab0:	1a09      	subs	r1, r1, r0
 8005ab2:	f021 0103 	bic.w	r1, r1, #3
 8005ab6:	3803      	subs	r0, #3
 8005ab8:	4586      	cmp	lr, r0
 8005aba:	bf38      	it	cc
 8005abc:	2100      	movcc	r1, #0
 8005abe:	4419      	add	r1, r3
 8005ac0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005ac4:	b18b      	cbz	r3, 8005aea <__mdiff+0x10a>
 8005ac6:	6117      	str	r7, [r2, #16]
 8005ac8:	e7a4      	b.n	8005a14 <__mdiff+0x34>
 8005aca:	f855 8b04 	ldr.w	r8, [r5], #4
 8005ace:	fa1f f188 	uxth.w	r1, r8
 8005ad2:	4461      	add	r1, ip
 8005ad4:	140c      	asrs	r4, r1, #16
 8005ad6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ada:	b289      	uxth	r1, r1
 8005adc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005ae0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005ae4:	f846 1b04 	str.w	r1, [r6], #4
 8005ae8:	e7de      	b.n	8005aa8 <__mdiff+0xc8>
 8005aea:	3f01      	subs	r7, #1
 8005aec:	e7e8      	b.n	8005ac0 <__mdiff+0xe0>
 8005aee:	bf00      	nop
 8005af0:	08006e5b 	.word	0x08006e5b
 8005af4:	08006e6c 	.word	0x08006e6c

08005af8 <__d2b>:
 8005af8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005afc:	2101      	movs	r1, #1
 8005afe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005b02:	4690      	mov	r8, r2
 8005b04:	461d      	mov	r5, r3
 8005b06:	f7ff fcd1 	bl	80054ac <_Balloc>
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	b930      	cbnz	r0, 8005b1c <__d2b+0x24>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	f240 310a 	movw	r1, #778	; 0x30a
 8005b14:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <__d2b+0xb0>)
 8005b16:	4825      	ldr	r0, [pc, #148]	; (8005bac <__d2b+0xb4>)
 8005b18:	f000 faa6 	bl	8006068 <__assert_func>
 8005b1c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005b20:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005b24:	bb2d      	cbnz	r5, 8005b72 <__d2b+0x7a>
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	f1b8 0300 	subs.w	r3, r8, #0
 8005b2c:	d026      	beq.n	8005b7c <__d2b+0x84>
 8005b2e:	4668      	mov	r0, sp
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	f7ff fd83 	bl	800563c <__lo0bits>
 8005b36:	9900      	ldr	r1, [sp, #0]
 8005b38:	b1f0      	cbz	r0, 8005b78 <__d2b+0x80>
 8005b3a:	9a01      	ldr	r2, [sp, #4]
 8005b3c:	f1c0 0320 	rsb	r3, r0, #32
 8005b40:	fa02 f303 	lsl.w	r3, r2, r3
 8005b44:	430b      	orrs	r3, r1
 8005b46:	40c2      	lsrs	r2, r0
 8005b48:	6163      	str	r3, [r4, #20]
 8005b4a:	9201      	str	r2, [sp, #4]
 8005b4c:	9b01      	ldr	r3, [sp, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	bf14      	ite	ne
 8005b52:	2102      	movne	r1, #2
 8005b54:	2101      	moveq	r1, #1
 8005b56:	61a3      	str	r3, [r4, #24]
 8005b58:	6121      	str	r1, [r4, #16]
 8005b5a:	b1c5      	cbz	r5, 8005b8e <__d2b+0x96>
 8005b5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005b60:	4405      	add	r5, r0
 8005b62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b66:	603d      	str	r5, [r7, #0]
 8005b68:	6030      	str	r0, [r6, #0]
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	b002      	add	sp, #8
 8005b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b76:	e7d6      	b.n	8005b26 <__d2b+0x2e>
 8005b78:	6161      	str	r1, [r4, #20]
 8005b7a:	e7e7      	b.n	8005b4c <__d2b+0x54>
 8005b7c:	a801      	add	r0, sp, #4
 8005b7e:	f7ff fd5d 	bl	800563c <__lo0bits>
 8005b82:	2101      	movs	r1, #1
 8005b84:	9b01      	ldr	r3, [sp, #4]
 8005b86:	6121      	str	r1, [r4, #16]
 8005b88:	6163      	str	r3, [r4, #20]
 8005b8a:	3020      	adds	r0, #32
 8005b8c:	e7e5      	b.n	8005b5a <__d2b+0x62>
 8005b8e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005b92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b96:	6038      	str	r0, [r7, #0]
 8005b98:	6918      	ldr	r0, [r3, #16]
 8005b9a:	f7ff fd2f 	bl	80055fc <__hi0bits>
 8005b9e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005ba2:	6031      	str	r1, [r6, #0]
 8005ba4:	e7e1      	b.n	8005b6a <__d2b+0x72>
 8005ba6:	bf00      	nop
 8005ba8:	08006e5b 	.word	0x08006e5b
 8005bac:	08006e6c 	.word	0x08006e6c

08005bb0 <_calloc_r>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	fba1 5402 	umull	r5, r4, r1, r2
 8005bb6:	b934      	cbnz	r4, 8005bc6 <_calloc_r+0x16>
 8005bb8:	4629      	mov	r1, r5
 8005bba:	f000 f875 	bl	8005ca8 <_malloc_r>
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	b928      	cbnz	r0, 8005bce <_calloc_r+0x1e>
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	bd70      	pop	{r4, r5, r6, pc}
 8005bc6:	220c      	movs	r2, #12
 8005bc8:	2600      	movs	r6, #0
 8005bca:	6002      	str	r2, [r0, #0]
 8005bcc:	e7f9      	b.n	8005bc2 <_calloc_r+0x12>
 8005bce:	462a      	mov	r2, r5
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	f7fe f93f 	bl	8003e54 <memset>
 8005bd6:	e7f4      	b.n	8005bc2 <_calloc_r+0x12>

08005bd8 <_free_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4605      	mov	r5, r0
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	d040      	beq.n	8005c62 <_free_r+0x8a>
 8005be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005be4:	1f0c      	subs	r4, r1, #4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	bfb8      	it	lt
 8005bea:	18e4      	addlt	r4, r4, r3
 8005bec:	f000 fa98 	bl	8006120 <__malloc_lock>
 8005bf0:	4a1c      	ldr	r2, [pc, #112]	; (8005c64 <_free_r+0x8c>)
 8005bf2:	6813      	ldr	r3, [r2, #0]
 8005bf4:	b933      	cbnz	r3, 8005c04 <_free_r+0x2c>
 8005bf6:	6063      	str	r3, [r4, #4]
 8005bf8:	6014      	str	r4, [r2, #0]
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c00:	f000 ba94 	b.w	800612c <__malloc_unlock>
 8005c04:	42a3      	cmp	r3, r4
 8005c06:	d908      	bls.n	8005c1a <_free_r+0x42>
 8005c08:	6820      	ldr	r0, [r4, #0]
 8005c0a:	1821      	adds	r1, r4, r0
 8005c0c:	428b      	cmp	r3, r1
 8005c0e:	bf01      	itttt	eq
 8005c10:	6819      	ldreq	r1, [r3, #0]
 8005c12:	685b      	ldreq	r3, [r3, #4]
 8005c14:	1809      	addeq	r1, r1, r0
 8005c16:	6021      	streq	r1, [r4, #0]
 8005c18:	e7ed      	b.n	8005bf6 <_free_r+0x1e>
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	b10b      	cbz	r3, 8005c24 <_free_r+0x4c>
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	d9fa      	bls.n	8005c1a <_free_r+0x42>
 8005c24:	6811      	ldr	r1, [r2, #0]
 8005c26:	1850      	adds	r0, r2, r1
 8005c28:	42a0      	cmp	r0, r4
 8005c2a:	d10b      	bne.n	8005c44 <_free_r+0x6c>
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	4401      	add	r1, r0
 8005c30:	1850      	adds	r0, r2, r1
 8005c32:	4283      	cmp	r3, r0
 8005c34:	6011      	str	r1, [r2, #0]
 8005c36:	d1e0      	bne.n	8005bfa <_free_r+0x22>
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	4401      	add	r1, r0
 8005c3e:	6011      	str	r1, [r2, #0]
 8005c40:	6053      	str	r3, [r2, #4]
 8005c42:	e7da      	b.n	8005bfa <_free_r+0x22>
 8005c44:	d902      	bls.n	8005c4c <_free_r+0x74>
 8005c46:	230c      	movs	r3, #12
 8005c48:	602b      	str	r3, [r5, #0]
 8005c4a:	e7d6      	b.n	8005bfa <_free_r+0x22>
 8005c4c:	6820      	ldr	r0, [r4, #0]
 8005c4e:	1821      	adds	r1, r4, r0
 8005c50:	428b      	cmp	r3, r1
 8005c52:	bf01      	itttt	eq
 8005c54:	6819      	ldreq	r1, [r3, #0]
 8005c56:	685b      	ldreq	r3, [r3, #4]
 8005c58:	1809      	addeq	r1, r1, r0
 8005c5a:	6021      	streq	r1, [r4, #0]
 8005c5c:	6063      	str	r3, [r4, #4]
 8005c5e:	6054      	str	r4, [r2, #4]
 8005c60:	e7cb      	b.n	8005bfa <_free_r+0x22>
 8005c62:	bd38      	pop	{r3, r4, r5, pc}
 8005c64:	200002d0 	.word	0x200002d0

08005c68 <sbrk_aligned>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	4e0e      	ldr	r6, [pc, #56]	; (8005ca4 <sbrk_aligned+0x3c>)
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	6831      	ldr	r1, [r6, #0]
 8005c70:	4605      	mov	r5, r0
 8005c72:	b911      	cbnz	r1, 8005c7a <sbrk_aligned+0x12>
 8005c74:	f000 f9e8 	bl	8006048 <_sbrk_r>
 8005c78:	6030      	str	r0, [r6, #0]
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f000 f9e3 	bl	8006048 <_sbrk_r>
 8005c82:	1c43      	adds	r3, r0, #1
 8005c84:	d00a      	beq.n	8005c9c <sbrk_aligned+0x34>
 8005c86:	1cc4      	adds	r4, r0, #3
 8005c88:	f024 0403 	bic.w	r4, r4, #3
 8005c8c:	42a0      	cmp	r0, r4
 8005c8e:	d007      	beq.n	8005ca0 <sbrk_aligned+0x38>
 8005c90:	1a21      	subs	r1, r4, r0
 8005c92:	4628      	mov	r0, r5
 8005c94:	f000 f9d8 	bl	8006048 <_sbrk_r>
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d101      	bne.n	8005ca0 <sbrk_aligned+0x38>
 8005c9c:	f04f 34ff 	mov.w	r4, #4294967295
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	200002d4 	.word	0x200002d4

08005ca8 <_malloc_r>:
 8005ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cac:	1ccd      	adds	r5, r1, #3
 8005cae:	f025 0503 	bic.w	r5, r5, #3
 8005cb2:	3508      	adds	r5, #8
 8005cb4:	2d0c      	cmp	r5, #12
 8005cb6:	bf38      	it	cc
 8005cb8:	250c      	movcc	r5, #12
 8005cba:	2d00      	cmp	r5, #0
 8005cbc:	4607      	mov	r7, r0
 8005cbe:	db01      	blt.n	8005cc4 <_malloc_r+0x1c>
 8005cc0:	42a9      	cmp	r1, r5
 8005cc2:	d905      	bls.n	8005cd0 <_malloc_r+0x28>
 8005cc4:	230c      	movs	r3, #12
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	4630      	mov	r0, r6
 8005ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cd0:	4e2e      	ldr	r6, [pc, #184]	; (8005d8c <_malloc_r+0xe4>)
 8005cd2:	f000 fa25 	bl	8006120 <__malloc_lock>
 8005cd6:	6833      	ldr	r3, [r6, #0]
 8005cd8:	461c      	mov	r4, r3
 8005cda:	bb34      	cbnz	r4, 8005d2a <_malloc_r+0x82>
 8005cdc:	4629      	mov	r1, r5
 8005cde:	4638      	mov	r0, r7
 8005ce0:	f7ff ffc2 	bl	8005c68 <sbrk_aligned>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	d14d      	bne.n	8005d86 <_malloc_r+0xde>
 8005cea:	6834      	ldr	r4, [r6, #0]
 8005cec:	4626      	mov	r6, r4
 8005cee:	2e00      	cmp	r6, #0
 8005cf0:	d140      	bne.n	8005d74 <_malloc_r+0xcc>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	eb04 0803 	add.w	r8, r4, r3
 8005cfc:	f000 f9a4 	bl	8006048 <_sbrk_r>
 8005d00:	4580      	cmp	r8, r0
 8005d02:	d13a      	bne.n	8005d7a <_malloc_r+0xd2>
 8005d04:	6821      	ldr	r1, [r4, #0]
 8005d06:	3503      	adds	r5, #3
 8005d08:	1a6d      	subs	r5, r5, r1
 8005d0a:	f025 0503 	bic.w	r5, r5, #3
 8005d0e:	3508      	adds	r5, #8
 8005d10:	2d0c      	cmp	r5, #12
 8005d12:	bf38      	it	cc
 8005d14:	250c      	movcc	r5, #12
 8005d16:	4638      	mov	r0, r7
 8005d18:	4629      	mov	r1, r5
 8005d1a:	f7ff ffa5 	bl	8005c68 <sbrk_aligned>
 8005d1e:	3001      	adds	r0, #1
 8005d20:	d02b      	beq.n	8005d7a <_malloc_r+0xd2>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	442b      	add	r3, r5
 8005d26:	6023      	str	r3, [r4, #0]
 8005d28:	e00e      	b.n	8005d48 <_malloc_r+0xa0>
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	1b52      	subs	r2, r2, r5
 8005d2e:	d41e      	bmi.n	8005d6e <_malloc_r+0xc6>
 8005d30:	2a0b      	cmp	r2, #11
 8005d32:	d916      	bls.n	8005d62 <_malloc_r+0xba>
 8005d34:	1961      	adds	r1, r4, r5
 8005d36:	42a3      	cmp	r3, r4
 8005d38:	6025      	str	r5, [r4, #0]
 8005d3a:	bf18      	it	ne
 8005d3c:	6059      	strne	r1, [r3, #4]
 8005d3e:	6863      	ldr	r3, [r4, #4]
 8005d40:	bf08      	it	eq
 8005d42:	6031      	streq	r1, [r6, #0]
 8005d44:	5162      	str	r2, [r4, r5]
 8005d46:	604b      	str	r3, [r1, #4]
 8005d48:	4638      	mov	r0, r7
 8005d4a:	f104 060b 	add.w	r6, r4, #11
 8005d4e:	f000 f9ed 	bl	800612c <__malloc_unlock>
 8005d52:	f026 0607 	bic.w	r6, r6, #7
 8005d56:	1d23      	adds	r3, r4, #4
 8005d58:	1af2      	subs	r2, r6, r3
 8005d5a:	d0b6      	beq.n	8005cca <_malloc_r+0x22>
 8005d5c:	1b9b      	subs	r3, r3, r6
 8005d5e:	50a3      	str	r3, [r4, r2]
 8005d60:	e7b3      	b.n	8005cca <_malloc_r+0x22>
 8005d62:	6862      	ldr	r2, [r4, #4]
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	bf0c      	ite	eq
 8005d68:	6032      	streq	r2, [r6, #0]
 8005d6a:	605a      	strne	r2, [r3, #4]
 8005d6c:	e7ec      	b.n	8005d48 <_malloc_r+0xa0>
 8005d6e:	4623      	mov	r3, r4
 8005d70:	6864      	ldr	r4, [r4, #4]
 8005d72:	e7b2      	b.n	8005cda <_malloc_r+0x32>
 8005d74:	4634      	mov	r4, r6
 8005d76:	6876      	ldr	r6, [r6, #4]
 8005d78:	e7b9      	b.n	8005cee <_malloc_r+0x46>
 8005d7a:	230c      	movs	r3, #12
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	f000 f9d4 	bl	800612c <__malloc_unlock>
 8005d84:	e7a1      	b.n	8005cca <_malloc_r+0x22>
 8005d86:	6025      	str	r5, [r4, #0]
 8005d88:	e7de      	b.n	8005d48 <_malloc_r+0xa0>
 8005d8a:	bf00      	nop
 8005d8c:	200002d0 	.word	0x200002d0

08005d90 <__ssputs_r>:
 8005d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d94:	688e      	ldr	r6, [r1, #8]
 8005d96:	4682      	mov	sl, r0
 8005d98:	429e      	cmp	r6, r3
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	4690      	mov	r8, r2
 8005d9e:	461f      	mov	r7, r3
 8005da0:	d838      	bhi.n	8005e14 <__ssputs_r+0x84>
 8005da2:	898a      	ldrh	r2, [r1, #12]
 8005da4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005da8:	d032      	beq.n	8005e10 <__ssputs_r+0x80>
 8005daa:	6825      	ldr	r5, [r4, #0]
 8005dac:	6909      	ldr	r1, [r1, #16]
 8005dae:	3301      	adds	r3, #1
 8005db0:	eba5 0901 	sub.w	r9, r5, r1
 8005db4:	6965      	ldr	r5, [r4, #20]
 8005db6:	444b      	add	r3, r9
 8005db8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005dc0:	106d      	asrs	r5, r5, #1
 8005dc2:	429d      	cmp	r5, r3
 8005dc4:	bf38      	it	cc
 8005dc6:	461d      	movcc	r5, r3
 8005dc8:	0553      	lsls	r3, r2, #21
 8005dca:	d531      	bpl.n	8005e30 <__ssputs_r+0xa0>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	f7ff ff6b 	bl	8005ca8 <_malloc_r>
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	b950      	cbnz	r0, 8005dec <__ssputs_r+0x5c>
 8005dd6:	230c      	movs	r3, #12
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	f8ca 3000 	str.w	r3, [sl]
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de6:	81a3      	strh	r3, [r4, #12]
 8005de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dec:	464a      	mov	r2, r9
 8005dee:	6921      	ldr	r1, [r4, #16]
 8005df0:	f7ff fb4e 	bl	8005490 <memcpy>
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfe:	81a3      	strh	r3, [r4, #12]
 8005e00:	6126      	str	r6, [r4, #16]
 8005e02:	444e      	add	r6, r9
 8005e04:	6026      	str	r6, [r4, #0]
 8005e06:	463e      	mov	r6, r7
 8005e08:	6165      	str	r5, [r4, #20]
 8005e0a:	eba5 0509 	sub.w	r5, r5, r9
 8005e0e:	60a5      	str	r5, [r4, #8]
 8005e10:	42be      	cmp	r6, r7
 8005e12:	d900      	bls.n	8005e16 <__ssputs_r+0x86>
 8005e14:	463e      	mov	r6, r7
 8005e16:	4632      	mov	r2, r6
 8005e18:	4641      	mov	r1, r8
 8005e1a:	6820      	ldr	r0, [r4, #0]
 8005e1c:	f000 f966 	bl	80060ec <memmove>
 8005e20:	68a3      	ldr	r3, [r4, #8]
 8005e22:	2000      	movs	r0, #0
 8005e24:	1b9b      	subs	r3, r3, r6
 8005e26:	60a3      	str	r3, [r4, #8]
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	4433      	add	r3, r6
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	e7db      	b.n	8005de8 <__ssputs_r+0x58>
 8005e30:	462a      	mov	r2, r5
 8005e32:	f000 f981 	bl	8006138 <_realloc_r>
 8005e36:	4606      	mov	r6, r0
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d1e1      	bne.n	8005e00 <__ssputs_r+0x70>
 8005e3c:	4650      	mov	r0, sl
 8005e3e:	6921      	ldr	r1, [r4, #16]
 8005e40:	f7ff feca 	bl	8005bd8 <_free_r>
 8005e44:	e7c7      	b.n	8005dd6 <__ssputs_r+0x46>
	...

08005e48 <_svfiprintf_r>:
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	4698      	mov	r8, r3
 8005e4e:	898b      	ldrh	r3, [r1, #12]
 8005e50:	4607      	mov	r7, r0
 8005e52:	061b      	lsls	r3, r3, #24
 8005e54:	460d      	mov	r5, r1
 8005e56:	4614      	mov	r4, r2
 8005e58:	b09d      	sub	sp, #116	; 0x74
 8005e5a:	d50e      	bpl.n	8005e7a <_svfiprintf_r+0x32>
 8005e5c:	690b      	ldr	r3, [r1, #16]
 8005e5e:	b963      	cbnz	r3, 8005e7a <_svfiprintf_r+0x32>
 8005e60:	2140      	movs	r1, #64	; 0x40
 8005e62:	f7ff ff21 	bl	8005ca8 <_malloc_r>
 8005e66:	6028      	str	r0, [r5, #0]
 8005e68:	6128      	str	r0, [r5, #16]
 8005e6a:	b920      	cbnz	r0, 8005e76 <_svfiprintf_r+0x2e>
 8005e6c:	230c      	movs	r3, #12
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295
 8005e74:	e0d1      	b.n	800601a <_svfiprintf_r+0x1d2>
 8005e76:	2340      	movs	r3, #64	; 0x40
 8005e78:	616b      	str	r3, [r5, #20]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e7e:	2320      	movs	r3, #32
 8005e80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e84:	2330      	movs	r3, #48	; 0x30
 8005e86:	f04f 0901 	mov.w	r9, #1
 8005e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006034 <_svfiprintf_r+0x1ec>
 8005e92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e96:	4623      	mov	r3, r4
 8005e98:	469a      	mov	sl, r3
 8005e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e9e:	b10a      	cbz	r2, 8005ea4 <_svfiprintf_r+0x5c>
 8005ea0:	2a25      	cmp	r2, #37	; 0x25
 8005ea2:	d1f9      	bne.n	8005e98 <_svfiprintf_r+0x50>
 8005ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ea8:	d00b      	beq.n	8005ec2 <_svfiprintf_r+0x7a>
 8005eaa:	465b      	mov	r3, fp
 8005eac:	4622      	mov	r2, r4
 8005eae:	4629      	mov	r1, r5
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	f7ff ff6d 	bl	8005d90 <__ssputs_r>
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f000 80aa 	beq.w	8006010 <_svfiprintf_r+0x1c8>
 8005ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ebe:	445a      	add	r2, fp
 8005ec0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 80a2 	beq.w	8006010 <_svfiprintf_r+0x1c8>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ed6:	f10a 0a01 	add.w	sl, sl, #1
 8005eda:	9304      	str	r3, [sp, #16]
 8005edc:	9307      	str	r3, [sp, #28]
 8005ede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ee2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ee4:	4654      	mov	r4, sl
 8005ee6:	2205      	movs	r2, #5
 8005ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eec:	4851      	ldr	r0, [pc, #324]	; (8006034 <_svfiprintf_r+0x1ec>)
 8005eee:	f7ff fac1 	bl	8005474 <memchr>
 8005ef2:	9a04      	ldr	r2, [sp, #16]
 8005ef4:	b9d8      	cbnz	r0, 8005f2e <_svfiprintf_r+0xe6>
 8005ef6:	06d0      	lsls	r0, r2, #27
 8005ef8:	bf44      	itt	mi
 8005efa:	2320      	movmi	r3, #32
 8005efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f00:	0711      	lsls	r1, r2, #28
 8005f02:	bf44      	itt	mi
 8005f04:	232b      	movmi	r3, #43	; 0x2b
 8005f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f10:	d015      	beq.n	8005f3e <_svfiprintf_r+0xf6>
 8005f12:	4654      	mov	r4, sl
 8005f14:	2000      	movs	r0, #0
 8005f16:	f04f 0c0a 	mov.w	ip, #10
 8005f1a:	9a07      	ldr	r2, [sp, #28]
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f22:	3b30      	subs	r3, #48	; 0x30
 8005f24:	2b09      	cmp	r3, #9
 8005f26:	d94e      	bls.n	8005fc6 <_svfiprintf_r+0x17e>
 8005f28:	b1b0      	cbz	r0, 8005f58 <_svfiprintf_r+0x110>
 8005f2a:	9207      	str	r2, [sp, #28]
 8005f2c:	e014      	b.n	8005f58 <_svfiprintf_r+0x110>
 8005f2e:	eba0 0308 	sub.w	r3, r0, r8
 8005f32:	fa09 f303 	lsl.w	r3, r9, r3
 8005f36:	4313      	orrs	r3, r2
 8005f38:	46a2      	mov	sl, r4
 8005f3a:	9304      	str	r3, [sp, #16]
 8005f3c:	e7d2      	b.n	8005ee4 <_svfiprintf_r+0x9c>
 8005f3e:	9b03      	ldr	r3, [sp, #12]
 8005f40:	1d19      	adds	r1, r3, #4
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	9103      	str	r1, [sp, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bfbb      	ittet	lt
 8005f4a:	425b      	neglt	r3, r3
 8005f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f50:	9307      	strge	r3, [sp, #28]
 8005f52:	9307      	strlt	r3, [sp, #28]
 8005f54:	bfb8      	it	lt
 8005f56:	9204      	strlt	r2, [sp, #16]
 8005f58:	7823      	ldrb	r3, [r4, #0]
 8005f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f5c:	d10c      	bne.n	8005f78 <_svfiprintf_r+0x130>
 8005f5e:	7863      	ldrb	r3, [r4, #1]
 8005f60:	2b2a      	cmp	r3, #42	; 0x2a
 8005f62:	d135      	bne.n	8005fd0 <_svfiprintf_r+0x188>
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	3402      	adds	r4, #2
 8005f68:	1d1a      	adds	r2, r3, #4
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	9203      	str	r2, [sp, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bfb8      	it	lt
 8005f72:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f76:	9305      	str	r3, [sp, #20]
 8005f78:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006038 <_svfiprintf_r+0x1f0>
 8005f7c:	2203      	movs	r2, #3
 8005f7e:	4650      	mov	r0, sl
 8005f80:	7821      	ldrb	r1, [r4, #0]
 8005f82:	f7ff fa77 	bl	8005474 <memchr>
 8005f86:	b140      	cbz	r0, 8005f9a <_svfiprintf_r+0x152>
 8005f88:	2340      	movs	r3, #64	; 0x40
 8005f8a:	eba0 000a 	sub.w	r0, r0, sl
 8005f8e:	fa03 f000 	lsl.w	r0, r3, r0
 8005f92:	9b04      	ldr	r3, [sp, #16]
 8005f94:	3401      	adds	r4, #1
 8005f96:	4303      	orrs	r3, r0
 8005f98:	9304      	str	r3, [sp, #16]
 8005f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f9e:	2206      	movs	r2, #6
 8005fa0:	4826      	ldr	r0, [pc, #152]	; (800603c <_svfiprintf_r+0x1f4>)
 8005fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fa6:	f7ff fa65 	bl	8005474 <memchr>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d038      	beq.n	8006020 <_svfiprintf_r+0x1d8>
 8005fae:	4b24      	ldr	r3, [pc, #144]	; (8006040 <_svfiprintf_r+0x1f8>)
 8005fb0:	bb1b      	cbnz	r3, 8005ffa <_svfiprintf_r+0x1b2>
 8005fb2:	9b03      	ldr	r3, [sp, #12]
 8005fb4:	3307      	adds	r3, #7
 8005fb6:	f023 0307 	bic.w	r3, r3, #7
 8005fba:	3308      	adds	r3, #8
 8005fbc:	9303      	str	r3, [sp, #12]
 8005fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc0:	4433      	add	r3, r6
 8005fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fc4:	e767      	b.n	8005e96 <_svfiprintf_r+0x4e>
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	2001      	movs	r0, #1
 8005fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fce:	e7a5      	b.n	8005f1c <_svfiprintf_r+0xd4>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f04f 0c0a 	mov.w	ip, #10
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	3401      	adds	r4, #1
 8005fda:	9305      	str	r3, [sp, #20]
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fe2:	3a30      	subs	r2, #48	; 0x30
 8005fe4:	2a09      	cmp	r2, #9
 8005fe6:	d903      	bls.n	8005ff0 <_svfiprintf_r+0x1a8>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0c5      	beq.n	8005f78 <_svfiprintf_r+0x130>
 8005fec:	9105      	str	r1, [sp, #20]
 8005fee:	e7c3      	b.n	8005f78 <_svfiprintf_r+0x130>
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ff8:	e7f0      	b.n	8005fdc <_svfiprintf_r+0x194>
 8005ffa:	ab03      	add	r3, sp, #12
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	462a      	mov	r2, r5
 8006000:	4638      	mov	r0, r7
 8006002:	4b10      	ldr	r3, [pc, #64]	; (8006044 <_svfiprintf_r+0x1fc>)
 8006004:	a904      	add	r1, sp, #16
 8006006:	f7fd ffcb 	bl	8003fa0 <_printf_float>
 800600a:	1c42      	adds	r2, r0, #1
 800600c:	4606      	mov	r6, r0
 800600e:	d1d6      	bne.n	8005fbe <_svfiprintf_r+0x176>
 8006010:	89ab      	ldrh	r3, [r5, #12]
 8006012:	065b      	lsls	r3, r3, #25
 8006014:	f53f af2c 	bmi.w	8005e70 <_svfiprintf_r+0x28>
 8006018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800601a:	b01d      	add	sp, #116	; 0x74
 800601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006020:	ab03      	add	r3, sp, #12
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	462a      	mov	r2, r5
 8006026:	4638      	mov	r0, r7
 8006028:	4b06      	ldr	r3, [pc, #24]	; (8006044 <_svfiprintf_r+0x1fc>)
 800602a:	a904      	add	r1, sp, #16
 800602c:	f7fe fa54 	bl	80044d8 <_printf_i>
 8006030:	e7eb      	b.n	800600a <_svfiprintf_r+0x1c2>
 8006032:	bf00      	nop
 8006034:	08006fc4 	.word	0x08006fc4
 8006038:	08006fca 	.word	0x08006fca
 800603c:	08006fce 	.word	0x08006fce
 8006040:	08003fa1 	.word	0x08003fa1
 8006044:	08005d91 	.word	0x08005d91

08006048 <_sbrk_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	2300      	movs	r3, #0
 800604c:	4d05      	ldr	r5, [pc, #20]	; (8006064 <_sbrk_r+0x1c>)
 800604e:	4604      	mov	r4, r0
 8006050:	4608      	mov	r0, r1
 8006052:	602b      	str	r3, [r5, #0]
 8006054:	f7fb fa86 	bl	8001564 <_sbrk>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d102      	bne.n	8006062 <_sbrk_r+0x1a>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	b103      	cbz	r3, 8006062 <_sbrk_r+0x1a>
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	bd38      	pop	{r3, r4, r5, pc}
 8006064:	200002d8 	.word	0x200002d8

08006068 <__assert_func>:
 8006068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800606a:	4614      	mov	r4, r2
 800606c:	461a      	mov	r2, r3
 800606e:	4b09      	ldr	r3, [pc, #36]	; (8006094 <__assert_func+0x2c>)
 8006070:	4605      	mov	r5, r0
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68d8      	ldr	r0, [r3, #12]
 8006076:	b14c      	cbz	r4, 800608c <__assert_func+0x24>
 8006078:	4b07      	ldr	r3, [pc, #28]	; (8006098 <__assert_func+0x30>)
 800607a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800607e:	9100      	str	r1, [sp, #0]
 8006080:	462b      	mov	r3, r5
 8006082:	4906      	ldr	r1, [pc, #24]	; (800609c <__assert_func+0x34>)
 8006084:	f000 f80e 	bl	80060a4 <fiprintf>
 8006088:	f000 faaa 	bl	80065e0 <abort>
 800608c:	4b04      	ldr	r3, [pc, #16]	; (80060a0 <__assert_func+0x38>)
 800608e:	461c      	mov	r4, r3
 8006090:	e7f3      	b.n	800607a <__assert_func+0x12>
 8006092:	bf00      	nop
 8006094:	20000028 	.word	0x20000028
 8006098:	08006fd5 	.word	0x08006fd5
 800609c:	08006fe2 	.word	0x08006fe2
 80060a0:	08007010 	.word	0x08007010

080060a4 <fiprintf>:
 80060a4:	b40e      	push	{r1, r2, r3}
 80060a6:	b503      	push	{r0, r1, lr}
 80060a8:	4601      	mov	r1, r0
 80060aa:	ab03      	add	r3, sp, #12
 80060ac:	4805      	ldr	r0, [pc, #20]	; (80060c4 <fiprintf+0x20>)
 80060ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80060b2:	6800      	ldr	r0, [r0, #0]
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	f000 f895 	bl	80061e4 <_vfiprintf_r>
 80060ba:	b002      	add	sp, #8
 80060bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80060c0:	b003      	add	sp, #12
 80060c2:	4770      	bx	lr
 80060c4:	20000028 	.word	0x20000028

080060c8 <__ascii_mbtowc>:
 80060c8:	b082      	sub	sp, #8
 80060ca:	b901      	cbnz	r1, 80060ce <__ascii_mbtowc+0x6>
 80060cc:	a901      	add	r1, sp, #4
 80060ce:	b142      	cbz	r2, 80060e2 <__ascii_mbtowc+0x1a>
 80060d0:	b14b      	cbz	r3, 80060e6 <__ascii_mbtowc+0x1e>
 80060d2:	7813      	ldrb	r3, [r2, #0]
 80060d4:	600b      	str	r3, [r1, #0]
 80060d6:	7812      	ldrb	r2, [r2, #0]
 80060d8:	1e10      	subs	r0, r2, #0
 80060da:	bf18      	it	ne
 80060dc:	2001      	movne	r0, #1
 80060de:	b002      	add	sp, #8
 80060e0:	4770      	bx	lr
 80060e2:	4610      	mov	r0, r2
 80060e4:	e7fb      	b.n	80060de <__ascii_mbtowc+0x16>
 80060e6:	f06f 0001 	mvn.w	r0, #1
 80060ea:	e7f8      	b.n	80060de <__ascii_mbtowc+0x16>

080060ec <memmove>:
 80060ec:	4288      	cmp	r0, r1
 80060ee:	b510      	push	{r4, lr}
 80060f0:	eb01 0402 	add.w	r4, r1, r2
 80060f4:	d902      	bls.n	80060fc <memmove+0x10>
 80060f6:	4284      	cmp	r4, r0
 80060f8:	4623      	mov	r3, r4
 80060fa:	d807      	bhi.n	800610c <memmove+0x20>
 80060fc:	1e43      	subs	r3, r0, #1
 80060fe:	42a1      	cmp	r1, r4
 8006100:	d008      	beq.n	8006114 <memmove+0x28>
 8006102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006106:	f803 2f01 	strb.w	r2, [r3, #1]!
 800610a:	e7f8      	b.n	80060fe <memmove+0x12>
 800610c:	4601      	mov	r1, r0
 800610e:	4402      	add	r2, r0
 8006110:	428a      	cmp	r2, r1
 8006112:	d100      	bne.n	8006116 <memmove+0x2a>
 8006114:	bd10      	pop	{r4, pc}
 8006116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800611a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800611e:	e7f7      	b.n	8006110 <memmove+0x24>

08006120 <__malloc_lock>:
 8006120:	4801      	ldr	r0, [pc, #4]	; (8006128 <__malloc_lock+0x8>)
 8006122:	f000 bc19 	b.w	8006958 <__retarget_lock_acquire_recursive>
 8006126:	bf00      	nop
 8006128:	200002dc 	.word	0x200002dc

0800612c <__malloc_unlock>:
 800612c:	4801      	ldr	r0, [pc, #4]	; (8006134 <__malloc_unlock+0x8>)
 800612e:	f000 bc14 	b.w	800695a <__retarget_lock_release_recursive>
 8006132:	bf00      	nop
 8006134:	200002dc 	.word	0x200002dc

08006138 <_realloc_r>:
 8006138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800613c:	4680      	mov	r8, r0
 800613e:	4614      	mov	r4, r2
 8006140:	460e      	mov	r6, r1
 8006142:	b921      	cbnz	r1, 800614e <_realloc_r+0x16>
 8006144:	4611      	mov	r1, r2
 8006146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800614a:	f7ff bdad 	b.w	8005ca8 <_malloc_r>
 800614e:	b92a      	cbnz	r2, 800615c <_realloc_r+0x24>
 8006150:	f7ff fd42 	bl	8005bd8 <_free_r>
 8006154:	4625      	mov	r5, r4
 8006156:	4628      	mov	r0, r5
 8006158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800615c:	f000 fc64 	bl	8006a28 <_malloc_usable_size_r>
 8006160:	4284      	cmp	r4, r0
 8006162:	4607      	mov	r7, r0
 8006164:	d802      	bhi.n	800616c <_realloc_r+0x34>
 8006166:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800616a:	d812      	bhi.n	8006192 <_realloc_r+0x5a>
 800616c:	4621      	mov	r1, r4
 800616e:	4640      	mov	r0, r8
 8006170:	f7ff fd9a 	bl	8005ca8 <_malloc_r>
 8006174:	4605      	mov	r5, r0
 8006176:	2800      	cmp	r0, #0
 8006178:	d0ed      	beq.n	8006156 <_realloc_r+0x1e>
 800617a:	42bc      	cmp	r4, r7
 800617c:	4622      	mov	r2, r4
 800617e:	4631      	mov	r1, r6
 8006180:	bf28      	it	cs
 8006182:	463a      	movcs	r2, r7
 8006184:	f7ff f984 	bl	8005490 <memcpy>
 8006188:	4631      	mov	r1, r6
 800618a:	4640      	mov	r0, r8
 800618c:	f7ff fd24 	bl	8005bd8 <_free_r>
 8006190:	e7e1      	b.n	8006156 <_realloc_r+0x1e>
 8006192:	4635      	mov	r5, r6
 8006194:	e7df      	b.n	8006156 <_realloc_r+0x1e>

08006196 <__sfputc_r>:
 8006196:	6893      	ldr	r3, [r2, #8]
 8006198:	b410      	push	{r4}
 800619a:	3b01      	subs	r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	6093      	str	r3, [r2, #8]
 80061a0:	da07      	bge.n	80061b2 <__sfputc_r+0x1c>
 80061a2:	6994      	ldr	r4, [r2, #24]
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	db01      	blt.n	80061ac <__sfputc_r+0x16>
 80061a8:	290a      	cmp	r1, #10
 80061aa:	d102      	bne.n	80061b2 <__sfputc_r+0x1c>
 80061ac:	bc10      	pop	{r4}
 80061ae:	f000 b949 	b.w	8006444 <__swbuf_r>
 80061b2:	6813      	ldr	r3, [r2, #0]
 80061b4:	1c58      	adds	r0, r3, #1
 80061b6:	6010      	str	r0, [r2, #0]
 80061b8:	7019      	strb	r1, [r3, #0]
 80061ba:	4608      	mov	r0, r1
 80061bc:	bc10      	pop	{r4}
 80061be:	4770      	bx	lr

080061c0 <__sfputs_r>:
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	4606      	mov	r6, r0
 80061c4:	460f      	mov	r7, r1
 80061c6:	4614      	mov	r4, r2
 80061c8:	18d5      	adds	r5, r2, r3
 80061ca:	42ac      	cmp	r4, r5
 80061cc:	d101      	bne.n	80061d2 <__sfputs_r+0x12>
 80061ce:	2000      	movs	r0, #0
 80061d0:	e007      	b.n	80061e2 <__sfputs_r+0x22>
 80061d2:	463a      	mov	r2, r7
 80061d4:	4630      	mov	r0, r6
 80061d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061da:	f7ff ffdc 	bl	8006196 <__sfputc_r>
 80061de:	1c43      	adds	r3, r0, #1
 80061e0:	d1f3      	bne.n	80061ca <__sfputs_r+0xa>
 80061e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061e4 <_vfiprintf_r>:
 80061e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e8:	460d      	mov	r5, r1
 80061ea:	4614      	mov	r4, r2
 80061ec:	4698      	mov	r8, r3
 80061ee:	4606      	mov	r6, r0
 80061f0:	b09d      	sub	sp, #116	; 0x74
 80061f2:	b118      	cbz	r0, 80061fc <_vfiprintf_r+0x18>
 80061f4:	6983      	ldr	r3, [r0, #24]
 80061f6:	b90b      	cbnz	r3, 80061fc <_vfiprintf_r+0x18>
 80061f8:	f000 fb10 	bl	800681c <__sinit>
 80061fc:	4b89      	ldr	r3, [pc, #548]	; (8006424 <_vfiprintf_r+0x240>)
 80061fe:	429d      	cmp	r5, r3
 8006200:	d11b      	bne.n	800623a <_vfiprintf_r+0x56>
 8006202:	6875      	ldr	r5, [r6, #4]
 8006204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006206:	07d9      	lsls	r1, r3, #31
 8006208:	d405      	bmi.n	8006216 <_vfiprintf_r+0x32>
 800620a:	89ab      	ldrh	r3, [r5, #12]
 800620c:	059a      	lsls	r2, r3, #22
 800620e:	d402      	bmi.n	8006216 <_vfiprintf_r+0x32>
 8006210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006212:	f000 fba1 	bl	8006958 <__retarget_lock_acquire_recursive>
 8006216:	89ab      	ldrh	r3, [r5, #12]
 8006218:	071b      	lsls	r3, r3, #28
 800621a:	d501      	bpl.n	8006220 <_vfiprintf_r+0x3c>
 800621c:	692b      	ldr	r3, [r5, #16]
 800621e:	b9eb      	cbnz	r3, 800625c <_vfiprintf_r+0x78>
 8006220:	4629      	mov	r1, r5
 8006222:	4630      	mov	r0, r6
 8006224:	f000 f96e 	bl	8006504 <__swsetup_r>
 8006228:	b1c0      	cbz	r0, 800625c <_vfiprintf_r+0x78>
 800622a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800622c:	07dc      	lsls	r4, r3, #31
 800622e:	d50e      	bpl.n	800624e <_vfiprintf_r+0x6a>
 8006230:	f04f 30ff 	mov.w	r0, #4294967295
 8006234:	b01d      	add	sp, #116	; 0x74
 8006236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623a:	4b7b      	ldr	r3, [pc, #492]	; (8006428 <_vfiprintf_r+0x244>)
 800623c:	429d      	cmp	r5, r3
 800623e:	d101      	bne.n	8006244 <_vfiprintf_r+0x60>
 8006240:	68b5      	ldr	r5, [r6, #8]
 8006242:	e7df      	b.n	8006204 <_vfiprintf_r+0x20>
 8006244:	4b79      	ldr	r3, [pc, #484]	; (800642c <_vfiprintf_r+0x248>)
 8006246:	429d      	cmp	r5, r3
 8006248:	bf08      	it	eq
 800624a:	68f5      	ldreq	r5, [r6, #12]
 800624c:	e7da      	b.n	8006204 <_vfiprintf_r+0x20>
 800624e:	89ab      	ldrh	r3, [r5, #12]
 8006250:	0598      	lsls	r0, r3, #22
 8006252:	d4ed      	bmi.n	8006230 <_vfiprintf_r+0x4c>
 8006254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006256:	f000 fb80 	bl	800695a <__retarget_lock_release_recursive>
 800625a:	e7e9      	b.n	8006230 <_vfiprintf_r+0x4c>
 800625c:	2300      	movs	r3, #0
 800625e:	9309      	str	r3, [sp, #36]	; 0x24
 8006260:	2320      	movs	r3, #32
 8006262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006266:	2330      	movs	r3, #48	; 0x30
 8006268:	f04f 0901 	mov.w	r9, #1
 800626c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006270:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006430 <_vfiprintf_r+0x24c>
 8006274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006278:	4623      	mov	r3, r4
 800627a:	469a      	mov	sl, r3
 800627c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006280:	b10a      	cbz	r2, 8006286 <_vfiprintf_r+0xa2>
 8006282:	2a25      	cmp	r2, #37	; 0x25
 8006284:	d1f9      	bne.n	800627a <_vfiprintf_r+0x96>
 8006286:	ebba 0b04 	subs.w	fp, sl, r4
 800628a:	d00b      	beq.n	80062a4 <_vfiprintf_r+0xc0>
 800628c:	465b      	mov	r3, fp
 800628e:	4622      	mov	r2, r4
 8006290:	4629      	mov	r1, r5
 8006292:	4630      	mov	r0, r6
 8006294:	f7ff ff94 	bl	80061c0 <__sfputs_r>
 8006298:	3001      	adds	r0, #1
 800629a:	f000 80aa 	beq.w	80063f2 <_vfiprintf_r+0x20e>
 800629e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062a0:	445a      	add	r2, fp
 80062a2:	9209      	str	r2, [sp, #36]	; 0x24
 80062a4:	f89a 3000 	ldrb.w	r3, [sl]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 80a2 	beq.w	80063f2 <_vfiprintf_r+0x20e>
 80062ae:	2300      	movs	r3, #0
 80062b0:	f04f 32ff 	mov.w	r2, #4294967295
 80062b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062b8:	f10a 0a01 	add.w	sl, sl, #1
 80062bc:	9304      	str	r3, [sp, #16]
 80062be:	9307      	str	r3, [sp, #28]
 80062c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062c4:	931a      	str	r3, [sp, #104]	; 0x68
 80062c6:	4654      	mov	r4, sl
 80062c8:	2205      	movs	r2, #5
 80062ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ce:	4858      	ldr	r0, [pc, #352]	; (8006430 <_vfiprintf_r+0x24c>)
 80062d0:	f7ff f8d0 	bl	8005474 <memchr>
 80062d4:	9a04      	ldr	r2, [sp, #16]
 80062d6:	b9d8      	cbnz	r0, 8006310 <_vfiprintf_r+0x12c>
 80062d8:	06d1      	lsls	r1, r2, #27
 80062da:	bf44      	itt	mi
 80062dc:	2320      	movmi	r3, #32
 80062de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062e2:	0713      	lsls	r3, r2, #28
 80062e4:	bf44      	itt	mi
 80062e6:	232b      	movmi	r3, #43	; 0x2b
 80062e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ec:	f89a 3000 	ldrb.w	r3, [sl]
 80062f0:	2b2a      	cmp	r3, #42	; 0x2a
 80062f2:	d015      	beq.n	8006320 <_vfiprintf_r+0x13c>
 80062f4:	4654      	mov	r4, sl
 80062f6:	2000      	movs	r0, #0
 80062f8:	f04f 0c0a 	mov.w	ip, #10
 80062fc:	9a07      	ldr	r2, [sp, #28]
 80062fe:	4621      	mov	r1, r4
 8006300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006304:	3b30      	subs	r3, #48	; 0x30
 8006306:	2b09      	cmp	r3, #9
 8006308:	d94e      	bls.n	80063a8 <_vfiprintf_r+0x1c4>
 800630a:	b1b0      	cbz	r0, 800633a <_vfiprintf_r+0x156>
 800630c:	9207      	str	r2, [sp, #28]
 800630e:	e014      	b.n	800633a <_vfiprintf_r+0x156>
 8006310:	eba0 0308 	sub.w	r3, r0, r8
 8006314:	fa09 f303 	lsl.w	r3, r9, r3
 8006318:	4313      	orrs	r3, r2
 800631a:	46a2      	mov	sl, r4
 800631c:	9304      	str	r3, [sp, #16]
 800631e:	e7d2      	b.n	80062c6 <_vfiprintf_r+0xe2>
 8006320:	9b03      	ldr	r3, [sp, #12]
 8006322:	1d19      	adds	r1, r3, #4
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	9103      	str	r1, [sp, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	bfbb      	ittet	lt
 800632c:	425b      	neglt	r3, r3
 800632e:	f042 0202 	orrlt.w	r2, r2, #2
 8006332:	9307      	strge	r3, [sp, #28]
 8006334:	9307      	strlt	r3, [sp, #28]
 8006336:	bfb8      	it	lt
 8006338:	9204      	strlt	r2, [sp, #16]
 800633a:	7823      	ldrb	r3, [r4, #0]
 800633c:	2b2e      	cmp	r3, #46	; 0x2e
 800633e:	d10c      	bne.n	800635a <_vfiprintf_r+0x176>
 8006340:	7863      	ldrb	r3, [r4, #1]
 8006342:	2b2a      	cmp	r3, #42	; 0x2a
 8006344:	d135      	bne.n	80063b2 <_vfiprintf_r+0x1ce>
 8006346:	9b03      	ldr	r3, [sp, #12]
 8006348:	3402      	adds	r4, #2
 800634a:	1d1a      	adds	r2, r3, #4
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	9203      	str	r2, [sp, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	bfb8      	it	lt
 8006354:	f04f 33ff 	movlt.w	r3, #4294967295
 8006358:	9305      	str	r3, [sp, #20]
 800635a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006434 <_vfiprintf_r+0x250>
 800635e:	2203      	movs	r2, #3
 8006360:	4650      	mov	r0, sl
 8006362:	7821      	ldrb	r1, [r4, #0]
 8006364:	f7ff f886 	bl	8005474 <memchr>
 8006368:	b140      	cbz	r0, 800637c <_vfiprintf_r+0x198>
 800636a:	2340      	movs	r3, #64	; 0x40
 800636c:	eba0 000a 	sub.w	r0, r0, sl
 8006370:	fa03 f000 	lsl.w	r0, r3, r0
 8006374:	9b04      	ldr	r3, [sp, #16]
 8006376:	3401      	adds	r4, #1
 8006378:	4303      	orrs	r3, r0
 800637a:	9304      	str	r3, [sp, #16]
 800637c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006380:	2206      	movs	r2, #6
 8006382:	482d      	ldr	r0, [pc, #180]	; (8006438 <_vfiprintf_r+0x254>)
 8006384:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006388:	f7ff f874 	bl	8005474 <memchr>
 800638c:	2800      	cmp	r0, #0
 800638e:	d03f      	beq.n	8006410 <_vfiprintf_r+0x22c>
 8006390:	4b2a      	ldr	r3, [pc, #168]	; (800643c <_vfiprintf_r+0x258>)
 8006392:	bb1b      	cbnz	r3, 80063dc <_vfiprintf_r+0x1f8>
 8006394:	9b03      	ldr	r3, [sp, #12]
 8006396:	3307      	adds	r3, #7
 8006398:	f023 0307 	bic.w	r3, r3, #7
 800639c:	3308      	adds	r3, #8
 800639e:	9303      	str	r3, [sp, #12]
 80063a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a2:	443b      	add	r3, r7
 80063a4:	9309      	str	r3, [sp, #36]	; 0x24
 80063a6:	e767      	b.n	8006278 <_vfiprintf_r+0x94>
 80063a8:	460c      	mov	r4, r1
 80063aa:	2001      	movs	r0, #1
 80063ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80063b0:	e7a5      	b.n	80062fe <_vfiprintf_r+0x11a>
 80063b2:	2300      	movs	r3, #0
 80063b4:	f04f 0c0a 	mov.w	ip, #10
 80063b8:	4619      	mov	r1, r3
 80063ba:	3401      	adds	r4, #1
 80063bc:	9305      	str	r3, [sp, #20]
 80063be:	4620      	mov	r0, r4
 80063c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063c4:	3a30      	subs	r2, #48	; 0x30
 80063c6:	2a09      	cmp	r2, #9
 80063c8:	d903      	bls.n	80063d2 <_vfiprintf_r+0x1ee>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0c5      	beq.n	800635a <_vfiprintf_r+0x176>
 80063ce:	9105      	str	r1, [sp, #20]
 80063d0:	e7c3      	b.n	800635a <_vfiprintf_r+0x176>
 80063d2:	4604      	mov	r4, r0
 80063d4:	2301      	movs	r3, #1
 80063d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80063da:	e7f0      	b.n	80063be <_vfiprintf_r+0x1da>
 80063dc:	ab03      	add	r3, sp, #12
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	462a      	mov	r2, r5
 80063e2:	4630      	mov	r0, r6
 80063e4:	4b16      	ldr	r3, [pc, #88]	; (8006440 <_vfiprintf_r+0x25c>)
 80063e6:	a904      	add	r1, sp, #16
 80063e8:	f7fd fdda 	bl	8003fa0 <_printf_float>
 80063ec:	4607      	mov	r7, r0
 80063ee:	1c78      	adds	r0, r7, #1
 80063f0:	d1d6      	bne.n	80063a0 <_vfiprintf_r+0x1bc>
 80063f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063f4:	07d9      	lsls	r1, r3, #31
 80063f6:	d405      	bmi.n	8006404 <_vfiprintf_r+0x220>
 80063f8:	89ab      	ldrh	r3, [r5, #12]
 80063fa:	059a      	lsls	r2, r3, #22
 80063fc:	d402      	bmi.n	8006404 <_vfiprintf_r+0x220>
 80063fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006400:	f000 faab 	bl	800695a <__retarget_lock_release_recursive>
 8006404:	89ab      	ldrh	r3, [r5, #12]
 8006406:	065b      	lsls	r3, r3, #25
 8006408:	f53f af12 	bmi.w	8006230 <_vfiprintf_r+0x4c>
 800640c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800640e:	e711      	b.n	8006234 <_vfiprintf_r+0x50>
 8006410:	ab03      	add	r3, sp, #12
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	462a      	mov	r2, r5
 8006416:	4630      	mov	r0, r6
 8006418:	4b09      	ldr	r3, [pc, #36]	; (8006440 <_vfiprintf_r+0x25c>)
 800641a:	a904      	add	r1, sp, #16
 800641c:	f7fe f85c 	bl	80044d8 <_printf_i>
 8006420:	e7e4      	b.n	80063ec <_vfiprintf_r+0x208>
 8006422:	bf00      	nop
 8006424:	0800713c 	.word	0x0800713c
 8006428:	0800715c 	.word	0x0800715c
 800642c:	0800711c 	.word	0x0800711c
 8006430:	08006fc4 	.word	0x08006fc4
 8006434:	08006fca 	.word	0x08006fca
 8006438:	08006fce 	.word	0x08006fce
 800643c:	08003fa1 	.word	0x08003fa1
 8006440:	080061c1 	.word	0x080061c1

08006444 <__swbuf_r>:
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	460e      	mov	r6, r1
 8006448:	4614      	mov	r4, r2
 800644a:	4605      	mov	r5, r0
 800644c:	b118      	cbz	r0, 8006456 <__swbuf_r+0x12>
 800644e:	6983      	ldr	r3, [r0, #24]
 8006450:	b90b      	cbnz	r3, 8006456 <__swbuf_r+0x12>
 8006452:	f000 f9e3 	bl	800681c <__sinit>
 8006456:	4b21      	ldr	r3, [pc, #132]	; (80064dc <__swbuf_r+0x98>)
 8006458:	429c      	cmp	r4, r3
 800645a:	d12b      	bne.n	80064b4 <__swbuf_r+0x70>
 800645c:	686c      	ldr	r4, [r5, #4]
 800645e:	69a3      	ldr	r3, [r4, #24]
 8006460:	60a3      	str	r3, [r4, #8]
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	071a      	lsls	r2, r3, #28
 8006466:	d52f      	bpl.n	80064c8 <__swbuf_r+0x84>
 8006468:	6923      	ldr	r3, [r4, #16]
 800646a:	b36b      	cbz	r3, 80064c8 <__swbuf_r+0x84>
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	6820      	ldr	r0, [r4, #0]
 8006470:	b2f6      	uxtb	r6, r6
 8006472:	1ac0      	subs	r0, r0, r3
 8006474:	6963      	ldr	r3, [r4, #20]
 8006476:	4637      	mov	r7, r6
 8006478:	4283      	cmp	r3, r0
 800647a:	dc04      	bgt.n	8006486 <__swbuf_r+0x42>
 800647c:	4621      	mov	r1, r4
 800647e:	4628      	mov	r0, r5
 8006480:	f000 f938 	bl	80066f4 <_fflush_r>
 8006484:	bb30      	cbnz	r0, 80064d4 <__swbuf_r+0x90>
 8006486:	68a3      	ldr	r3, [r4, #8]
 8006488:	3001      	adds	r0, #1
 800648a:	3b01      	subs	r3, #1
 800648c:	60a3      	str	r3, [r4, #8]
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	6022      	str	r2, [r4, #0]
 8006494:	701e      	strb	r6, [r3, #0]
 8006496:	6963      	ldr	r3, [r4, #20]
 8006498:	4283      	cmp	r3, r0
 800649a:	d004      	beq.n	80064a6 <__swbuf_r+0x62>
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	07db      	lsls	r3, r3, #31
 80064a0:	d506      	bpl.n	80064b0 <__swbuf_r+0x6c>
 80064a2:	2e0a      	cmp	r6, #10
 80064a4:	d104      	bne.n	80064b0 <__swbuf_r+0x6c>
 80064a6:	4621      	mov	r1, r4
 80064a8:	4628      	mov	r0, r5
 80064aa:	f000 f923 	bl	80066f4 <_fflush_r>
 80064ae:	b988      	cbnz	r0, 80064d4 <__swbuf_r+0x90>
 80064b0:	4638      	mov	r0, r7
 80064b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b4:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <__swbuf_r+0x9c>)
 80064b6:	429c      	cmp	r4, r3
 80064b8:	d101      	bne.n	80064be <__swbuf_r+0x7a>
 80064ba:	68ac      	ldr	r4, [r5, #8]
 80064bc:	e7cf      	b.n	800645e <__swbuf_r+0x1a>
 80064be:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <__swbuf_r+0xa0>)
 80064c0:	429c      	cmp	r4, r3
 80064c2:	bf08      	it	eq
 80064c4:	68ec      	ldreq	r4, [r5, #12]
 80064c6:	e7ca      	b.n	800645e <__swbuf_r+0x1a>
 80064c8:	4621      	mov	r1, r4
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 f81a 	bl	8006504 <__swsetup_r>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d0cb      	beq.n	800646c <__swbuf_r+0x28>
 80064d4:	f04f 37ff 	mov.w	r7, #4294967295
 80064d8:	e7ea      	b.n	80064b0 <__swbuf_r+0x6c>
 80064da:	bf00      	nop
 80064dc:	0800713c 	.word	0x0800713c
 80064e0:	0800715c 	.word	0x0800715c
 80064e4:	0800711c 	.word	0x0800711c

080064e8 <__ascii_wctomb>:
 80064e8:	4603      	mov	r3, r0
 80064ea:	4608      	mov	r0, r1
 80064ec:	b141      	cbz	r1, 8006500 <__ascii_wctomb+0x18>
 80064ee:	2aff      	cmp	r2, #255	; 0xff
 80064f0:	d904      	bls.n	80064fc <__ascii_wctomb+0x14>
 80064f2:	228a      	movs	r2, #138	; 0x8a
 80064f4:	f04f 30ff 	mov.w	r0, #4294967295
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	4770      	bx	lr
 80064fc:	2001      	movs	r0, #1
 80064fe:	700a      	strb	r2, [r1, #0]
 8006500:	4770      	bx	lr
	...

08006504 <__swsetup_r>:
 8006504:	4b32      	ldr	r3, [pc, #200]	; (80065d0 <__swsetup_r+0xcc>)
 8006506:	b570      	push	{r4, r5, r6, lr}
 8006508:	681d      	ldr	r5, [r3, #0]
 800650a:	4606      	mov	r6, r0
 800650c:	460c      	mov	r4, r1
 800650e:	b125      	cbz	r5, 800651a <__swsetup_r+0x16>
 8006510:	69ab      	ldr	r3, [r5, #24]
 8006512:	b913      	cbnz	r3, 800651a <__swsetup_r+0x16>
 8006514:	4628      	mov	r0, r5
 8006516:	f000 f981 	bl	800681c <__sinit>
 800651a:	4b2e      	ldr	r3, [pc, #184]	; (80065d4 <__swsetup_r+0xd0>)
 800651c:	429c      	cmp	r4, r3
 800651e:	d10f      	bne.n	8006540 <__swsetup_r+0x3c>
 8006520:	686c      	ldr	r4, [r5, #4]
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006528:	0719      	lsls	r1, r3, #28
 800652a:	d42c      	bmi.n	8006586 <__swsetup_r+0x82>
 800652c:	06dd      	lsls	r5, r3, #27
 800652e:	d411      	bmi.n	8006554 <__swsetup_r+0x50>
 8006530:	2309      	movs	r3, #9
 8006532:	6033      	str	r3, [r6, #0]
 8006534:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006538:	f04f 30ff 	mov.w	r0, #4294967295
 800653c:	81a3      	strh	r3, [r4, #12]
 800653e:	e03e      	b.n	80065be <__swsetup_r+0xba>
 8006540:	4b25      	ldr	r3, [pc, #148]	; (80065d8 <__swsetup_r+0xd4>)
 8006542:	429c      	cmp	r4, r3
 8006544:	d101      	bne.n	800654a <__swsetup_r+0x46>
 8006546:	68ac      	ldr	r4, [r5, #8]
 8006548:	e7eb      	b.n	8006522 <__swsetup_r+0x1e>
 800654a:	4b24      	ldr	r3, [pc, #144]	; (80065dc <__swsetup_r+0xd8>)
 800654c:	429c      	cmp	r4, r3
 800654e:	bf08      	it	eq
 8006550:	68ec      	ldreq	r4, [r5, #12]
 8006552:	e7e6      	b.n	8006522 <__swsetup_r+0x1e>
 8006554:	0758      	lsls	r0, r3, #29
 8006556:	d512      	bpl.n	800657e <__swsetup_r+0x7a>
 8006558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800655a:	b141      	cbz	r1, 800656e <__swsetup_r+0x6a>
 800655c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006560:	4299      	cmp	r1, r3
 8006562:	d002      	beq.n	800656a <__swsetup_r+0x66>
 8006564:	4630      	mov	r0, r6
 8006566:	f7ff fb37 	bl	8005bd8 <_free_r>
 800656a:	2300      	movs	r3, #0
 800656c:	6363      	str	r3, [r4, #52]	; 0x34
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006574:	81a3      	strh	r3, [r4, #12]
 8006576:	2300      	movs	r3, #0
 8006578:	6063      	str	r3, [r4, #4]
 800657a:	6923      	ldr	r3, [r4, #16]
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	89a3      	ldrh	r3, [r4, #12]
 8006580:	f043 0308 	orr.w	r3, r3, #8
 8006584:	81a3      	strh	r3, [r4, #12]
 8006586:	6923      	ldr	r3, [r4, #16]
 8006588:	b94b      	cbnz	r3, 800659e <__swsetup_r+0x9a>
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006594:	d003      	beq.n	800659e <__swsetup_r+0x9a>
 8006596:	4621      	mov	r1, r4
 8006598:	4630      	mov	r0, r6
 800659a:	f000 fa05 	bl	80069a8 <__smakebuf_r>
 800659e:	89a0      	ldrh	r0, [r4, #12]
 80065a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065a4:	f010 0301 	ands.w	r3, r0, #1
 80065a8:	d00a      	beq.n	80065c0 <__swsetup_r+0xbc>
 80065aa:	2300      	movs	r3, #0
 80065ac:	60a3      	str	r3, [r4, #8]
 80065ae:	6963      	ldr	r3, [r4, #20]
 80065b0:	425b      	negs	r3, r3
 80065b2:	61a3      	str	r3, [r4, #24]
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	b943      	cbnz	r3, 80065ca <__swsetup_r+0xc6>
 80065b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065bc:	d1ba      	bne.n	8006534 <__swsetup_r+0x30>
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	0781      	lsls	r1, r0, #30
 80065c2:	bf58      	it	pl
 80065c4:	6963      	ldrpl	r3, [r4, #20]
 80065c6:	60a3      	str	r3, [r4, #8]
 80065c8:	e7f4      	b.n	80065b4 <__swsetup_r+0xb0>
 80065ca:	2000      	movs	r0, #0
 80065cc:	e7f7      	b.n	80065be <__swsetup_r+0xba>
 80065ce:	bf00      	nop
 80065d0:	20000028 	.word	0x20000028
 80065d4:	0800713c 	.word	0x0800713c
 80065d8:	0800715c 	.word	0x0800715c
 80065dc:	0800711c 	.word	0x0800711c

080065e0 <abort>:
 80065e0:	2006      	movs	r0, #6
 80065e2:	b508      	push	{r3, lr}
 80065e4:	f000 fa50 	bl	8006a88 <raise>
 80065e8:	2001      	movs	r0, #1
 80065ea:	f7fa ff47 	bl	800147c <_exit>
	...

080065f0 <__sflush_r>:
 80065f0:	898a      	ldrh	r2, [r1, #12]
 80065f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f4:	4605      	mov	r5, r0
 80065f6:	0710      	lsls	r0, r2, #28
 80065f8:	460c      	mov	r4, r1
 80065fa:	d457      	bmi.n	80066ac <__sflush_r+0xbc>
 80065fc:	684b      	ldr	r3, [r1, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	dc04      	bgt.n	800660c <__sflush_r+0x1c>
 8006602:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006604:	2b00      	cmp	r3, #0
 8006606:	dc01      	bgt.n	800660c <__sflush_r+0x1c>
 8006608:	2000      	movs	r0, #0
 800660a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800660c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800660e:	2e00      	cmp	r6, #0
 8006610:	d0fa      	beq.n	8006608 <__sflush_r+0x18>
 8006612:	2300      	movs	r3, #0
 8006614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006618:	682f      	ldr	r7, [r5, #0]
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	d032      	beq.n	8006684 <__sflush_r+0x94>
 800661e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	075a      	lsls	r2, r3, #29
 8006624:	d505      	bpl.n	8006632 <__sflush_r+0x42>
 8006626:	6863      	ldr	r3, [r4, #4]
 8006628:	1ac0      	subs	r0, r0, r3
 800662a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800662c:	b10b      	cbz	r3, 8006632 <__sflush_r+0x42>
 800662e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006630:	1ac0      	subs	r0, r0, r3
 8006632:	2300      	movs	r3, #0
 8006634:	4602      	mov	r2, r0
 8006636:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006638:	4628      	mov	r0, r5
 800663a:	6a21      	ldr	r1, [r4, #32]
 800663c:	47b0      	blx	r6
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	d106      	bne.n	8006652 <__sflush_r+0x62>
 8006644:	6829      	ldr	r1, [r5, #0]
 8006646:	291d      	cmp	r1, #29
 8006648:	d82c      	bhi.n	80066a4 <__sflush_r+0xb4>
 800664a:	4a29      	ldr	r2, [pc, #164]	; (80066f0 <__sflush_r+0x100>)
 800664c:	40ca      	lsrs	r2, r1
 800664e:	07d6      	lsls	r6, r2, #31
 8006650:	d528      	bpl.n	80066a4 <__sflush_r+0xb4>
 8006652:	2200      	movs	r2, #0
 8006654:	6062      	str	r2, [r4, #4]
 8006656:	6922      	ldr	r2, [r4, #16]
 8006658:	04d9      	lsls	r1, r3, #19
 800665a:	6022      	str	r2, [r4, #0]
 800665c:	d504      	bpl.n	8006668 <__sflush_r+0x78>
 800665e:	1c42      	adds	r2, r0, #1
 8006660:	d101      	bne.n	8006666 <__sflush_r+0x76>
 8006662:	682b      	ldr	r3, [r5, #0]
 8006664:	b903      	cbnz	r3, 8006668 <__sflush_r+0x78>
 8006666:	6560      	str	r0, [r4, #84]	; 0x54
 8006668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800666a:	602f      	str	r7, [r5, #0]
 800666c:	2900      	cmp	r1, #0
 800666e:	d0cb      	beq.n	8006608 <__sflush_r+0x18>
 8006670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006674:	4299      	cmp	r1, r3
 8006676:	d002      	beq.n	800667e <__sflush_r+0x8e>
 8006678:	4628      	mov	r0, r5
 800667a:	f7ff faad 	bl	8005bd8 <_free_r>
 800667e:	2000      	movs	r0, #0
 8006680:	6360      	str	r0, [r4, #52]	; 0x34
 8006682:	e7c2      	b.n	800660a <__sflush_r+0x1a>
 8006684:	6a21      	ldr	r1, [r4, #32]
 8006686:	2301      	movs	r3, #1
 8006688:	4628      	mov	r0, r5
 800668a:	47b0      	blx	r6
 800668c:	1c41      	adds	r1, r0, #1
 800668e:	d1c7      	bne.n	8006620 <__sflush_r+0x30>
 8006690:	682b      	ldr	r3, [r5, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0c4      	beq.n	8006620 <__sflush_r+0x30>
 8006696:	2b1d      	cmp	r3, #29
 8006698:	d001      	beq.n	800669e <__sflush_r+0xae>
 800669a:	2b16      	cmp	r3, #22
 800669c:	d101      	bne.n	80066a2 <__sflush_r+0xb2>
 800669e:	602f      	str	r7, [r5, #0]
 80066a0:	e7b2      	b.n	8006608 <__sflush_r+0x18>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a8:	81a3      	strh	r3, [r4, #12]
 80066aa:	e7ae      	b.n	800660a <__sflush_r+0x1a>
 80066ac:	690f      	ldr	r7, [r1, #16]
 80066ae:	2f00      	cmp	r7, #0
 80066b0:	d0aa      	beq.n	8006608 <__sflush_r+0x18>
 80066b2:	0793      	lsls	r3, r2, #30
 80066b4:	bf18      	it	ne
 80066b6:	2300      	movne	r3, #0
 80066b8:	680e      	ldr	r6, [r1, #0]
 80066ba:	bf08      	it	eq
 80066bc:	694b      	ldreq	r3, [r1, #20]
 80066be:	1bf6      	subs	r6, r6, r7
 80066c0:	600f      	str	r7, [r1, #0]
 80066c2:	608b      	str	r3, [r1, #8]
 80066c4:	2e00      	cmp	r6, #0
 80066c6:	dd9f      	ble.n	8006608 <__sflush_r+0x18>
 80066c8:	4633      	mov	r3, r6
 80066ca:	463a      	mov	r2, r7
 80066cc:	4628      	mov	r0, r5
 80066ce:	6a21      	ldr	r1, [r4, #32]
 80066d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80066d4:	47e0      	blx	ip
 80066d6:	2800      	cmp	r0, #0
 80066d8:	dc06      	bgt.n	80066e8 <__sflush_r+0xf8>
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e4:	81a3      	strh	r3, [r4, #12]
 80066e6:	e790      	b.n	800660a <__sflush_r+0x1a>
 80066e8:	4407      	add	r7, r0
 80066ea:	1a36      	subs	r6, r6, r0
 80066ec:	e7ea      	b.n	80066c4 <__sflush_r+0xd4>
 80066ee:	bf00      	nop
 80066f0:	20400001 	.word	0x20400001

080066f4 <_fflush_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	690b      	ldr	r3, [r1, #16]
 80066f8:	4605      	mov	r5, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	b913      	cbnz	r3, 8006704 <_fflush_r+0x10>
 80066fe:	2500      	movs	r5, #0
 8006700:	4628      	mov	r0, r5
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	b118      	cbz	r0, 800670e <_fflush_r+0x1a>
 8006706:	6983      	ldr	r3, [r0, #24]
 8006708:	b90b      	cbnz	r3, 800670e <_fflush_r+0x1a>
 800670a:	f000 f887 	bl	800681c <__sinit>
 800670e:	4b14      	ldr	r3, [pc, #80]	; (8006760 <_fflush_r+0x6c>)
 8006710:	429c      	cmp	r4, r3
 8006712:	d11b      	bne.n	800674c <_fflush_r+0x58>
 8006714:	686c      	ldr	r4, [r5, #4]
 8006716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0ef      	beq.n	80066fe <_fflush_r+0xa>
 800671e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006720:	07d0      	lsls	r0, r2, #31
 8006722:	d404      	bmi.n	800672e <_fflush_r+0x3a>
 8006724:	0599      	lsls	r1, r3, #22
 8006726:	d402      	bmi.n	800672e <_fflush_r+0x3a>
 8006728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800672a:	f000 f915 	bl	8006958 <__retarget_lock_acquire_recursive>
 800672e:	4628      	mov	r0, r5
 8006730:	4621      	mov	r1, r4
 8006732:	f7ff ff5d 	bl	80065f0 <__sflush_r>
 8006736:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006738:	4605      	mov	r5, r0
 800673a:	07da      	lsls	r2, r3, #31
 800673c:	d4e0      	bmi.n	8006700 <_fflush_r+0xc>
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	059b      	lsls	r3, r3, #22
 8006742:	d4dd      	bmi.n	8006700 <_fflush_r+0xc>
 8006744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006746:	f000 f908 	bl	800695a <__retarget_lock_release_recursive>
 800674a:	e7d9      	b.n	8006700 <_fflush_r+0xc>
 800674c:	4b05      	ldr	r3, [pc, #20]	; (8006764 <_fflush_r+0x70>)
 800674e:	429c      	cmp	r4, r3
 8006750:	d101      	bne.n	8006756 <_fflush_r+0x62>
 8006752:	68ac      	ldr	r4, [r5, #8]
 8006754:	e7df      	b.n	8006716 <_fflush_r+0x22>
 8006756:	4b04      	ldr	r3, [pc, #16]	; (8006768 <_fflush_r+0x74>)
 8006758:	429c      	cmp	r4, r3
 800675a:	bf08      	it	eq
 800675c:	68ec      	ldreq	r4, [r5, #12]
 800675e:	e7da      	b.n	8006716 <_fflush_r+0x22>
 8006760:	0800713c 	.word	0x0800713c
 8006764:	0800715c 	.word	0x0800715c
 8006768:	0800711c 	.word	0x0800711c

0800676c <std>:
 800676c:	2300      	movs	r3, #0
 800676e:	b510      	push	{r4, lr}
 8006770:	4604      	mov	r4, r0
 8006772:	e9c0 3300 	strd	r3, r3, [r0]
 8006776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800677a:	6083      	str	r3, [r0, #8]
 800677c:	8181      	strh	r1, [r0, #12]
 800677e:	6643      	str	r3, [r0, #100]	; 0x64
 8006780:	81c2      	strh	r2, [r0, #14]
 8006782:	6183      	str	r3, [r0, #24]
 8006784:	4619      	mov	r1, r3
 8006786:	2208      	movs	r2, #8
 8006788:	305c      	adds	r0, #92	; 0x5c
 800678a:	f7fd fb63 	bl	8003e54 <memset>
 800678e:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <std+0x38>)
 8006790:	6224      	str	r4, [r4, #32]
 8006792:	6263      	str	r3, [r4, #36]	; 0x24
 8006794:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <std+0x3c>)
 8006796:	62a3      	str	r3, [r4, #40]	; 0x28
 8006798:	4b04      	ldr	r3, [pc, #16]	; (80067ac <std+0x40>)
 800679a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800679c:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <std+0x44>)
 800679e:	6323      	str	r3, [r4, #48]	; 0x30
 80067a0:	bd10      	pop	{r4, pc}
 80067a2:	bf00      	nop
 80067a4:	08006ac1 	.word	0x08006ac1
 80067a8:	08006ae3 	.word	0x08006ae3
 80067ac:	08006b1b 	.word	0x08006b1b
 80067b0:	08006b3f 	.word	0x08006b3f

080067b4 <_cleanup_r>:
 80067b4:	4901      	ldr	r1, [pc, #4]	; (80067bc <_cleanup_r+0x8>)
 80067b6:	f000 b8af 	b.w	8006918 <_fwalk_reent>
 80067ba:	bf00      	nop
 80067bc:	080066f5 	.word	0x080066f5

080067c0 <__sfmoreglue>:
 80067c0:	2268      	movs	r2, #104	; 0x68
 80067c2:	b570      	push	{r4, r5, r6, lr}
 80067c4:	1e4d      	subs	r5, r1, #1
 80067c6:	4355      	muls	r5, r2
 80067c8:	460e      	mov	r6, r1
 80067ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067ce:	f7ff fa6b 	bl	8005ca8 <_malloc_r>
 80067d2:	4604      	mov	r4, r0
 80067d4:	b140      	cbz	r0, 80067e8 <__sfmoreglue+0x28>
 80067d6:	2100      	movs	r1, #0
 80067d8:	e9c0 1600 	strd	r1, r6, [r0]
 80067dc:	300c      	adds	r0, #12
 80067de:	60a0      	str	r0, [r4, #8]
 80067e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067e4:	f7fd fb36 	bl	8003e54 <memset>
 80067e8:	4620      	mov	r0, r4
 80067ea:	bd70      	pop	{r4, r5, r6, pc}

080067ec <__sfp_lock_acquire>:
 80067ec:	4801      	ldr	r0, [pc, #4]	; (80067f4 <__sfp_lock_acquire+0x8>)
 80067ee:	f000 b8b3 	b.w	8006958 <__retarget_lock_acquire_recursive>
 80067f2:	bf00      	nop
 80067f4:	200002dd 	.word	0x200002dd

080067f8 <__sfp_lock_release>:
 80067f8:	4801      	ldr	r0, [pc, #4]	; (8006800 <__sfp_lock_release+0x8>)
 80067fa:	f000 b8ae 	b.w	800695a <__retarget_lock_release_recursive>
 80067fe:	bf00      	nop
 8006800:	200002dd 	.word	0x200002dd

08006804 <__sinit_lock_acquire>:
 8006804:	4801      	ldr	r0, [pc, #4]	; (800680c <__sinit_lock_acquire+0x8>)
 8006806:	f000 b8a7 	b.w	8006958 <__retarget_lock_acquire_recursive>
 800680a:	bf00      	nop
 800680c:	200002de 	.word	0x200002de

08006810 <__sinit_lock_release>:
 8006810:	4801      	ldr	r0, [pc, #4]	; (8006818 <__sinit_lock_release+0x8>)
 8006812:	f000 b8a2 	b.w	800695a <__retarget_lock_release_recursive>
 8006816:	bf00      	nop
 8006818:	200002de 	.word	0x200002de

0800681c <__sinit>:
 800681c:	b510      	push	{r4, lr}
 800681e:	4604      	mov	r4, r0
 8006820:	f7ff fff0 	bl	8006804 <__sinit_lock_acquire>
 8006824:	69a3      	ldr	r3, [r4, #24]
 8006826:	b11b      	cbz	r3, 8006830 <__sinit+0x14>
 8006828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800682c:	f7ff bff0 	b.w	8006810 <__sinit_lock_release>
 8006830:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006834:	6523      	str	r3, [r4, #80]	; 0x50
 8006836:	4b13      	ldr	r3, [pc, #76]	; (8006884 <__sinit+0x68>)
 8006838:	4a13      	ldr	r2, [pc, #76]	; (8006888 <__sinit+0x6c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	62a2      	str	r2, [r4, #40]	; 0x28
 800683e:	42a3      	cmp	r3, r4
 8006840:	bf08      	it	eq
 8006842:	2301      	moveq	r3, #1
 8006844:	4620      	mov	r0, r4
 8006846:	bf08      	it	eq
 8006848:	61a3      	streq	r3, [r4, #24]
 800684a:	f000 f81f 	bl	800688c <__sfp>
 800684e:	6060      	str	r0, [r4, #4]
 8006850:	4620      	mov	r0, r4
 8006852:	f000 f81b 	bl	800688c <__sfp>
 8006856:	60a0      	str	r0, [r4, #8]
 8006858:	4620      	mov	r0, r4
 800685a:	f000 f817 	bl	800688c <__sfp>
 800685e:	2200      	movs	r2, #0
 8006860:	2104      	movs	r1, #4
 8006862:	60e0      	str	r0, [r4, #12]
 8006864:	6860      	ldr	r0, [r4, #4]
 8006866:	f7ff ff81 	bl	800676c <std>
 800686a:	2201      	movs	r2, #1
 800686c:	2109      	movs	r1, #9
 800686e:	68a0      	ldr	r0, [r4, #8]
 8006870:	f7ff ff7c 	bl	800676c <std>
 8006874:	2202      	movs	r2, #2
 8006876:	2112      	movs	r1, #18
 8006878:	68e0      	ldr	r0, [r4, #12]
 800687a:	f7ff ff77 	bl	800676c <std>
 800687e:	2301      	movs	r3, #1
 8006880:	61a3      	str	r3, [r4, #24]
 8006882:	e7d1      	b.n	8006828 <__sinit+0xc>
 8006884:	08006da4 	.word	0x08006da4
 8006888:	080067b5 	.word	0x080067b5

0800688c <__sfp>:
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	4607      	mov	r7, r0
 8006890:	f7ff ffac 	bl	80067ec <__sfp_lock_acquire>
 8006894:	4b1e      	ldr	r3, [pc, #120]	; (8006910 <__sfp+0x84>)
 8006896:	681e      	ldr	r6, [r3, #0]
 8006898:	69b3      	ldr	r3, [r6, #24]
 800689a:	b913      	cbnz	r3, 80068a2 <__sfp+0x16>
 800689c:	4630      	mov	r0, r6
 800689e:	f7ff ffbd 	bl	800681c <__sinit>
 80068a2:	3648      	adds	r6, #72	; 0x48
 80068a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	d503      	bpl.n	80068b4 <__sfp+0x28>
 80068ac:	6833      	ldr	r3, [r6, #0]
 80068ae:	b30b      	cbz	r3, 80068f4 <__sfp+0x68>
 80068b0:	6836      	ldr	r6, [r6, #0]
 80068b2:	e7f7      	b.n	80068a4 <__sfp+0x18>
 80068b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068b8:	b9d5      	cbnz	r5, 80068f0 <__sfp+0x64>
 80068ba:	4b16      	ldr	r3, [pc, #88]	; (8006914 <__sfp+0x88>)
 80068bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068c0:	60e3      	str	r3, [r4, #12]
 80068c2:	6665      	str	r5, [r4, #100]	; 0x64
 80068c4:	f000 f847 	bl	8006956 <__retarget_lock_init_recursive>
 80068c8:	f7ff ff96 	bl	80067f8 <__sfp_lock_release>
 80068cc:	2208      	movs	r2, #8
 80068ce:	4629      	mov	r1, r5
 80068d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068d8:	6025      	str	r5, [r4, #0]
 80068da:	61a5      	str	r5, [r4, #24]
 80068dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068e0:	f7fd fab8 	bl	8003e54 <memset>
 80068e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068ec:	4620      	mov	r0, r4
 80068ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068f0:	3468      	adds	r4, #104	; 0x68
 80068f2:	e7d9      	b.n	80068a8 <__sfp+0x1c>
 80068f4:	2104      	movs	r1, #4
 80068f6:	4638      	mov	r0, r7
 80068f8:	f7ff ff62 	bl	80067c0 <__sfmoreglue>
 80068fc:	4604      	mov	r4, r0
 80068fe:	6030      	str	r0, [r6, #0]
 8006900:	2800      	cmp	r0, #0
 8006902:	d1d5      	bne.n	80068b0 <__sfp+0x24>
 8006904:	f7ff ff78 	bl	80067f8 <__sfp_lock_release>
 8006908:	230c      	movs	r3, #12
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	e7ee      	b.n	80068ec <__sfp+0x60>
 800690e:	bf00      	nop
 8006910:	08006da4 	.word	0x08006da4
 8006914:	ffff0001 	.word	0xffff0001

08006918 <_fwalk_reent>:
 8006918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800691c:	4606      	mov	r6, r0
 800691e:	4688      	mov	r8, r1
 8006920:	2700      	movs	r7, #0
 8006922:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006926:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800692a:	f1b9 0901 	subs.w	r9, r9, #1
 800692e:	d505      	bpl.n	800693c <_fwalk_reent+0x24>
 8006930:	6824      	ldr	r4, [r4, #0]
 8006932:	2c00      	cmp	r4, #0
 8006934:	d1f7      	bne.n	8006926 <_fwalk_reent+0xe>
 8006936:	4638      	mov	r0, r7
 8006938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800693c:	89ab      	ldrh	r3, [r5, #12]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d907      	bls.n	8006952 <_fwalk_reent+0x3a>
 8006942:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006946:	3301      	adds	r3, #1
 8006948:	d003      	beq.n	8006952 <_fwalk_reent+0x3a>
 800694a:	4629      	mov	r1, r5
 800694c:	4630      	mov	r0, r6
 800694e:	47c0      	blx	r8
 8006950:	4307      	orrs	r7, r0
 8006952:	3568      	adds	r5, #104	; 0x68
 8006954:	e7e9      	b.n	800692a <_fwalk_reent+0x12>

08006956 <__retarget_lock_init_recursive>:
 8006956:	4770      	bx	lr

08006958 <__retarget_lock_acquire_recursive>:
 8006958:	4770      	bx	lr

0800695a <__retarget_lock_release_recursive>:
 800695a:	4770      	bx	lr

0800695c <__swhatbuf_r>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	460e      	mov	r6, r1
 8006960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006964:	4614      	mov	r4, r2
 8006966:	2900      	cmp	r1, #0
 8006968:	461d      	mov	r5, r3
 800696a:	b096      	sub	sp, #88	; 0x58
 800696c:	da08      	bge.n	8006980 <__swhatbuf_r+0x24>
 800696e:	2200      	movs	r2, #0
 8006970:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006974:	602a      	str	r2, [r5, #0]
 8006976:	061a      	lsls	r2, r3, #24
 8006978:	d410      	bmi.n	800699c <__swhatbuf_r+0x40>
 800697a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800697e:	e00e      	b.n	800699e <__swhatbuf_r+0x42>
 8006980:	466a      	mov	r2, sp
 8006982:	f000 f903 	bl	8006b8c <_fstat_r>
 8006986:	2800      	cmp	r0, #0
 8006988:	dbf1      	blt.n	800696e <__swhatbuf_r+0x12>
 800698a:	9a01      	ldr	r2, [sp, #4]
 800698c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006990:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006994:	425a      	negs	r2, r3
 8006996:	415a      	adcs	r2, r3
 8006998:	602a      	str	r2, [r5, #0]
 800699a:	e7ee      	b.n	800697a <__swhatbuf_r+0x1e>
 800699c:	2340      	movs	r3, #64	; 0x40
 800699e:	2000      	movs	r0, #0
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	b016      	add	sp, #88	; 0x58
 80069a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080069a8 <__smakebuf_r>:
 80069a8:	898b      	ldrh	r3, [r1, #12]
 80069aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069ac:	079d      	lsls	r5, r3, #30
 80069ae:	4606      	mov	r6, r0
 80069b0:	460c      	mov	r4, r1
 80069b2:	d507      	bpl.n	80069c4 <__smakebuf_r+0x1c>
 80069b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	6123      	str	r3, [r4, #16]
 80069bc:	2301      	movs	r3, #1
 80069be:	6163      	str	r3, [r4, #20]
 80069c0:	b002      	add	sp, #8
 80069c2:	bd70      	pop	{r4, r5, r6, pc}
 80069c4:	466a      	mov	r2, sp
 80069c6:	ab01      	add	r3, sp, #4
 80069c8:	f7ff ffc8 	bl	800695c <__swhatbuf_r>
 80069cc:	9900      	ldr	r1, [sp, #0]
 80069ce:	4605      	mov	r5, r0
 80069d0:	4630      	mov	r0, r6
 80069d2:	f7ff f969 	bl	8005ca8 <_malloc_r>
 80069d6:	b948      	cbnz	r0, 80069ec <__smakebuf_r+0x44>
 80069d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069dc:	059a      	lsls	r2, r3, #22
 80069de:	d4ef      	bmi.n	80069c0 <__smakebuf_r+0x18>
 80069e0:	f023 0303 	bic.w	r3, r3, #3
 80069e4:	f043 0302 	orr.w	r3, r3, #2
 80069e8:	81a3      	strh	r3, [r4, #12]
 80069ea:	e7e3      	b.n	80069b4 <__smakebuf_r+0xc>
 80069ec:	4b0d      	ldr	r3, [pc, #52]	; (8006a24 <__smakebuf_r+0x7c>)
 80069ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80069f0:	89a3      	ldrh	r3, [r4, #12]
 80069f2:	6020      	str	r0, [r4, #0]
 80069f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f8:	81a3      	strh	r3, [r4, #12]
 80069fa:	9b00      	ldr	r3, [sp, #0]
 80069fc:	6120      	str	r0, [r4, #16]
 80069fe:	6163      	str	r3, [r4, #20]
 8006a00:	9b01      	ldr	r3, [sp, #4]
 8006a02:	b15b      	cbz	r3, 8006a1c <__smakebuf_r+0x74>
 8006a04:	4630      	mov	r0, r6
 8006a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a0a:	f000 f8d1 	bl	8006bb0 <_isatty_r>
 8006a0e:	b128      	cbz	r0, 8006a1c <__smakebuf_r+0x74>
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	f023 0303 	bic.w	r3, r3, #3
 8006a16:	f043 0301 	orr.w	r3, r3, #1
 8006a1a:	81a3      	strh	r3, [r4, #12]
 8006a1c:	89a0      	ldrh	r0, [r4, #12]
 8006a1e:	4305      	orrs	r5, r0
 8006a20:	81a5      	strh	r5, [r4, #12]
 8006a22:	e7cd      	b.n	80069c0 <__smakebuf_r+0x18>
 8006a24:	080067b5 	.word	0x080067b5

08006a28 <_malloc_usable_size_r>:
 8006a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a2c:	1f18      	subs	r0, r3, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bfbc      	itt	lt
 8006a32:	580b      	ldrlt	r3, [r1, r0]
 8006a34:	18c0      	addlt	r0, r0, r3
 8006a36:	4770      	bx	lr

08006a38 <_raise_r>:
 8006a38:	291f      	cmp	r1, #31
 8006a3a:	b538      	push	{r3, r4, r5, lr}
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	460d      	mov	r5, r1
 8006a40:	d904      	bls.n	8006a4c <_raise_r+0x14>
 8006a42:	2316      	movs	r3, #22
 8006a44:	6003      	str	r3, [r0, #0]
 8006a46:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
 8006a4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a4e:	b112      	cbz	r2, 8006a56 <_raise_r+0x1e>
 8006a50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a54:	b94b      	cbnz	r3, 8006a6a <_raise_r+0x32>
 8006a56:	4620      	mov	r0, r4
 8006a58:	f000 f830 	bl	8006abc <_getpid_r>
 8006a5c:	462a      	mov	r2, r5
 8006a5e:	4601      	mov	r1, r0
 8006a60:	4620      	mov	r0, r4
 8006a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a66:	f000 b817 	b.w	8006a98 <_kill_r>
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d00a      	beq.n	8006a84 <_raise_r+0x4c>
 8006a6e:	1c59      	adds	r1, r3, #1
 8006a70:	d103      	bne.n	8006a7a <_raise_r+0x42>
 8006a72:	2316      	movs	r3, #22
 8006a74:	6003      	str	r3, [r0, #0]
 8006a76:	2001      	movs	r0, #1
 8006a78:	e7e7      	b.n	8006a4a <_raise_r+0x12>
 8006a7a:	2400      	movs	r4, #0
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a82:	4798      	blx	r3
 8006a84:	2000      	movs	r0, #0
 8006a86:	e7e0      	b.n	8006a4a <_raise_r+0x12>

08006a88 <raise>:
 8006a88:	4b02      	ldr	r3, [pc, #8]	; (8006a94 <raise+0xc>)
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	f7ff bfd3 	b.w	8006a38 <_raise_r>
 8006a92:	bf00      	nop
 8006a94:	20000028 	.word	0x20000028

08006a98 <_kill_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	4d06      	ldr	r5, [pc, #24]	; (8006ab8 <_kill_r+0x20>)
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	602b      	str	r3, [r5, #0]
 8006aa6:	f7fa fcd9 	bl	800145c <_kill>
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	d102      	bne.n	8006ab4 <_kill_r+0x1c>
 8006aae:	682b      	ldr	r3, [r5, #0]
 8006ab0:	b103      	cbz	r3, 8006ab4 <_kill_r+0x1c>
 8006ab2:	6023      	str	r3, [r4, #0]
 8006ab4:	bd38      	pop	{r3, r4, r5, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200002d8 	.word	0x200002d8

08006abc <_getpid_r>:
 8006abc:	f7fa bcc7 	b.w	800144e <_getpid>

08006ac0 <__sread>:
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac8:	f000 f894 	bl	8006bf4 <_read_r>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	bfab      	itete	ge
 8006ad0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ad2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ad4:	181b      	addge	r3, r3, r0
 8006ad6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ada:	bfac      	ite	ge
 8006adc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ade:	81a3      	strhlt	r3, [r4, #12]
 8006ae0:	bd10      	pop	{r4, pc}

08006ae2 <__swrite>:
 8006ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae6:	461f      	mov	r7, r3
 8006ae8:	898b      	ldrh	r3, [r1, #12]
 8006aea:	4605      	mov	r5, r0
 8006aec:	05db      	lsls	r3, r3, #23
 8006aee:	460c      	mov	r4, r1
 8006af0:	4616      	mov	r6, r2
 8006af2:	d505      	bpl.n	8006b00 <__swrite+0x1e>
 8006af4:	2302      	movs	r3, #2
 8006af6:	2200      	movs	r2, #0
 8006af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afc:	f000 f868 	bl	8006bd0 <_lseek_r>
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	4632      	mov	r2, r6
 8006b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b08:	81a3      	strh	r3, [r4, #12]
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	463b      	mov	r3, r7
 8006b0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b16:	f000 b817 	b.w	8006b48 <_write_r>

08006b1a <__sseek>:
 8006b1a:	b510      	push	{r4, lr}
 8006b1c:	460c      	mov	r4, r1
 8006b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b22:	f000 f855 	bl	8006bd0 <_lseek_r>
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	bf15      	itete	ne
 8006b2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b36:	81a3      	strheq	r3, [r4, #12]
 8006b38:	bf18      	it	ne
 8006b3a:	81a3      	strhne	r3, [r4, #12]
 8006b3c:	bd10      	pop	{r4, pc}

08006b3e <__sclose>:
 8006b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b42:	f000 b813 	b.w	8006b6c <_close_r>
	...

08006b48 <_write_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	4611      	mov	r1, r2
 8006b50:	2200      	movs	r2, #0
 8006b52:	4d05      	ldr	r5, [pc, #20]	; (8006b68 <_write_r+0x20>)
 8006b54:	602a      	str	r2, [r5, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f7fa fcb7 	bl	80014ca <_write>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d102      	bne.n	8006b66 <_write_r+0x1e>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	b103      	cbz	r3, 8006b66 <_write_r+0x1e>
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
 8006b68:	200002d8 	.word	0x200002d8

08006b6c <_close_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	2300      	movs	r3, #0
 8006b70:	4d05      	ldr	r5, [pc, #20]	; (8006b88 <_close_r+0x1c>)
 8006b72:	4604      	mov	r4, r0
 8006b74:	4608      	mov	r0, r1
 8006b76:	602b      	str	r3, [r5, #0]
 8006b78:	f7fa fcc3 	bl	8001502 <_close>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_close_r+0x1a>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_close_r+0x1a>
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	200002d8 	.word	0x200002d8

08006b8c <_fstat_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	2300      	movs	r3, #0
 8006b90:	4d06      	ldr	r5, [pc, #24]	; (8006bac <_fstat_r+0x20>)
 8006b92:	4604      	mov	r4, r0
 8006b94:	4608      	mov	r0, r1
 8006b96:	4611      	mov	r1, r2
 8006b98:	602b      	str	r3, [r5, #0]
 8006b9a:	f7fa fcbd 	bl	8001518 <_fstat>
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	d102      	bne.n	8006ba8 <_fstat_r+0x1c>
 8006ba2:	682b      	ldr	r3, [r5, #0]
 8006ba4:	b103      	cbz	r3, 8006ba8 <_fstat_r+0x1c>
 8006ba6:	6023      	str	r3, [r4, #0]
 8006ba8:	bd38      	pop	{r3, r4, r5, pc}
 8006baa:	bf00      	nop
 8006bac:	200002d8 	.word	0x200002d8

08006bb0 <_isatty_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4d05      	ldr	r5, [pc, #20]	; (8006bcc <_isatty_r+0x1c>)
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	4608      	mov	r0, r1
 8006bba:	602b      	str	r3, [r5, #0]
 8006bbc:	f7fa fcbb 	bl	8001536 <_isatty>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	d102      	bne.n	8006bca <_isatty_r+0x1a>
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	b103      	cbz	r3, 8006bca <_isatty_r+0x1a>
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	bd38      	pop	{r3, r4, r5, pc}
 8006bcc:	200002d8 	.word	0x200002d8

08006bd0 <_lseek_r>:
 8006bd0:	b538      	push	{r3, r4, r5, lr}
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	2200      	movs	r2, #0
 8006bda:	4d05      	ldr	r5, [pc, #20]	; (8006bf0 <_lseek_r+0x20>)
 8006bdc:	602a      	str	r2, [r5, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	f7fa fcb3 	bl	800154a <_lseek>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d102      	bne.n	8006bee <_lseek_r+0x1e>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	b103      	cbz	r3, 8006bee <_lseek_r+0x1e>
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	200002d8 	.word	0x200002d8

08006bf4 <_read_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	4608      	mov	r0, r1
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	4d05      	ldr	r5, [pc, #20]	; (8006c14 <_read_r+0x20>)
 8006c00:	602a      	str	r2, [r5, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	f7fa fc44 	bl	8001490 <_read>
 8006c08:	1c43      	adds	r3, r0, #1
 8006c0a:	d102      	bne.n	8006c12 <_read_r+0x1e>
 8006c0c:	682b      	ldr	r3, [r5, #0]
 8006c0e:	b103      	cbz	r3, 8006c12 <_read_r+0x1e>
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	200002d8 	.word	0x200002d8

08006c18 <_init>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	bf00      	nop
 8006c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1e:	bc08      	pop	{r3}
 8006c20:	469e      	mov	lr, r3
 8006c22:	4770      	bx	lr

08006c24 <_fini>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	bf00      	nop
 8006c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2a:	bc08      	pop	{r3}
 8006c2c:	469e      	mov	lr, r3
 8006c2e:	4770      	bx	lr
