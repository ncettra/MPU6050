
TP_FINAL_PDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08006cf0  08006cf0  00016cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800723c  0800723c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800723c  0800723c  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800723c  0800723c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800723c  0800723c  0001723c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007240  08007240  00017240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08007244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001f8  0800743c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  0800743c  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b9d  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c06  00000000  00000000  00029dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002b9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002c3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b69  00000000  00000000  0002cd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d221  00000000  00000000  000458d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008680b  00000000  00000000  00052af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d92fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  000d9350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006cd8 	.word	0x08006cd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08006cd8 	.word	0x08006cd8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__gesf2>:
 8000d44:	f04f 3cff 	mov.w	ip, #4294967295
 8000d48:	e006      	b.n	8000d58 <__cmpsf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__lesf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	e002      	b.n	8000d58 <__cmpsf2+0x4>
 8000d52:	bf00      	nop

08000d54 <__cmpsf2>:
 8000d54:	f04f 0c01 	mov.w	ip, #1
 8000d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d68:	bf18      	it	ne
 8000d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d6e:	d011      	beq.n	8000d94 <__cmpsf2+0x40>
 8000d70:	b001      	add	sp, #4
 8000d72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d76:	bf18      	it	ne
 8000d78:	ea90 0f01 	teqne	r0, r1
 8000d7c:	bf58      	it	pl
 8000d7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d82:	bf88      	it	hi
 8000d84:	17c8      	asrhi	r0, r1, #31
 8000d86:	bf38      	it	cc
 8000d88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d8c:	bf18      	it	ne
 8000d8e:	f040 0001 	orrne.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	d102      	bne.n	8000da0 <__cmpsf2+0x4c>
 8000d9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d9e:	d105      	bne.n	8000dac <__cmpsf2+0x58>
 8000da0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da4:	d1e4      	bne.n	8000d70 <__cmpsf2+0x1c>
 8000da6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000daa:	d0e1      	beq.n	8000d70 <__cmpsf2+0x1c>
 8000dac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <__aeabi_cfrcmple>:
 8000db4:	4684      	mov	ip, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4661      	mov	r1, ip
 8000dba:	e7ff      	b.n	8000dbc <__aeabi_cfcmpeq>

08000dbc <__aeabi_cfcmpeq>:
 8000dbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dbe:	f7ff ffc9 	bl	8000d54 <__cmpsf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	bf48      	it	mi
 8000dc6:	f110 0f00 	cmnmi.w	r0, #0
 8000dca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dcc <__aeabi_fcmpeq>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff fff4 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2001      	moveq	r0, #1
 8000dd8:	2000      	movne	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmplt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffea 	bl	8000dbc <__aeabi_cfcmpeq>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmple>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffe0 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpge>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffd2 	bl	8000db4 <__aeabi_cfrcmple>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpgt>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffc8 	bl	8000db4 <__aeabi_cfrcmple>
 8000e24:	bf34      	ite	cc
 8000e26:	2001      	movcc	r0, #1
 8000e28:	2000      	movcs	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <__aeabi_f2iz>:
 8000e30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e38:	d30f      	bcc.n	8000e5a <__aeabi_f2iz+0x2a>
 8000e3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e42:	d90d      	bls.n	8000e60 <__aeabi_f2iz+0x30>
 8000e44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e50:	fa23 f002 	lsr.w	r0, r3, r2
 8000e54:	bf18      	it	ne
 8000e56:	4240      	negne	r0, r0
 8000e58:	4770      	bx	lr
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	4770      	bx	lr
 8000e60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e64:	d101      	bne.n	8000e6a <__aeabi_f2iz+0x3a>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	d105      	bne.n	8000e76 <__aeabi_f2iz+0x46>
 8000e6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e6e:	bf08      	it	eq
 8000e70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f04f 0000 	mov.w	r0, #0
 8000e7a:	4770      	bx	lr

08000e7c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e80:	f3bf 8f4f 	dsb	sy
}
 8000e84:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <__NVIC_SystemReset+0x24>)
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e8e:	4904      	ldr	r1, [pc, #16]	; (8000ea0 <__NVIC_SystemReset+0x24>)
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_SystemReset+0x28>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <__NVIC_SystemReset+0x20>
 8000ea0:	e000ed00 	.word	0xe000ed00
 8000ea4:	05fa0004 	.word	0x05fa0004

08000ea8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000eac:	b0dc      	sub	sp, #368	; 0x170
 8000eae:	af0c      	add	r7, sp, #48	; 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eb0:	f000 fefe 	bl	8001cb0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000eb4:	f000 f8cc 	bl	8001050 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000eb8:	f000 f968 	bl	800118c <MX_GPIO_Init>
	MX_I2C1_Init();
 8000ebc:	f000 f90e 	bl	80010dc <MX_I2C1_Init>
	MX_USART3_UART_Init();
 8000ec0:	f000 f93a 	bl	8001138 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	485a      	ldr	r0, [pc, #360]	; (8001034 <main+0x18c>)
 8000eca:	f001 f9f6 	bl	80022ba <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed2:	f000 ff4f 	bl	8001d74 <HAL_Delay>
	HAL_UART_Transmit(&huart3,(uint8_t *)MCU_INIT_MSG,strlen(MCU_INIT_MSG),10);
 8000ed6:	4b58      	ldr	r3, [pc, #352]	; (8001038 <main+0x190>)
 8000ed8:	681c      	ldr	r4, [r3, #0]
 8000eda:	4b57      	ldr	r3, [pc, #348]	; (8001038 <main+0x190>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff f936 	bl	8000150 <strlen>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	230a      	movs	r3, #10
 8000eea:	4621      	mov	r1, r4
 8000eec:	4853      	ldr	r0, [pc, #332]	; (800103c <main+0x194>)
 8000eee:	f002 fe7c 	bl	8003bea <HAL_UART_Transmit>

	//Para debugear por puerto serie
	delayInit(&uartDebugDelay, 2000);
 8000ef2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000ef6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fe48 	bl	8001b90 <delayInit>
	char formatData[256];

	//Inicializamos el MPU
	while (!mpuInit(&hi2c1)){
 8000f00:	bf00      	nop
 8000f02:	484f      	ldr	r0, [pc, #316]	; (8001040 <main+0x198>)
 8000f04:	f000 fb8f 	bl	8001626 <mpuInit>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	f083 0301 	eor.w	r3, r3, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00f      	beq.n	8000f34 <main+0x8c>
		HAL_UART_Transmit(&huart3,(uint8_t*)MPU6050_ERROR_MSG,strlen(MPU6050_ERROR_MSG),10);
 8000f14:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <main+0x19c>)
 8000f16:	681c      	ldr	r4, [r3, #0]
 8000f18:	4b4a      	ldr	r3, [pc, #296]	; (8001044 <main+0x19c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff f917 	bl	8000150 <strlen>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	230a      	movs	r3, #10
 8000f28:	4621      	mov	r1, r4
 8000f2a:	4844      	ldr	r0, [pc, #272]	; (800103c <main+0x194>)
 8000f2c:	f002 fe5d 	bl	8003bea <HAL_UART_Transmit>
		NVIC_SystemReset();
 8000f30:	f7ff ffa4 	bl	8000e7c <__NVIC_SystemReset>
	}
	HAL_UART_Transmit(&huart3,(uint8_t*)MPU6050_INIT_MSG,strlen(MPU6050_INIT_MSG),10);
 8000f34:	4b44      	ldr	r3, [pc, #272]	; (8001048 <main+0x1a0>)
 8000f36:	681c      	ldr	r4, [r3, #0]
 8000f38:	4b43      	ldr	r3, [pc, #268]	; (8001048 <main+0x1a0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff f907 	bl	8000150 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	230a      	movs	r3, #10
 8000f48:	4621      	mov	r1, r4
 8000f4a:	483c      	ldr	r0, [pc, #240]	; (800103c <main+0x194>)
 8000f4c:	f002 fe4d 	bl	8003bea <HAL_UART_Transmit>
	initAlertControl(1,5000,&huart3); //Inicio la MEF
 8000f50:	4a3a      	ldr	r2, [pc, #232]	; (800103c <main+0x194>)
 8000f52:	f241 3188 	movw	r1, #5000	; 0x1388
 8000f56:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000f5a:	f000 fcb1 	bl	80018c0 <initAlertControl>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		mpuUpdate(&hi2c1,&mpu6050); //Actualizamos el estado del mpu
 8000f5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f62:	4619      	mov	r1, r3
 8000f64:	4836      	ldr	r0, [pc, #216]	; (8001040 <main+0x198>)
 8000f66:	f000 fbbb 	bl	80016e0 <mpuUpdate>
		checkAlertControl(&mpu6050, &huart3); //Chequeamos la MEF
 8000f6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f6e:	4933      	ldr	r1, [pc, #204]	; (800103c <main+0x194>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fd0f 	bl	8001994 <checkAlertControl>
		if(delayRead(&uartDebugDelay)){
 8000f76:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fe1c 	bl	8001bb8 <delayRead>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0eb      	beq.n	8000f5e <main+0xb6>
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000f86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fa4c 	bl	8000428 <__aeabi_f2d>
 8000f90:	e9c7 0104 	strd	r0, r1, [r7, #16]
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fa45 	bl	8000428 <__aeabi_f2d>
 8000f9e:	4680      	mov	r8, r0
 8000fa0:	4689      	mov	r9, r1
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000fa2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa3e 	bl	8000428 <__aeabi_f2d>
 8000fac:	4682      	mov	sl, r0
 8000fae:	468b      	mov	fp, r1
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000fb0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fa37 	bl	8000428 <__aeabi_f2d>
 8000fba:	e9c7 0102 	strd	r0, r1, [r7, #8]
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fa30 	bl	8000428 <__aeabi_f2d>
 8000fc8:	e9c7 0100 	strd	r0, r1, [r7]
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa29 	bl	8000428 <__aeabi_f2d>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	460d      	mov	r5, r1
					mpu6050.accX, mpu6050.accY, mpu6050.accZ, mpu6050.angX, mpu6050.angY, mpu6050.angZ, mpu6050.temperature );
 8000fda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
			sprintf(formatData,"\n\r MPU6050 incoming data:\n\r\t# Accelerometer (G) --->  x = %.3f  , y = %.3f , z = %.3f\n\r\t# Giroscope   (d/s) --->  x = %.3f , y = %.3f , z = %.3f\n\r\t# Temperature   (d) --->  t = %.2f\n\r" ,
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fa22 	bl	8000428 <__aeabi_f2d>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	f107 0018 	add.w	r0, r7, #24
 8000fec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000ff0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8000ff4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ff8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8000ffc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001000:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001004:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001008:	e9cd 8900 	strd	r8, r9, [sp]
 800100c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001010:	490e      	ldr	r1, [pc, #56]	; (800104c <main+0x1a4>)
 8001012:	f003 fbe7 	bl	80047e4 <siprintf>
			HAL_UART_Transmit(&huart3,(uint8_t*)formatData,strlen(formatData),100);
 8001016:	f107 0318 	add.w	r3, r7, #24
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff f898 	bl	8000150 <strlen>
 8001020:	4603      	mov	r3, r0
 8001022:	b29a      	uxth	r2, r3
 8001024:	f107 0118 	add.w	r1, r7, #24
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	4804      	ldr	r0, [pc, #16]	; (800103c <main+0x194>)
 800102c:	f002 fddd 	bl	8003bea <HAL_UART_Transmit>
		mpuUpdate(&hi2c1,&mpu6050); //Actualizamos el estado del mpu
 8001030:	e795      	b.n	8000f5e <main+0xb6>
 8001032:	bf00      	nop
 8001034:	40010800 	.word	0x40010800
 8001038:	20000000 	.word	0x20000000
 800103c:	20000268 	.word	0x20000268
 8001040:	20000214 	.word	0x20000214
 8001044:	20000004 	.word	0x20000004
 8001048:	20000008 	.word	0x20000008
 800104c:	08006d40 	.word	0x08006d40

08001050 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b090      	sub	sp, #64	; 0x40
 8001054:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0318 	add.w	r3, r7, #24
 800105a:	2228      	movs	r2, #40	; 0x28
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f002 ff58 	bl	8003f14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001080:	2301      	movs	r3, #1
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001084:	2302      	movs	r3, #2
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800108e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001092:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	4618      	mov	r0, r3
 800109a:	f002 f93f 	bl	800331c <HAL_RCC_OscConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80010a4:	f000 f8ea 	bl	800127c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a8:	230f      	movs	r3, #15
 80010aa:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ac:	2302      	movs	r3, #2
 80010ae:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2102      	movs	r1, #2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fbac 	bl	8003820 <HAL_RCC_ClockConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x82>
	{
		Error_Handler();
 80010ce:	f000 f8d5 	bl	800127c <Error_Handler>
	}
}
 80010d2:	bf00      	nop
 80010d4:	3740      	adds	r7, #64	; 0x40
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <MX_I2C1_Init+0x50>)
 80010e2:	4a13      	ldr	r2, [pc, #76]	; (8001130 <MX_I2C1_Init+0x54>)
 80010e4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_I2C1_Init+0x50>)
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <MX_I2C1_Init+0x58>)
 80010ea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_I2C1_Init+0x50>)
 80010fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010fe:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_I2C1_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_I2C1_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_I2C1_Init+0x50>)
 800111a:	f001 f8ff 	bl	800231c <HAL_I2C_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001124:	f000 f8aa 	bl	800127c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000214 	.word	0x20000214
 8001130:	40005400 	.word	0x40005400
 8001134:	000186a0 	.word	0x000186a0

08001138 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <MX_USART3_UART_Init+0x50>)
 8001140:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_USART3_UART_Init+0x4c>)
 8001170:	f002 fcee 	bl	8003b50 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800117a:	f000 f87f 	bl	800127c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000268 	.word	0x20000268
 8001188:	40004800 	.word	0x40004800

0800118c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011a0:	4b33      	ldr	r3, [pc, #204]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a32      	ldr	r2, [pc, #200]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011a6:	f043 0310 	orr.w	r3, r3, #16
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b30      	ldr	r3, [pc, #192]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a2c      	ldr	r2, [pc, #176]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011be:	f043 0320 	orr.w	r3, r3, #32
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0320 	and.w	r3, r3, #32
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a26      	ldr	r2, [pc, #152]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a20      	ldr	r2, [pc, #128]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011ee:	f043 0308 	orr.w	r3, r3, #8
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <MX_GPIO_Init+0xe4>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001206:	481b      	ldr	r0, [pc, #108]	; (8001274 <MX_GPIO_Init+0xe8>)
 8001208:	f001 f857 	bl	80022ba <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2106      	movs	r1, #6
 8001210:	4819      	ldr	r0, [pc, #100]	; (8001278 <MX_GPIO_Init+0xec>)
 8001212:	f001 f852 	bl	80022ba <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_1_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin;
 8001216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2302      	movs	r3, #2
 8001226:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_GPIO_Init+0xe8>)
 8001230:	f000 fea8 	bl	8001f84 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUZZER_Pin PA2 */
	GPIO_InitStruct.Pin = BUZZER_Pin|GPIO_PIN_2;
 8001234:	2306      	movs	r3, #6
 8001236:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2302      	movs	r3, #2
 8001242:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4619      	mov	r1, r3
 800124a:	480b      	ldr	r0, [pc, #44]	; (8001278 <MX_GPIO_Init+0xec>)
 800124c:	f000 fe9a 	bl	8001f84 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001250:	2308      	movs	r3, #8
 8001252:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_GPIO_Init+0xec>)
 8001264:	f000 fe8e 	bl	8001f84 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000
 8001274:	40011000 	.word	0x40011000
 8001278:	40010800 	.word	0x40010800

0800127c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_MspInit+0x5c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <HAL_MspInit+0x5c>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_MspInit+0x5c>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_MspInit+0x5c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_MspInit+0x60>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_MspInit+0x60>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000

080012ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <HAL_I2C_MspInit+0x70>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d123      	bne.n	8001354 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_I2C_MspInit+0x74>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a13      	ldr	r2, [pc, #76]	; (8001360 <HAL_I2C_MspInit+0x74>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_I2C_MspInit+0x74>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001324:	23c0      	movs	r3, #192	; 0xc0
 8001326:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001328:	2312      	movs	r3, #18
 800132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	4619      	mov	r1, r3
 8001336:	480b      	ldr	r0, [pc, #44]	; (8001364 <HAL_I2C_MspInit+0x78>)
 8001338:	f000 fe24 	bl	8001f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_I2C_MspInit+0x74>)
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_I2C_MspInit+0x74>)
 8001342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001346:	61d3      	str	r3, [r2, #28]
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_I2C_MspInit+0x74>)
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40005400 	.word	0x40005400
 8001360:	40021000 	.word	0x40021000
 8001364:	40010c00 	.word	0x40010c00

08001368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <HAL_UART_MspInit+0x8c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d131      	bne.n	80013ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_UART_MspInit+0x90>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	4a1a      	ldr	r2, [pc, #104]	; (80013f8 <HAL_UART_MspInit+0x90>)
 800138e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001392:	61d3      	str	r3, [r2, #28]
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_UART_MspInit+0x90>)
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_UART_MspInit+0x90>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <HAL_UART_MspInit+0x90>)
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_UART_MspInit+0x90>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	4619      	mov	r1, r3
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <HAL_UART_MspInit+0x94>)
 80013ce:	f000 fdd9 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4619      	mov	r1, r3
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <HAL_UART_MspInit+0x94>)
 80013e8:	f000 fdcc 	bl	8001f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40004800 	.word	0x40004800
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010c00 	.word	0x40010c00

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001446:	f000 fc79 	bl	8001d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}

0800144e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  return 1;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <_kill>:

int _kill(int pid, int sig)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001466:	f002 fd2b 	bl	8003ec0 <__errno>
 800146a:	4603      	mov	r3, r0
 800146c:	2216      	movs	r2, #22
 800146e:	601a      	str	r2, [r3, #0]
  return -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_exit>:

void _exit (int status)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ffe7 	bl	800145c <_kill>
  while (1) {}    /* Make sure we hang here */
 800148e:	e7fe      	b.n	800148e <_exit+0x12>

08001490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	e00a      	b.n	80014b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014a2:	f3af 8000 	nop.w
 80014a6:	4601      	mov	r1, r0
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	60ba      	str	r2, [r7, #8]
 80014ae:	b2ca      	uxtb	r2, r1
 80014b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbf0      	blt.n	80014a2 <_read+0x12>
  }

  return len;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e009      	b.n	80014f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf1      	blt.n	80014dc <_write+0x12>
  }
  return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_close>:

int _close(int file)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001528:	605a      	str	r2, [r3, #4]
  return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <_isatty>:

int _isatty(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
	...

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f002 fc94 	bl	8003ec0 <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20005000 	.word	0x20005000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	200002ac 	.word	0x200002ac
 80015cc:	200002e0 	.word	0x200002e0

080015d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015de:	490d      	ldr	r1, [pc, #52]	; (8001614 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015f4:	4c0a      	ldr	r4, [pc, #40]	; (8001620 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001602:	f7ff ffe5 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f002 fc61 	bl	8003ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160a:	f7ff fc4d 	bl	8000ea8 <main>
  bx lr
 800160e:	4770      	bx	lr
  ldr r0, =_sdata
 8001610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001614:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001618:	08007244 	.word	0x08007244
  ldr r2, =_sbss
 800161c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001620:	200002e0 	.word	0x200002e0

08001624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC1_2_IRQHandler>

08001626 <mpuInit>:
/*
 * @brief Inicializa la comunicacion i2c con el MPU6050 y lo configura
 * @param [in] hi2c: Puntero al delegado i2c donde esta conectado el mpu
 * @return true si inicializo correctamente, false caso contrario
 */
bool mpuInit(void* hi2c){
 8001626:	b580      	push	{r7, lr}
 8001628:	b088      	sub	sp, #32
 800162a:	af04      	add	r7, sp, #16
 800162c:	6078      	str	r0, [r7, #4]
	 *Lo ideal seria crear una estructura de configuracion, esto es porque cuando recibo, las conversiones dependen
	 *de como ha sido configurado el mpu6050. Por ahora es fijo para simplificar el driver.
	 */

	uint8_t data;
	uint8_t powerManagementData = 0x00;
 800162e:	2300      	movs	r3, #0
 8001630:	73bb      	strb	r3, [r7, #14]
	uint8_t updateDataRate = 0x07; //divisor para el muestreo
 8001632:	2307      	movs	r3, #7
 8001634:	737b      	strb	r3, [r7, #13]
	uint8_t accConfig = 0b00000000; //Pag 15
 8001636:	2300      	movs	r3, #0
 8001638:	733b      	strb	r3, [r7, #12]
	uint8_t gyroConfig = 0b00000000; //Pag 14
 800163a:	2300      	movs	r3, #0
 800163c:	72fb      	strb	r3, [r7, #11]

	readI2C(hi2c,MPU6050_ADDRESS,MPU6050_WHO_AM_I,1,&data,1,MPU6050_I2C_TIMEOUT);
 800163e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2301      	movs	r3, #1
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	f107 030f 	add.w	r3, r7, #15
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2301      	movs	r3, #1
 8001650:	2275      	movs	r2, #117	; 0x75
 8001652:	21d0      	movs	r1, #208	; 0xd0
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 faee 	bl	8001c36 <readI2C>


	//Si todo va bien tiene que devolver un 0x68
	if (data == 0x68){
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b68      	cmp	r3, #104	; 0x68
 800165e:	d139      	bne.n	80016d4 <mpuInit+0xae>
		//Ahora vamos a configurar el MPU6050
		writeI2C(hi2c, MPU6050_ADDRESS, MPU6050_POWER_MGM_REGISTER, 1, &powerManagementData, 1, MPU6050_I2C_TIMEOUT);
 8001660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2301      	movs	r3, #1
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	f107 030e 	add.w	r3, r7, #14
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2301      	movs	r3, #1
 8001672:	226b      	movs	r2, #107	; 0x6b
 8001674:	21d0      	movs	r1, #208	; 0xd0
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fafb 	bl	8001c72 <writeI2C>
		writeI2C(hi2c, MPU6050_ADDRESS, MPU6050_SAMPLING_DIV_REGISTER, 1, &updateDataRate, 1, MPU6050_I2C_TIMEOUT);
 800167c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001680:	9302      	str	r3, [sp, #8]
 8001682:	2301      	movs	r3, #1
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	f107 030d 	add.w	r3, r7, #13
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	2219      	movs	r2, #25
 8001690:	21d0      	movs	r1, #208	; 0xd0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 faed 	bl	8001c72 <writeI2C>
		writeI2C(hi2c, MPU6050_ADDRESS, MPU6050_ACC_CONFIG_REGISTER, 1, &accConfig, 1, MPU6050_I2C_TIMEOUT);
 8001698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2301      	movs	r3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	221c      	movs	r2, #28
 80016ac:	21d0      	movs	r1, #208	; 0xd0
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fadf 	bl	8001c72 <writeI2C>
		writeI2C(hi2c, MPU6050_ADDRESS, MPU6050_GYRO_CONFIG_REGISTER, 1, &gyroConfig, 1, MPU6050_I2C_TIMEOUT);
 80016b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b8:	9302      	str	r3, [sp, #8]
 80016ba:	2301      	movs	r3, #1
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	f107 030b 	add.w	r3, r7, #11
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2301      	movs	r3, #1
 80016c6:	221b      	movs	r2, #27
 80016c8:	21d0      	movs	r1, #208	; 0xd0
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fad1 	bl	8001c72 <writeI2C>
		return true;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <mpuInit+0xb0>
	}
	else{
		return false;
 80016d4:	2300      	movs	r3, #0
	}
	return true;
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <mpuUpdate>:
/*
 * @brief Actualiza la estructura de datos del mpu6050
 * @param [in] hi2c: Puntero al delegado i2c donde esta conectado el mpu
 * @param [in] mpu: Puntero a la estructura de datos del mpu6050
 */
void mpuUpdate(void* hi2c, mpu6050_t * mpu){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08e      	sub	sp, #56	; 0x38
 80016e4:	af04      	add	r7, sp, #16
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]

	uint8_t data[14];

	readI2C(hi2c, MPU6050_ADDRESS, MPU6050_ALLDATA_READ_REGISTER, 1, data, 14, MPU6050_I2C_TIMEOUT);
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	230e      	movs	r3, #14
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	223b      	movs	r2, #59	; 0x3b
 80016fe:	21d0      	movs	r1, #208	; 0xd0
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fa98 	bl	8001c36 <readI2C>
	//Es importante que la RAW DATA sea con signo, porque sino, para valores menores a cero no se le interpreta el modulo a 2 y salta de 0 a 65365
	int16_t accX = ((uint16_t)data[0]<<8)+data[1];
 8001706:	7b3b      	ldrb	r3, [r7, #12]
 8001708:	b29b      	uxth	r3, r3
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b29a      	uxth	r2, r3
 800170e:	7b7b      	ldrb	r3, [r7, #13]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4413      	add	r3, r2
 8001714:	b29b      	uxth	r3, r3
 8001716:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t accY = ((uint16_t)data[2]<<8)+data[3];
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	b29b      	uxth	r3, r3
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	b29a      	uxth	r2, r3
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4413      	add	r3, r2
 8001726:	b29b      	uxth	r3, r3
 8001728:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t accZ = ((uint16_t)data[4]<<8)+data[5];
 800172a:	7c3b      	ldrb	r3, [r7, #16]
 800172c:	b29b      	uxth	r3, r3
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b29a      	uxth	r2, r3
 8001732:	7c7b      	ldrb	r3, [r7, #17]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4413      	add	r3, r2
 8001738:	b29b      	uxth	r3, r3
 800173a:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t Temp = ((uint16_t)data[6]<<8)+data[7];
 800173c:	7cbb      	ldrb	r3, [r7, #18]
 800173e:	b29b      	uxth	r3, r3
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b29a      	uxth	r2, r3
 8001744:	7cfb      	ldrb	r3, [r7, #19]
 8001746:	b29b      	uxth	r3, r3
 8001748:	4413      	add	r3, r2
 800174a:	b29b      	uxth	r3, r3
 800174c:	843b      	strh	r3, [r7, #32]
	int16_t angX = ((uint16_t)data[8]<<8)+data[9];
 800174e:	7d3b      	ldrb	r3, [r7, #20]
 8001750:	b29b      	uxth	r3, r3
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	b29a      	uxth	r2, r3
 8001756:	7d7b      	ldrb	r3, [r7, #21]
 8001758:	b29b      	uxth	r3, r3
 800175a:	4413      	add	r3, r2
 800175c:	b29b      	uxth	r3, r3
 800175e:	83fb      	strh	r3, [r7, #30]
	int16_t angY = ((uint16_t)data[10]<<8)+data[11];
 8001760:	7dbb      	ldrb	r3, [r7, #22]
 8001762:	b29b      	uxth	r3, r3
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b29a      	uxth	r2, r3
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	b29b      	uxth	r3, r3
 800176c:	4413      	add	r3, r2
 800176e:	b29b      	uxth	r3, r3
 8001770:	83bb      	strh	r3, [r7, #28]
	int16_t angZ = ((uint16_t)data[12]<<8)+data[13];
 8001772:	7e3b      	ldrb	r3, [r7, #24]
 8001774:	b29b      	uxth	r3, r3
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	b29a      	uxth	r2, r3
 800177a:	7e7b      	ldrb	r3, [r7, #25]
 800177c:	b29b      	uxth	r3, r3
 800177e:	4413      	add	r3, r2
 8001780:	b29b      	uxth	r3, r3
 8001782:	837b      	strh	r3, [r7, #26]

	mpu -> accX = accX/16384.0; //Ahora convierto la informacion cruda (RAW DATA) en valores medidos en G, el valor con el que divido depende del FS_SEL en el ACCEL_CONFIG
 8001784:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fe3b 	bl	8000404 <__aeabi_i2d>
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <mpuUpdate+0x1d8>)
 8001794:	f7fe ffca 	bl	800072c <__aeabi_ddiv>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f7ff f972 	bl	8000a88 <__aeabi_d2f>
 80017a4:	4602      	mov	r2, r0
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
	mpu -> accY = accY/16384.0;
 80017aa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fe28 	bl	8000404 <__aeabi_i2d>
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <mpuUpdate+0x1d8>)
 80017ba:	f7fe ffb7 	bl	800072c <__aeabi_ddiv>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff f95f 	bl	8000a88 <__aeabi_d2f>
 80017ca:	4602      	mov	r2, r0
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	605a      	str	r2, [r3, #4]
	mpu -> accZ = accZ/16384.0;
 80017d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fe15 	bl	8000404 <__aeabi_i2d>
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <mpuUpdate+0x1d8>)
 80017e0:	f7fe ffa4 	bl	800072c <__aeabi_ddiv>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f94c 	bl	8000a88 <__aeabi_d2f>
 80017f0:	4602      	mov	r2, r0
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	609a      	str	r2, [r3, #8]
	mpu -> temperature = (Temp/340.0) + 36.53; //Pag 30
 80017f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe02 	bl	8000404 <__aeabi_i2d>
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <mpuUpdate+0x1dc>)
 8001806:	f7fe ff91 	bl	800072c <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	a325      	add	r3, pc, #148	; (adr r3, 80018a8 <mpuUpdate+0x1c8>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe fca8 	bl	800016c <__adddf3>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f930 	bl	8000a88 <__aeabi_d2f>
 8001828:	4602      	mov	r2, r0
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	619a      	str	r2, [r3, #24]
	mpu -> angX = angX/131.0;
 800182e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fde6 	bl	8000404 <__aeabi_i2d>
 8001838:	a31d      	add	r3, pc, #116	; (adr r3, 80018b0 <mpuUpdate+0x1d0>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe ff75 	bl	800072c <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff f91d 	bl	8000a88 <__aeabi_d2f>
 800184e:	4602      	mov	r2, r0
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	60da      	str	r2, [r3, #12]
	mpu -> angY = angY/131.0;
 8001854:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fdd3 	bl	8000404 <__aeabi_i2d>
 800185e:	a314      	add	r3, pc, #80	; (adr r3, 80018b0 <mpuUpdate+0x1d0>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe ff62 	bl	800072c <__aeabi_ddiv>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f90a 	bl	8000a88 <__aeabi_d2f>
 8001874:	4602      	mov	r2, r0
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	611a      	str	r2, [r3, #16]
	mpu -> angZ = angZ/131.0;
 800187a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fdc0 	bl	8000404 <__aeabi_i2d>
 8001884:	a30a      	add	r3, pc, #40	; (adr r3, 80018b0 <mpuUpdate+0x1d0>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7fe ff4f 	bl	800072c <__aeabi_ddiv>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff f8f7 	bl	8000a88 <__aeabi_d2f>
 800189a:	4602      	mov	r2, r0
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	615a      	str	r2, [r3, #20]

}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	0a3d70a4 	.word	0x0a3d70a4
 80018ac:	404243d7 	.word	0x404243d7
 80018b0:	00000000 	.word	0x00000000
 80018b4:	40606000 	.word	0x40606000
 80018b8:	40d00000 	.word	0x40d00000
 80018bc:	40754000 	.word	0x40754000

080018c0 <initAlertControl>:
const char* FSM_TO_ALARM_MSG = "\n\rFSM -> Alarm state";
const char* FSM_TO_DATA_AQ_MSG = "\n\rFSM -> Data acquisition state";

static void buzzerChangeSound();

void initAlertControl(float accMax, uint16_t buttonDelay,UART_HandleTypeDef * uart){
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	460b      	mov	r3, r1
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	817b      	strh	r3, [r7, #10]

	if(accMax<0.5){accMax=0.5;}
 80018ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7ff fa84 	bl	8000de0 <__aeabi_fcmplt>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <initAlertControl+0x24>
 80018de:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80018e2:	60fb      	str	r3, [r7, #12]
	if(accMax>3.5){accMax=3.5;}
 80018e4:	4924      	ldr	r1, [pc, #144]	; (8001978 <initAlertControl+0xb8>)
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f7ff fa98 	bl	8000e1c <__aeabi_fcmpgt>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <initAlertControl+0x36>
 80018f2:	4b21      	ldr	r3, [pc, #132]	; (8001978 <initAlertControl+0xb8>)
 80018f4:	60fb      	str	r3, [r7, #12]
	if(buttonDelay<500){buttonDelay=500;}
 80018f6:	897b      	ldrh	r3, [r7, #10]
 80018f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018fc:	d202      	bcs.n	8001904 <initAlertControl+0x44>
 80018fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001902:	817b      	strh	r3, [r7, #10]
	if(buttonDelay>1500){buttonDelay=1500;}
 8001904:	897b      	ldrh	r3, [r7, #10]
 8001906:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800190a:	4293      	cmp	r3, r2
 800190c:	d902      	bls.n	8001914 <initAlertControl+0x54>
 800190e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001912:	817b      	strh	r3, [r7, #10]

	EstadoActual = ADQUIRIENDO_DATOS;
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <initAlertControl+0xbc>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
	AccMax = accMax;
 800191a:	4a19      	ldr	r2, [pc, #100]	; (8001980 <initAlertControl+0xc0>)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6013      	str	r3, [r2, #0]
	delayInit(&BuzzerDelay, 700);
 8001920:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8001924:	4817      	ldr	r0, [pc, #92]	; (8001984 <initAlertControl+0xc4>)
 8001926:	f000 f933 	bl	8001b90 <delayInit>
	delayInit(&switchStateDelay, buttonDelay);
 800192a:	897b      	ldrh	r3, [r7, #10]
 800192c:	4619      	mov	r1, r3
 800192e:	4816      	ldr	r0, [pc, #88]	; (8001988 <initAlertControl+0xc8>)
 8001930:	f000 f92e 	bl	8001b90 <delayInit>
	HAL_UART_Transmit(uart,(uint8_t *)"S.O.S.",strlen("S.O.S."),10);
	HAL_Delay(500);
	uint8_t * ctlZ = 0x1a;
	HAL_UART_Transmit(uart,(uint8_t *)ctlZ,1,10);*/

	HAL_UART_Transmit(uart,(uint8_t *)FSM_INIT_MSG,strlen(FSM_INIT_MSG),10);
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <initAlertControl+0xcc>)
 8001936:	681c      	ldr	r4, [r3, #0]
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <initAlertControl+0xcc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fc07 	bl	8000150 <strlen>
 8001942:	4603      	mov	r3, r0
 8001944:	b29a      	uxth	r2, r3
 8001946:	230a      	movs	r3, #10
 8001948:	4621      	mov	r1, r4
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f002 f94d 	bl	8003bea <HAL_UART_Transmit>

	//Secuencia led
	for(uint8_t i;i<6;i++){HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);HAL_Delay(100);}
 8001950:	e00a      	b.n	8001968 <initAlertControl+0xa8>
 8001952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001956:	480e      	ldr	r0, [pc, #56]	; (8001990 <initAlertControl+0xd0>)
 8001958:	f000 fcc7 	bl	80022ea <HAL_GPIO_TogglePin>
 800195c:	2064      	movs	r0, #100	; 0x64
 800195e:	f000 fa09 	bl	8001d74 <HAL_Delay>
 8001962:	7dfb      	ldrb	r3, [r7, #23]
 8001964:	3301      	adds	r3, #1
 8001966:	75fb      	strb	r3, [r7, #23]
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d9f1      	bls.n	8001952 <initAlertControl+0x92>


};
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}
 8001978:	40600000 	.word	0x40600000
 800197c:	200002b0 	.word	0x200002b0
 8001980:	20000010 	.word	0x20000010
 8001984:	200002b4 	.word	0x200002b4
 8001988:	200002c0 	.word	0x200002c0
 800198c:	20000014 	.word	0x20000014
 8001990:	40011000 	.word	0x40011000

08001994 <checkAlertControl>:
void checkAlertControl(mpu6050_t* mpu, UART_HandleTypeDef * uart){
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]

	switch(EstadoActual){
 800199e:	4b62      	ldr	r3, [pc, #392]	; (8001b28 <checkAlertControl+0x194>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <checkAlertControl+0x1a>
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	f000 8086 	beq.w	8001ab8 <checkAlertControl+0x124>
 80019ac:	e0b1      	b.n	8001b12 <checkAlertControl+0x17e>
	case ADQUIRIENDO_DATOS:
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	2102      	movs	r1, #2
 80019b2:	485e      	ldr	r0, [pc, #376]	; (8001b2c <checkAlertControl+0x198>)
 80019b4:	f000 fc81 	bl	80022ba <HAL_GPIO_WritePin>
		//Chequeo de aceleracion
		if( abs(mpu->accX) > AccMax || abs(mpu->accY) > AccMax  || abs(mpu->accZ - 1) > AccMax ){
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fa37 	bl	8000e30 <__aeabi_f2iz>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bfb8      	it	lt
 80019c8:	425b      	neglt	r3, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f966 	bl	8000c9c <__aeabi_i2f>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b57      	ldr	r3, [pc, #348]	; (8001b30 <checkAlertControl+0x19c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4619      	mov	r1, r3
 80019d8:	4610      	mov	r0, r2
 80019da:	f7ff fa1f 	bl	8000e1c <__aeabi_fcmpgt>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d131      	bne.n	8001a48 <checkAlertControl+0xb4>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fa21 	bl	8000e30 <__aeabi_f2iz>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bfb8      	it	lt
 80019f4:	425b      	neglt	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f950 	bl	8000c9c <__aeabi_i2f>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <checkAlertControl+0x19c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4619      	mov	r1, r3
 8001a04:	4610      	mov	r0, r2
 8001a06:	f7ff fa09 	bl	8000e1c <__aeabi_fcmpgt>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d11b      	bne.n	8001a48 <checkAlertControl+0xb4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f889 	bl	8000b30 <__aeabi_fsub>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fa05 	bl	8000e30 <__aeabi_f2iz>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bfb8      	it	lt
 8001a2c:	425b      	neglt	r3, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f934 	bl	8000c9c <__aeabi_i2f>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <checkAlertControl+0x19c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	f7ff f9ed 	bl	8000e1c <__aeabi_fcmpgt>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d012      	beq.n	8001a6e <checkAlertControl+0xda>
			EstadoActual = ALERTA;
 8001a48:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <checkAlertControl+0x194>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(uart,(uint8_t *)FSM_TO_ALARM_MSG,strlen(FSM_TO_ALARM_MSG),10);
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <checkAlertControl+0x1a0>)
 8001a50:	681c      	ldr	r4, [r3, #0]
 8001a52:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <checkAlertControl+0x1a0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fb7a 	bl	8000150 <strlen>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	230a      	movs	r3, #10
 8001a62:	4621      	mov	r1, r4
 8001a64:	6838      	ldr	r0, [r7, #0]
 8001a66:	f002 f8c0 	bl	8003bea <HAL_UART_Transmit>
			buzzerChangeSound();
 8001a6a:	f000 f86b 	bl	8001b44 <buzzerChangeSound>

		}
		//Comprobacion de boton con antirebote
		if( !HAL_GPIO_ReadPin(BUTTON1_GPIO_Port,BUTTON1_Pin)){
 8001a6e:	2108      	movs	r1, #8
 8001a70:	482e      	ldr	r0, [pc, #184]	; (8001b2c <checkAlertControl+0x198>)
 8001a72:	f000 fc0b 	bl	800228c <HAL_GPIO_ReadPin>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d103      	bne.n	8001a84 <checkAlertControl+0xf0>
			//Si es un falso contacto se reinicia el delay
			delayRestart(&switchStateDelay);
 8001a7c:	482e      	ldr	r0, [pc, #184]	; (8001b38 <checkAlertControl+0x1a4>)
 8001a7e:	f000 f8cd 	bl	8001c1c <delayRestart>
				EstadoActual = ALERTA;
				HAL_UART_Transmit(uart,(uint8_t *)FSM_TO_ALARM_MSG,strlen(FSM_TO_ALARM_MSG),10);
				buzzerChangeSound();
			}
		}
		break;
 8001a82:	e04a      	b.n	8001b1a <checkAlertControl+0x186>
			if(delayRead(&switchStateDelay)){
 8001a84:	482c      	ldr	r0, [pc, #176]	; (8001b38 <checkAlertControl+0x1a4>)
 8001a86:	f000 f897 	bl	8001bb8 <delayRead>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d044      	beq.n	8001b1a <checkAlertControl+0x186>
				EstadoActual = ALERTA;
 8001a90:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <checkAlertControl+0x194>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(uart,(uint8_t *)FSM_TO_ALARM_MSG,strlen(FSM_TO_ALARM_MSG),10);
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <checkAlertControl+0x1a0>)
 8001a98:	681c      	ldr	r4, [r3, #0]
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <checkAlertControl+0x1a0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fb56 	bl	8000150 <strlen>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	4621      	mov	r1, r4
 8001aac:	6838      	ldr	r0, [r7, #0]
 8001aae:	f002 f89c 	bl	8003bea <HAL_UART_Transmit>
				buzzerChangeSound();
 8001ab2:	f000 f847 	bl	8001b44 <buzzerChangeSound>
		break;
 8001ab6:	e030      	b.n	8001b1a <checkAlertControl+0x186>
	case ALERTA:
		if(delayRead(&BuzzerDelay)){
 8001ab8:	4820      	ldr	r0, [pc, #128]	; (8001b3c <checkAlertControl+0x1a8>)
 8001aba:	f000 f87d 	bl	8001bb8 <delayRead>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <checkAlertControl+0x138>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	4819      	ldr	r0, [pc, #100]	; (8001b2c <checkAlertControl+0x198>)
 8001ac8:	f000 fc0f 	bl	80022ea <HAL_GPIO_TogglePin>
		}
		if( !HAL_GPIO_ReadPin(BUTTON1_GPIO_Port,BUTTON1_Pin)){
 8001acc:	2108      	movs	r1, #8
 8001ace:	4817      	ldr	r0, [pc, #92]	; (8001b2c <checkAlertControl+0x198>)
 8001ad0:	f000 fbdc 	bl	800228c <HAL_GPIO_ReadPin>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d103      	bne.n	8001ae2 <checkAlertControl+0x14e>

			delayRestart(&switchStateDelay);
 8001ada:	4817      	ldr	r0, [pc, #92]	; (8001b38 <checkAlertControl+0x1a4>)
 8001adc:	f000 f89e 	bl	8001c1c <delayRestart>
		else{

			if(delayRead(&switchStateDelay)){EstadoActual = ADQUIRIENDO_DATOS; HAL_UART_Transmit(uart,(uint8_t *)FSM_TO_DATA_AQ_MSG,strlen(FSM_TO_DATA_AQ_MSG),10);}
		}

		break;
 8001ae0:	e01d      	b.n	8001b1e <checkAlertControl+0x18a>
			if(delayRead(&switchStateDelay)){EstadoActual = ADQUIRIENDO_DATOS; HAL_UART_Transmit(uart,(uint8_t *)FSM_TO_DATA_AQ_MSG,strlen(FSM_TO_DATA_AQ_MSG),10);}
 8001ae2:	4815      	ldr	r0, [pc, #84]	; (8001b38 <checkAlertControl+0x1a4>)
 8001ae4:	f000 f868 	bl	8001bb8 <delayRead>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d017      	beq.n	8001b1e <checkAlertControl+0x18a>
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <checkAlertControl+0x194>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <checkAlertControl+0x1ac>)
 8001af6:	681c      	ldr	r4, [r3, #0]
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <checkAlertControl+0x1ac>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fb27 	bl	8000150 <strlen>
 8001b02:	4603      	mov	r3, r0
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	230a      	movs	r3, #10
 8001b08:	4621      	mov	r1, r4
 8001b0a:	6838      	ldr	r0, [r7, #0]
 8001b0c:	f002 f86d 	bl	8003bea <HAL_UART_Transmit>
		break;
 8001b10:	e005      	b.n	8001b1e <checkAlertControl+0x18a>
	default:
		EstadoActual = ADQUIRIENDO_DATOS;
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <checkAlertControl+0x194>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
		break;
 8001b18:	e002      	b.n	8001b20 <checkAlertControl+0x18c>
		break;
 8001b1a:	bf00      	nop
 8001b1c:	e000      	b.n	8001b20 <checkAlertControl+0x18c>
		break;
 8001b1e:	bf00      	nop

	}
};
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	200002b0 	.word	0x200002b0
 8001b2c:	40010800 	.word	0x40010800
 8001b30:	20000010 	.word	0x20000010
 8001b34:	20000018 	.word	0x20000018
 8001b38:	200002c0 	.word	0x200002c0
 8001b3c:	200002b4 	.word	0x200002b4
 8001b40:	2000001c 	.word	0x2000001c

08001b44 <buzzerChangeSound>:
void buzzerChangeSound(){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,0);HAL_Delay(50);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	480f      	ldr	r0, [pc, #60]	; (8001b8c <buzzerChangeSound+0x48>)
 8001b4e:	f000 fbb4 	bl	80022ba <HAL_GPIO_WritePin>
 8001b52:	2032      	movs	r0, #50	; 0x32
 8001b54:	f000 f90e 	bl	8001d74 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);HAL_Delay(50);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	480b      	ldr	r0, [pc, #44]	; (8001b8c <buzzerChangeSound+0x48>)
 8001b5e:	f000 fbac 	bl	80022ba <HAL_GPIO_WritePin>
 8001b62:	2032      	movs	r0, #50	; 0x32
 8001b64:	f000 f906 	bl	8001d74 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,0);HAL_Delay(50);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	4807      	ldr	r0, [pc, #28]	; (8001b8c <buzzerChangeSound+0x48>)
 8001b6e:	f000 fba4 	bl	80022ba <HAL_GPIO_WritePin>
 8001b72:	2032      	movs	r0, #50	; 0x32
 8001b74:	f000 f8fe 	bl	8001d74 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);HAL_Delay(50);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <buzzerChangeSound+0x48>)
 8001b7e:	f000 fb9c 	bl	80022ba <HAL_GPIO_WritePin>
 8001b82:	2032      	movs	r0, #50	; 0x32
 8001b84:	f000 f8f6 	bl	8001d74 <HAL_Delay>
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40010800 	.word	0x40010800

08001b90 <delayInit>:
/*
 * @brief Inicializa la temporizacion
 * @param [in] delay: Puntero a donde se guarda la estructura del temporizador
 * @param [in] duration: Duracion de la temporizacion
 */
void delayInit( delay_t * delay, tick_t duration ) {
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	if(delay == NULL) return;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <delayInit+0x1e>
	delay->duration = duration;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	721a      	strb	r2, [r3, #8]
 8001bac:	e000      	b.n	8001bb0 <delayInit+0x20>
	if(delay == NULL) return;
 8001bae:	bf00      	nop
}
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <delayRead>:
 * @brief Lee la estructura del temporizado y comprueba si se ha cumplido
 * @param [in] delay: Puntero a donde se guarda la estructura del temporizador
 * @param [in] duration: Duracion de la temporizacion
 * @return true si se cumplio la temporizacion, false si no se cumplio la temporizacion
 */
bool delayRead( delay_t * delay ) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	if(delay == NULL) return false;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <delayRead+0x12>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e024      	b.n	8001c14 <delayRead+0x5c>
	if(!delay->running) {
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7a1b      	ldrb	r3, [r3, #8]
 8001bce:	f083 0301 	eor.w	r3, r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <delayRead+0x32>
		delay->startTime = HAL_GetTick();
 8001bd8:	f000 f8c2 	bl	8001d60 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	721a      	strb	r2, [r3, #8]
 8001be8:	e013      	b.n	8001c12 <delayRead+0x5a>
	}
	else if(HAL_GetTick() - delay->startTime >= delay->duration) {
 8001bea:	f000 f8b9 	bl	8001d60 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	1ad2      	subs	r2, r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d309      	bcc.n	8001c12 <delayRead+0x5a>
		delay->running = false;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick();
 8001c04:	f000 f8ac 	bl	8001d60 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	601a      	str	r2, [r3, #0]
		return true;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <delayRead+0x5c>
	}
	return false;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <delayRestart>:

/*
 * @brief Reinicia el temporizado
 * @param [in] delay: Puntero a donde se guarda la estructura del temporizador
 */
void delayRestart( delay_t * delay) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	delay->startTime = HAL_GetTick();
 8001c24:	f000 f89c 	bl	8001d60 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	601a      	str	r2, [r3, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <readI2C>:
 *  Created on: 17 abr. 2023
 *      Author: Nicolas
 */
#include "STM32F1_port.h"

void readI2C(void * hi2c, uint16_t DevAddress, uint16_t MemAddress,uint16_t MemAddSize,uint8_t* pData,uint16_t Size,uint32_t Timeout){
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b088      	sub	sp, #32
 8001c3a:	af04      	add	r7, sp, #16
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	4608      	mov	r0, r1
 8001c40:	4611      	mov	r1, r2
 8001c42:	461a      	mov	r2, r3
 8001c44:	4603      	mov	r3, r0
 8001c46:	817b      	strh	r3, [r7, #10]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	813b      	strh	r3, [r7, #8]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Read((I2C_HandleTypeDef*) hi2c,DevAddress,MemAddress,MemAddSize,pData,Size,Timeout);
 8001c50:	88f8      	ldrh	r0, [r7, #6]
 8001c52:	893a      	ldrh	r2, [r7, #8]
 8001c54:	8979      	ldrh	r1, [r7, #10]
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	9302      	str	r3, [sp, #8]
 8001c5a:	8bbb      	ldrh	r3, [r7, #28]
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	4603      	mov	r3, r0
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 fd97 	bl	8002798 <HAL_I2C_Mem_Read>

};
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <writeI2C>:
void writeI2C(void * hi2c,uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout){
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b088      	sub	sp, #32
 8001c76:	af04      	add	r7, sp, #16
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	4608      	mov	r0, r1
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4603      	mov	r3, r0
 8001c82:	817b      	strh	r3, [r7, #10]
 8001c84:	460b      	mov	r3, r1
 8001c86:	813b      	strh	r3, [r7, #8]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Write((I2C_HandleTypeDef*) hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
 8001c8c:	88f8      	ldrh	r0, [r7, #6]
 8001c8e:	893a      	ldrh	r2, [r7, #8]
 8001c90:	8979      	ldrh	r1, [r7, #10]
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	8bbb      	ldrh	r3, [r7, #28]
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 fc7f 	bl	80025a4 <HAL_I2C_Mem_Write>
}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_Init+0x28>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <HAL_Init+0x28>)
 8001cba:	f043 0310 	orr.w	r3, r3, #16
 8001cbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f000 f92b 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc6:	200f      	movs	r0, #15
 8001cc8:	f000 f808 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ccc:	f7ff fadc 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40022000 	.word	0x40022000

08001cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_InitTick+0x54>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_InitTick+0x58>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f935 	bl	8001f6a <HAL_SYSTICK_Config>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00e      	b.n	8001d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b0f      	cmp	r3, #15
 8001d0e:	d80a      	bhi.n	8001d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d10:	2200      	movs	r2, #0
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f000 f90b 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d1c:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <HAL_InitTick+0x5c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	2000000c 	.word	0x2000000c
 8001d34:	20000024 	.word	0x20000024
 8001d38:	20000020 	.word	0x20000020

08001d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_IncTick+0x1c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_IncTick+0x20>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a03      	ldr	r2, [pc, #12]	; (8001d5c <HAL_IncTick+0x20>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	20000024 	.word	0x20000024
 8001d5c:	200002cc 	.word	0x200002cc

08001d60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return uwTick;
 8001d64:	4b02      	ldr	r3, [pc, #8]	; (8001d70 <HAL_GetTick+0x10>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	200002cc 	.word	0x200002cc

08001d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	f7ff fff0 	bl	8001d60 <HAL_GetTick>
 8001d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8c:	d005      	beq.n	8001d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_Delay+0x44>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d9a:	bf00      	nop
 8001d9c:	f7ff ffe0 	bl	8001d60 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d8f7      	bhi.n	8001d9c <HAL_Delay+0x28>
  {
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000024 	.word	0x20000024

08001dbc <__NVIC_SetPriorityGrouping>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60d3      	str	r3, [r2, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_GetPriorityGrouping>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__NVIC_GetPriorityGrouping+0x18>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0307 	and.w	r3, r3, #7
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_SetPriority>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db0a      	blt.n	8001e4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	490c      	ldr	r1, [pc, #48]	; (8001e6c <__NVIC_SetPriority+0x4c>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e48:	e00a      	b.n	8001e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <__NVIC_SetPriority+0x50>)
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3b04      	subs	r3, #4
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	761a      	strb	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000e100 	.word	0xe000e100
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <NVIC_EncodePriority>:
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f1c3 0307 	rsb	r3, r3, #7
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	bf28      	it	cs
 8001e92:	2304      	movcs	r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d902      	bls.n	8001ea4 <NVIC_EncodePriority+0x30>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3b03      	subs	r3, #3
 8001ea2:	e000      	b.n	8001ea6 <NVIC_EncodePriority+0x32>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43d9      	mvns	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	4313      	orrs	r3, r2
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f7ff ff90 	bl	8001e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff49 	bl	8001dbc <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff5e 	bl	8001e04 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff90 	bl	8001e74 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5f 	bl	8001e20 <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffb0 	bl	8001ed8 <SysTick_Config>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b08b      	sub	sp, #44	; 0x2c
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f96:	e169      	b.n	800226c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	f040 8158 	bne.w	8002266 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4a9a      	ldr	r2, [pc, #616]	; (8002224 <HAL_GPIO_Init+0x2a0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d05e      	beq.n	800207e <HAL_GPIO_Init+0xfa>
 8001fc0:	4a98      	ldr	r2, [pc, #608]	; (8002224 <HAL_GPIO_Init+0x2a0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d875      	bhi.n	80020b2 <HAL_GPIO_Init+0x12e>
 8001fc6:	4a98      	ldr	r2, [pc, #608]	; (8002228 <HAL_GPIO_Init+0x2a4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d058      	beq.n	800207e <HAL_GPIO_Init+0xfa>
 8001fcc:	4a96      	ldr	r2, [pc, #600]	; (8002228 <HAL_GPIO_Init+0x2a4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d86f      	bhi.n	80020b2 <HAL_GPIO_Init+0x12e>
 8001fd2:	4a96      	ldr	r2, [pc, #600]	; (800222c <HAL_GPIO_Init+0x2a8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d052      	beq.n	800207e <HAL_GPIO_Init+0xfa>
 8001fd8:	4a94      	ldr	r2, [pc, #592]	; (800222c <HAL_GPIO_Init+0x2a8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d869      	bhi.n	80020b2 <HAL_GPIO_Init+0x12e>
 8001fde:	4a94      	ldr	r2, [pc, #592]	; (8002230 <HAL_GPIO_Init+0x2ac>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d04c      	beq.n	800207e <HAL_GPIO_Init+0xfa>
 8001fe4:	4a92      	ldr	r2, [pc, #584]	; (8002230 <HAL_GPIO_Init+0x2ac>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d863      	bhi.n	80020b2 <HAL_GPIO_Init+0x12e>
 8001fea:	4a92      	ldr	r2, [pc, #584]	; (8002234 <HAL_GPIO_Init+0x2b0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d046      	beq.n	800207e <HAL_GPIO_Init+0xfa>
 8001ff0:	4a90      	ldr	r2, [pc, #576]	; (8002234 <HAL_GPIO_Init+0x2b0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d85d      	bhi.n	80020b2 <HAL_GPIO_Init+0x12e>
 8001ff6:	2b12      	cmp	r3, #18
 8001ff8:	d82a      	bhi.n	8002050 <HAL_GPIO_Init+0xcc>
 8001ffa:	2b12      	cmp	r3, #18
 8001ffc:	d859      	bhi.n	80020b2 <HAL_GPIO_Init+0x12e>
 8001ffe:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <HAL_GPIO_Init+0x80>)
 8002000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002004:	0800207f 	.word	0x0800207f
 8002008:	08002059 	.word	0x08002059
 800200c:	0800206b 	.word	0x0800206b
 8002010:	080020ad 	.word	0x080020ad
 8002014:	080020b3 	.word	0x080020b3
 8002018:	080020b3 	.word	0x080020b3
 800201c:	080020b3 	.word	0x080020b3
 8002020:	080020b3 	.word	0x080020b3
 8002024:	080020b3 	.word	0x080020b3
 8002028:	080020b3 	.word	0x080020b3
 800202c:	080020b3 	.word	0x080020b3
 8002030:	080020b3 	.word	0x080020b3
 8002034:	080020b3 	.word	0x080020b3
 8002038:	080020b3 	.word	0x080020b3
 800203c:	080020b3 	.word	0x080020b3
 8002040:	080020b3 	.word	0x080020b3
 8002044:	080020b3 	.word	0x080020b3
 8002048:	08002061 	.word	0x08002061
 800204c:	08002075 	.word	0x08002075
 8002050:	4a79      	ldr	r2, [pc, #484]	; (8002238 <HAL_GPIO_Init+0x2b4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002056:	e02c      	b.n	80020b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	623b      	str	r3, [r7, #32]
          break;
 800205e:	e029      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	3304      	adds	r3, #4
 8002066:	623b      	str	r3, [r7, #32]
          break;
 8002068:	e024      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	3308      	adds	r3, #8
 8002070:	623b      	str	r3, [r7, #32]
          break;
 8002072:	e01f      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	330c      	adds	r3, #12
 800207a:	623b      	str	r3, [r7, #32]
          break;
 800207c:	e01a      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002086:	2304      	movs	r3, #4
 8002088:	623b      	str	r3, [r7, #32]
          break;
 800208a:	e013      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d105      	bne.n	80020a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002094:	2308      	movs	r3, #8
 8002096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	611a      	str	r2, [r3, #16]
          break;
 800209e:	e009      	b.n	80020b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020a0:	2308      	movs	r3, #8
 80020a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	615a      	str	r2, [r3, #20]
          break;
 80020aa:	e003      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
          break;
 80020b0:	e000      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          break;
 80020b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2bff      	cmp	r3, #255	; 0xff
 80020b8:	d801      	bhi.n	80020be <HAL_GPIO_Init+0x13a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	e001      	b.n	80020c2 <HAL_GPIO_Init+0x13e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3304      	adds	r3, #4
 80020c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2bff      	cmp	r3, #255	; 0xff
 80020c8:	d802      	bhi.n	80020d0 <HAL_GPIO_Init+0x14c>
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	e002      	b.n	80020d6 <HAL_GPIO_Init+0x152>
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	3b08      	subs	r3, #8
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	210f      	movs	r1, #15
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	401a      	ands	r2, r3
 80020e8:	6a39      	ldr	r1, [r7, #32]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	431a      	orrs	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80b1 	beq.w	8002266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002104:	4b4d      	ldr	r3, [pc, #308]	; (800223c <HAL_GPIO_Init+0x2b8>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a4c      	ldr	r2, [pc, #304]	; (800223c <HAL_GPIO_Init+0x2b8>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b4a      	ldr	r3, [pc, #296]	; (800223c <HAL_GPIO_Init+0x2b8>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800211c:	4a48      	ldr	r2, [pc, #288]	; (8002240 <HAL_GPIO_Init+0x2bc>)
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	3302      	adds	r3, #2
 8002124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	220f      	movs	r2, #15
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4013      	ands	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a40      	ldr	r2, [pc, #256]	; (8002244 <HAL_GPIO_Init+0x2c0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d013      	beq.n	8002170 <HAL_GPIO_Init+0x1ec>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a3f      	ldr	r2, [pc, #252]	; (8002248 <HAL_GPIO_Init+0x2c4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00d      	beq.n	800216c <HAL_GPIO_Init+0x1e8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3e      	ldr	r2, [pc, #248]	; (800224c <HAL_GPIO_Init+0x2c8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d007      	beq.n	8002168 <HAL_GPIO_Init+0x1e4>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3d      	ldr	r2, [pc, #244]	; (8002250 <HAL_GPIO_Init+0x2cc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d101      	bne.n	8002164 <HAL_GPIO_Init+0x1e0>
 8002160:	2303      	movs	r3, #3
 8002162:	e006      	b.n	8002172 <HAL_GPIO_Init+0x1ee>
 8002164:	2304      	movs	r3, #4
 8002166:	e004      	b.n	8002172 <HAL_GPIO_Init+0x1ee>
 8002168:	2302      	movs	r3, #2
 800216a:	e002      	b.n	8002172 <HAL_GPIO_Init+0x1ee>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_GPIO_Init+0x1ee>
 8002170:	2300      	movs	r3, #0
 8002172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002174:	f002 0203 	and.w	r2, r2, #3
 8002178:	0092      	lsls	r2, r2, #2
 800217a:	4093      	lsls	r3, r2
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002182:	492f      	ldr	r1, [pc, #188]	; (8002240 <HAL_GPIO_Init+0x2bc>)
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d006      	beq.n	80021aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800219c:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	492c      	ldr	r1, [pc, #176]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021aa:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	4928      	ldr	r1, [pc, #160]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d006      	beq.n	80021d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	4922      	ldr	r1, [pc, #136]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	43db      	mvns	r3, r3
 80021da:	491e      	ldr	r1, [pc, #120]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021dc:	4013      	ands	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	4918      	ldr	r1, [pc, #96]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	43db      	mvns	r3, r3
 8002202:	4914      	ldr	r1, [pc, #80]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 8002204:	4013      	ands	r3, r2
 8002206:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d021      	beq.n	8002258 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	490e      	ldr	r1, [pc, #56]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	60cb      	str	r3, [r1, #12]
 8002220:	e021      	b.n	8002266 <HAL_GPIO_Init+0x2e2>
 8002222:	bf00      	nop
 8002224:	10320000 	.word	0x10320000
 8002228:	10310000 	.word	0x10310000
 800222c:	10220000 	.word	0x10220000
 8002230:	10210000 	.word	0x10210000
 8002234:	10120000 	.word	0x10120000
 8002238:	10110000 	.word	0x10110000
 800223c:	40021000 	.word	0x40021000
 8002240:	40010000 	.word	0x40010000
 8002244:	40010800 	.word	0x40010800
 8002248:	40010c00 	.word	0x40010c00
 800224c:	40011000 	.word	0x40011000
 8002250:	40011400 	.word	0x40011400
 8002254:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_GPIO_Init+0x304>)
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	43db      	mvns	r3, r3
 8002260:	4909      	ldr	r1, [pc, #36]	; (8002288 <HAL_GPIO_Init+0x304>)
 8002262:	4013      	ands	r3, r2
 8002264:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	3301      	adds	r3, #1
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	fa22 f303 	lsr.w	r3, r2, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	f47f ae8e 	bne.w	8001f98 <HAL_GPIO_Init+0x14>
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	372c      	adds	r7, #44	; 0x2c
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	40010400 	.word	0x40010400

0800228c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	887b      	ldrh	r3, [r7, #2]
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	e001      	b.n	80022ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	807b      	strh	r3, [r7, #2]
 80022c6:	4613      	mov	r3, r2
 80022c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ca:	787b      	ldrb	r3, [r7, #1]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022d0:	887a      	ldrh	r2, [r7, #2]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022d6:	e003      	b.n	80022e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	041a      	lsls	r2, r3, #16
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	611a      	str	r2, [r3, #16]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b085      	sub	sp, #20
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022fc:	887a      	ldrh	r2, [r7, #2]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4013      	ands	r3, r2
 8002302:	041a      	lsls	r2, r3, #16
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	43d9      	mvns	r1, r3
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	400b      	ands	r3, r1
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	611a      	str	r2, [r3, #16]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e12b      	b.n	8002586 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe ffd2 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	; 0x24
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800236e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800237e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002380:	f001 fba0 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 8002384:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4a81      	ldr	r2, [pc, #516]	; (8002590 <HAL_I2C_Init+0x274>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d807      	bhi.n	80023a0 <HAL_I2C_Init+0x84>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a80      	ldr	r2, [pc, #512]	; (8002594 <HAL_I2C_Init+0x278>)
 8002394:	4293      	cmp	r3, r2
 8002396:	bf94      	ite	ls
 8002398:	2301      	movls	r3, #1
 800239a:	2300      	movhi	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	e006      	b.n	80023ae <HAL_I2C_Init+0x92>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4a7d      	ldr	r2, [pc, #500]	; (8002598 <HAL_I2C_Init+0x27c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	bf94      	ite	ls
 80023a8:	2301      	movls	r3, #1
 80023aa:	2300      	movhi	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0e7      	b.n	8002586 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4a78      	ldr	r2, [pc, #480]	; (800259c <HAL_I2C_Init+0x280>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	0c9b      	lsrs	r3, r3, #18
 80023c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a6a      	ldr	r2, [pc, #424]	; (8002590 <HAL_I2C_Init+0x274>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d802      	bhi.n	80023f0 <HAL_I2C_Init+0xd4>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	3301      	adds	r3, #1
 80023ee:	e009      	b.n	8002404 <HAL_I2C_Init+0xe8>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	4a69      	ldr	r2, [pc, #420]	; (80025a0 <HAL_I2C_Init+0x284>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	3301      	adds	r3, #1
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	430b      	orrs	r3, r1
 800240a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002416:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	495c      	ldr	r1, [pc, #368]	; (8002590 <HAL_I2C_Init+0x274>)
 8002420:	428b      	cmp	r3, r1
 8002422:	d819      	bhi.n	8002458 <HAL_I2C_Init+0x13c>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1e59      	subs	r1, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002432:	1c59      	adds	r1, r3, #1
 8002434:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002438:	400b      	ands	r3, r1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_I2C_Init+0x138>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1e59      	subs	r1, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fbb1 f3f3 	udiv	r3, r1, r3
 800244c:	3301      	adds	r3, #1
 800244e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002452:	e051      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 8002454:	2304      	movs	r3, #4
 8002456:	e04f      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d111      	bne.n	8002484 <HAL_I2C_Init+0x168>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1e58      	subs	r0, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e012      	b.n	80024aa <HAL_I2C_Init+0x18e>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1e58      	subs	r0, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	0099      	lsls	r1, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	fbb0 f3f3 	udiv	r3, r0, r3
 800249a:	3301      	adds	r3, #1
 800249c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Init+0x196>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e022      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10e      	bne.n	80024d8 <HAL_I2C_Init+0x1bc>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1e58      	subs	r0, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6859      	ldr	r1, [r3, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	440b      	add	r3, r1
 80024c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d6:	e00f      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1e58      	subs	r0, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	0099      	lsls	r1, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	6809      	ldr	r1, [r1, #0]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002526:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6911      	ldr	r1, [r2, #16]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68d2      	ldr	r2, [r2, #12]
 8002532:	4311      	orrs	r1, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	000186a0 	.word	0x000186a0
 8002594:	001e847f 	.word	0x001e847f
 8002598:	003d08ff 	.word	0x003d08ff
 800259c:	431bde83 	.word	0x431bde83
 80025a0:	10624dd3 	.word	0x10624dd3

080025a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	4608      	mov	r0, r1
 80025ae:	4611      	mov	r1, r2
 80025b0:	461a      	mov	r2, r3
 80025b2:	4603      	mov	r3, r0
 80025b4:	817b      	strh	r3, [r7, #10]
 80025b6:	460b      	mov	r3, r1
 80025b8:	813b      	strh	r3, [r7, #8]
 80025ba:	4613      	mov	r3, r2
 80025bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025be:	f7ff fbcf 	bl	8001d60 <HAL_GetTick>
 80025c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	f040 80d9 	bne.w	8002784 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2319      	movs	r3, #25
 80025d8:	2201      	movs	r2, #1
 80025da:	496d      	ldr	r1, [pc, #436]	; (8002790 <HAL_I2C_Mem_Write+0x1ec>)
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fcc1 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
 80025ea:	e0cc      	b.n	8002786 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_I2C_Mem_Write+0x56>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e0c5      	b.n	8002786 <HAL_I2C_Mem_Write+0x1e2>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d007      	beq.n	8002620 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800262e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2221      	movs	r2, #33	; 0x21
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2240      	movs	r2, #64	; 0x40
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a3a      	ldr	r2, [r7, #32]
 800264a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002650:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4a4d      	ldr	r2, [pc, #308]	; (8002794 <HAL_I2C_Mem_Write+0x1f0>)
 8002660:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002662:	88f8      	ldrh	r0, [r7, #6]
 8002664:	893a      	ldrh	r2, [r7, #8]
 8002666:	8979      	ldrh	r1, [r7, #10]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	4603      	mov	r3, r0
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 faf8 	bl	8002c68 <I2C_RequestMemoryWrite>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d052      	beq.n	8002724 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e081      	b.n	8002786 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fd42 	bl	8003110 <I2C_WaitOnTXEFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00d      	beq.n	80026ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	2b04      	cmp	r3, #4
 8002698:	d107      	bne.n	80026aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e06b      	b.n	8002786 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	781a      	ldrb	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d11b      	bne.n	8002724 <HAL_I2C_Mem_Write+0x180>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d017      	beq.n	8002724 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1aa      	bne.n	8002682 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fd2e 	bl	8003192 <I2C_WaitOnBTFFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00d      	beq.n	8002758 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b04      	cmp	r3, #4
 8002742:	d107      	bne.n	8002754 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002752:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e016      	b.n	8002786 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	e000      	b.n	8002786 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002784:	2302      	movs	r3, #2
  }
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	00100002 	.word	0x00100002
 8002794:	ffff0000 	.word	0xffff0000

08002798 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	; 0x30
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	4608      	mov	r0, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	817b      	strh	r3, [r7, #10]
 80027aa:	460b      	mov	r3, r1
 80027ac:	813b      	strh	r3, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027b6:	f7ff fad3 	bl	8001d60 <HAL_GetTick>
 80027ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	f040 8244 	bne.w	8002c52 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2319      	movs	r3, #25
 80027d0:	2201      	movs	r2, #1
 80027d2:	4982      	ldr	r1, [pc, #520]	; (80029dc <HAL_I2C_Mem_Read+0x244>)
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fbc5 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
 80027e2:	e237      	b.n	8002c54 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Mem_Read+0x5a>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e230      	b.n	8002c54 <HAL_I2C_Mem_Read+0x4bc>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d007      	beq.n	8002818 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002826:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2222      	movs	r2, #34	; 0x22
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002848:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a62      	ldr	r2, [pc, #392]	; (80029e0 <HAL_I2C_Mem_Read+0x248>)
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800285a:	88f8      	ldrh	r0, [r7, #6]
 800285c:	893a      	ldrh	r2, [r7, #8]
 800285e:	8979      	ldrh	r1, [r7, #10]
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	4603      	mov	r3, r0
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fa92 	bl	8002d94 <I2C_RequestMemoryRead>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e1ec      	b.n	8002c54 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287e:	2b00      	cmp	r3, #0
 8002880:	d113      	bne.n	80028aa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e1c0      	b.n	8002c2c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d11e      	bne.n	80028f0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028c2:	b672      	cpsid	i
}
 80028c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028ec:	b662      	cpsie	i
}
 80028ee:	e035      	b.n	800295c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d11e      	bne.n	8002936 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002906:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002908:	b672      	cpsid	i
}
 800290a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002930:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002932:	b662      	cpsie	i
}
 8002934:	e012      	b.n	800295c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002944:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800295c:	e166      	b.n	8002c2c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	2b03      	cmp	r3, #3
 8002964:	f200 811f 	bhi.w	8002ba6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	2b01      	cmp	r3, #1
 800296e:	d123      	bne.n	80029b8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fc4d 	bl	8003214 <I2C_WaitOnRXNEFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e167      	b.n	8002c54 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029b6:	e139      	b.n	8002c2c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d152      	bne.n	8002a66 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c6:	2200      	movs	r2, #0
 80029c8:	4906      	ldr	r1, [pc, #24]	; (80029e4 <HAL_I2C_Mem_Read+0x24c>)
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 faca 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d008      	beq.n	80029e8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e13c      	b.n	8002c54 <HAL_I2C_Mem_Read+0x4bc>
 80029da:	bf00      	nop
 80029dc:	00100002 	.word	0x00100002
 80029e0:	ffff0000 	.word	0xffff0000
 80029e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80029e8:	b672      	cpsid	i
}
 80029ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a2e:	b662      	cpsie	i
}
 8002a30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a64:	e0e2      	b.n	8002c2c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	497b      	ldr	r1, [pc, #492]	; (8002c5c <HAL_I2C_Mem_Read+0x4c4>)
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fa77 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0e9      	b.n	8002c54 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a90:	b672      	cpsid	i
}
 8002a92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ac6:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_I2C_Mem_Read+0x4c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	08db      	lsrs	r3, r3, #3
 8002acc:	4a65      	ldr	r2, [pc, #404]	; (8002c64 <HAL_I2C_Mem_Read+0x4cc>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0a1a      	lsrs	r2, r3, #8
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00da      	lsls	r2, r3, #3
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d118      	bne.n	8002b1e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f043 0220 	orr.w	r2, r3, #32
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b0e:	b662      	cpsie	i
}
 8002b10:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e09a      	b.n	8002c54 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d1d9      	bne.n	8002ae0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b6e:	b662      	cpsie	i
}
 8002b70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ba4:	e042      	b.n	8002c2c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fb32 	bl	8003214 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e04c      	b.n	8002c54 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d118      	bne.n	8002c2c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f47f ae94 	bne.w	800295e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e000      	b.n	8002c54 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
  }
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3728      	adds	r7, #40	; 0x28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	00010004 	.word	0x00010004
 8002c60:	2000000c 	.word	0x2000000c
 8002c64:	14f8b589 	.word	0x14f8b589

08002c68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	4608      	mov	r0, r1
 8002c72:	4611      	mov	r1, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	817b      	strh	r3, [r7, #10]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	813b      	strh	r3, [r7, #8]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f960 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00d      	beq.n	8002cc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb8:	d103      	bne.n	8002cc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e05f      	b.n	8002d86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cc6:	897b      	ldrh	r3, [r7, #10]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	6a3a      	ldr	r2, [r7, #32]
 8002cda:	492d      	ldr	r1, [pc, #180]	; (8002d90 <I2C_RequestMemoryWrite+0x128>)
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f998 	bl	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e04c      	b.n	8002d86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d04:	6a39      	ldr	r1, [r7, #32]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fa02 	bl	8003110 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d107      	bne.n	8002d2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e02b      	b.n	8002d86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d105      	bne.n	8002d40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d34:	893b      	ldrh	r3, [r7, #8]
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	611a      	str	r2, [r3, #16]
 8002d3e:	e021      	b.n	8002d84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d40:	893b      	ldrh	r3, [r7, #8]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d50:	6a39      	ldr	r1, [r7, #32]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f9dc 	bl	8003110 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d107      	bne.n	8002d76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e005      	b.n	8002d86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d7a:	893b      	ldrh	r3, [r7, #8]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	00010002 	.word	0x00010002

08002d94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	4611      	mov	r1, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	817b      	strh	r3, [r7, #10]
 8002da6:	460b      	mov	r3, r1
 8002da8:	813b      	strh	r3, [r7, #8]
 8002daa:	4613      	mov	r3, r2
 8002dac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f8c2 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df4:	d103      	bne.n	8002dfe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0aa      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e02:	897b      	ldrh	r3, [r7, #10]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	4952      	ldr	r1, [pc, #328]	; (8002f60 <I2C_RequestMemoryRead+0x1cc>)
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f8fa 	bl	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e097      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e40:	6a39      	ldr	r1, [r7, #32]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f964 	bl	8003110 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d107      	bne.n	8002e66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e076      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d105      	bne.n	8002e7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e70:	893b      	ldrh	r3, [r7, #8]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	611a      	str	r2, [r3, #16]
 8002e7a:	e021      	b.n	8002ec0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e7c:	893b      	ldrh	r3, [r7, #8]
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8c:	6a39      	ldr	r1, [r7, #32]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f93e 	bl	8003110 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00d      	beq.n	8002eb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d107      	bne.n	8002eb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e050      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb6:	893b      	ldrh	r3, [r7, #8]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec2:	6a39      	ldr	r1, [r7, #32]
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f923 	bl	8003110 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00d      	beq.n	8002eec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d107      	bne.n	8002ee8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e035      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f82b 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00d      	beq.n	8002f30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f22:	d103      	bne.n	8002f2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e013      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f30:	897b      	ldrh	r3, [r7, #10]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	6a3a      	ldr	r2, [r7, #32]
 8002f44:	4906      	ldr	r1, [pc, #24]	; (8002f60 <I2C_RequestMemoryRead+0x1cc>)
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f863 	bl	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	00010002 	.word	0x00010002

08002f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f74:	e025      	b.n	8002fc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d021      	beq.n	8002fc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7fe feef 	bl	8001d60 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d116      	bne.n	8002fc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f043 0220 	orr.w	r2, r3, #32
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e023      	b.n	800300a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	0c1b      	lsrs	r3, r3, #16
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10d      	bne.n	8002fe8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	e00c      	b.n	8003002 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2301      	moveq	r3, #1
 8002ffc:	2300      	movne	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	429a      	cmp	r2, r3
 8003006:	d0b6      	beq.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003020:	e051      	b.n	80030c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003030:	d123      	bne.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003040:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800304a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f043 0204 	orr.w	r2, r3, #4
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e046      	b.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d021      	beq.n	80030c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003082:	f7fe fe6d 	bl	8001d60 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d116      	bne.n	80030c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f043 0220 	orr.w	r2, r3, #32
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e020      	b.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d10c      	bne.n	80030ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	43da      	mvns	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	e00b      	b.n	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	43da      	mvns	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4013      	ands	r3, r2
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d18d      	bne.n	8003022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800311c:	e02d      	b.n	800317a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f8ce 	bl	80032c0 <I2C_IsAcknowledgeFailed>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e02d      	b.n	800318a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d021      	beq.n	800317a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003136:	f7fe fe13 	bl	8001d60 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d116      	bne.n	800317a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f043 0220 	orr.w	r2, r3, #32
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e007      	b.n	800318a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003184:	2b80      	cmp	r3, #128	; 0x80
 8003186:	d1ca      	bne.n	800311e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800319e:	e02d      	b.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f88d 	bl	80032c0 <I2C_IsAcknowledgeFailed>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e02d      	b.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b6:	d021      	beq.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b8:	f7fe fdd2 	bl	8001d60 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d302      	bcc.n	80031ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d116      	bne.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e007      	b.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b04      	cmp	r3, #4
 8003208:	d1ca      	bne.n	80031a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003220:	e042      	b.n	80032a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b10      	cmp	r3, #16
 800322e:	d119      	bne.n	8003264 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0210 	mvn.w	r2, #16
 8003238:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e029      	b.n	80032b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003264:	f7fe fd7c 	bl	8001d60 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	d302      	bcc.n	800327a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f043 0220 	orr.w	r2, r3, #32
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e007      	b.n	80032b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b40      	cmp	r3, #64	; 0x40
 80032b4:	d1b5      	bne.n	8003222 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d6:	d11b      	bne.n	8003310 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f043 0204 	orr.w	r2, r3, #4
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e272      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8087 	beq.w	800344a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800333c:	4b92      	ldr	r3, [pc, #584]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b04      	cmp	r3, #4
 8003346:	d00c      	beq.n	8003362 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003348:	4b8f      	ldr	r3, [pc, #572]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b08      	cmp	r3, #8
 8003352:	d112      	bne.n	800337a <HAL_RCC_OscConfig+0x5e>
 8003354:	4b8c      	ldr	r3, [pc, #560]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003360:	d10b      	bne.n	800337a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003362:	4b89      	ldr	r3, [pc, #548]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d06c      	beq.n	8003448 <HAL_RCC_OscConfig+0x12c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d168      	bne.n	8003448 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e24c      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003382:	d106      	bne.n	8003392 <HAL_RCC_OscConfig+0x76>
 8003384:	4b80      	ldr	r3, [pc, #512]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a7f      	ldr	r2, [pc, #508]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 800338a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	e02e      	b.n	80033f0 <HAL_RCC_OscConfig+0xd4>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x98>
 800339a:	4b7b      	ldr	r3, [pc, #492]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a7a      	ldr	r2, [pc, #488]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4b78      	ldr	r3, [pc, #480]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a77      	ldr	r2, [pc, #476]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e01d      	b.n	80033f0 <HAL_RCC_OscConfig+0xd4>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0xbc>
 80033be:	4b72      	ldr	r3, [pc, #456]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a71      	ldr	r2, [pc, #452]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b6f      	ldr	r3, [pc, #444]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a6e      	ldr	r2, [pc, #440]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0xd4>
 80033d8:	4b6b      	ldr	r3, [pc, #428]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6a      	ldr	r2, [pc, #424]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b68      	ldr	r3, [pc, #416]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a67      	ldr	r2, [pc, #412]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe fcb2 	bl	8001d60 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003400:	f7fe fcae 	bl	8001d60 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e200      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	4b5d      	ldr	r3, [pc, #372]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0xe4>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fe fc9e 	bl	8001d60 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003428:	f7fe fc9a 	bl	8001d60 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e1ec      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	4b53      	ldr	r3, [pc, #332]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x10c>
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d063      	beq.n	800351e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003456:	4b4c      	ldr	r3, [pc, #304]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003462:	4b49      	ldr	r3, [pc, #292]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b08      	cmp	r3, #8
 800346c:	d11c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x18c>
 800346e:	4b46      	ldr	r3, [pc, #280]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d116      	bne.n	80034a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347a:	4b43      	ldr	r3, [pc, #268]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_RCC_OscConfig+0x176>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e1c0      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003492:	4b3d      	ldr	r3, [pc, #244]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4939      	ldr	r1, [pc, #228]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a6:	e03a      	b.n	800351e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d020      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b0:	4b36      	ldr	r3, [pc, #216]	; (800358c <HAL_RCC_OscConfig+0x270>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b6:	f7fe fc53 	bl	8001d60 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034be:	f7fe fc4f 	bl	8001d60 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e1a1      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034dc:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4927      	ldr	r1, [pc, #156]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	600b      	str	r3, [r1, #0]
 80034f0:	e015      	b.n	800351e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f2:	4b26      	ldr	r3, [pc, #152]	; (800358c <HAL_RCC_OscConfig+0x270>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fe fc32 	bl	8001d60 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003500:	f7fe fc2e 	bl	8001d60 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e180      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d03a      	beq.n	80035a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d019      	beq.n	8003566 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003532:	4b17      	ldr	r3, [pc, #92]	; (8003590 <HAL_RCC_OscConfig+0x274>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003538:	f7fe fc12 	bl	8001d60 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003540:	f7fe fc0e 	bl	8001d60 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e160      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800355e:	2001      	movs	r0, #1
 8003560:	f000 fad8 	bl	8003b14 <RCC_Delay>
 8003564:	e01c      	b.n	80035a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003566:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <HAL_RCC_OscConfig+0x274>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356c:	f7fe fbf8 	bl	8001d60 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003572:	e00f      	b.n	8003594 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003574:	f7fe fbf4 	bl	8001d60 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d908      	bls.n	8003594 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e146      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
 800358c:	42420000 	.word	0x42420000
 8003590:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003594:	4b92      	ldr	r3, [pc, #584]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e9      	bne.n	8003574 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80a6 	beq.w	80036fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b2:	4b8b      	ldr	r3, [pc, #556]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10d      	bne.n	80035da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	4b88      	ldr	r3, [pc, #544]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	4a87      	ldr	r2, [pc, #540]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c8:	61d3      	str	r3, [r2, #28]
 80035ca:	4b85      	ldr	r3, [pc, #532]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	4b82      	ldr	r3, [pc, #520]	; (80037e4 <HAL_RCC_OscConfig+0x4c8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e6:	4b7f      	ldr	r3, [pc, #508]	; (80037e4 <HAL_RCC_OscConfig+0x4c8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a7e      	ldr	r2, [pc, #504]	; (80037e4 <HAL_RCC_OscConfig+0x4c8>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fe fbb5 	bl	8001d60 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fa:	f7fe fbb1 	bl	8001d60 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b64      	cmp	r3, #100	; 0x64
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e103      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	4b75      	ldr	r3, [pc, #468]	; (80037e4 <HAL_RCC_OscConfig+0x4c8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x312>
 8003620:	4b6f      	ldr	r3, [pc, #444]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4a6e      	ldr	r2, [pc, #440]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6213      	str	r3, [r2, #32]
 800362c:	e02d      	b.n	800368a <HAL_RCC_OscConfig+0x36e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0x334>
 8003636:	4b6a      	ldr	r3, [pc, #424]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	4a69      	ldr	r2, [pc, #420]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6213      	str	r3, [r2, #32]
 8003642:	4b67      	ldr	r3, [pc, #412]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	4a66      	ldr	r2, [pc, #408]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	f023 0304 	bic.w	r3, r3, #4
 800364c:	6213      	str	r3, [r2, #32]
 800364e:	e01c      	b.n	800368a <HAL_RCC_OscConfig+0x36e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b05      	cmp	r3, #5
 8003656:	d10c      	bne.n	8003672 <HAL_RCC_OscConfig+0x356>
 8003658:	4b61      	ldr	r3, [pc, #388]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4a60      	ldr	r2, [pc, #384]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800365e:	f043 0304 	orr.w	r3, r3, #4
 8003662:	6213      	str	r3, [r2, #32]
 8003664:	4b5e      	ldr	r3, [pc, #376]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4a5d      	ldr	r2, [pc, #372]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6213      	str	r3, [r2, #32]
 8003670:	e00b      	b.n	800368a <HAL_RCC_OscConfig+0x36e>
 8003672:	4b5b      	ldr	r3, [pc, #364]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4a5a      	ldr	r2, [pc, #360]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	6213      	str	r3, [r2, #32]
 800367e:	4b58      	ldr	r3, [pc, #352]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4a57      	ldr	r2, [pc, #348]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d015      	beq.n	80036be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003692:	f7fe fb65 	bl	8001d60 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fe fb61 	bl	8001d60 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0b1      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	4b4b      	ldr	r3, [pc, #300]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ee      	beq.n	800369a <HAL_RCC_OscConfig+0x37e>
 80036bc:	e014      	b.n	80036e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036be:	f7fe fb4f 	bl	8001d60 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fe fb4b 	bl	8001d60 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e09b      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ee      	bne.n	80036c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d105      	bne.n	80036fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4a3b      	ldr	r2, [pc, #236]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8087 	beq.w	8003812 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003704:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b08      	cmp	r3, #8
 800370e:	d061      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d146      	bne.n	80037a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003718:	4b33      	ldr	r3, [pc, #204]	; (80037e8 <HAL_RCC_OscConfig+0x4cc>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fe fb1f 	bl	8001d60 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003726:	f7fe fb1b 	bl	8001d60 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e06d      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003738:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f0      	bne.n	8003726 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d108      	bne.n	8003760 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	4921      	ldr	r1, [pc, #132]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	4313      	orrs	r3, r2
 800375e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003760:	4b1f      	ldr	r3, [pc, #124]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a19      	ldr	r1, [r3, #32]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	430b      	orrs	r3, r1
 8003772:	491b      	ldr	r1, [pc, #108]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003778:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x4cc>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fe faef 	bl	8001d60 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003786:	f7fe faeb 	bl	8001d60 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e03d      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x46a>
 80037a4:	e035      	b.n	8003812 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <HAL_RCC_OscConfig+0x4cc>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe fad8 	bl	8001d60 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe fad4 	bl	8001d60 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e026      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x498>
 80037d2:	e01e      	b.n	8003812 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d107      	bne.n	80037ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e019      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40007000 	.word	0x40007000
 80037e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_RCC_OscConfig+0x500>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d106      	bne.n	800380e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d001      	beq.n	8003812 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000

08003820 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0d0      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b6a      	ldr	r3, [pc, #424]	; (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d910      	bls.n	8003864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b67      	ldr	r3, [pc, #412]	; (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 0207 	bic.w	r2, r3, #7
 800384a:	4965      	ldr	r1, [pc, #404]	; (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b63      	ldr	r3, [pc, #396]	; (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0b8      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d020      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800387c:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a58      	ldr	r2, [pc, #352]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003886:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003894:	4b53      	ldr	r3, [pc, #332]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a52      	ldr	r2, [pc, #328]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800389e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a0:	4b50      	ldr	r3, [pc, #320]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	494d      	ldr	r1, [pc, #308]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d040      	beq.n	8003940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	4b47      	ldr	r3, [pc, #284]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d115      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e07f      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	4b41      	ldr	r3, [pc, #260]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e073      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ee:	4b3d      	ldr	r3, [pc, #244]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e06b      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fe:	4b39      	ldr	r3, [pc, #228]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f023 0203 	bic.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4936      	ldr	r1, [pc, #216]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003910:	f7fe fa26 	bl	8001d60 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	e00a      	b.n	800392e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003918:	f7fe fa22 	bl	8001d60 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e053      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 020c 	and.w	r2, r3, #12
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	429a      	cmp	r2, r3
 800393e:	d1eb      	bne.n	8003918 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003940:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d210      	bcs.n	8003970 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 0207 	bic.w	r2, r3, #7
 8003956:	4922      	ldr	r1, [pc, #136]	; (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e032      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4916      	ldr	r1, [pc, #88]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	490e      	ldr	r1, [pc, #56]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ae:	f000 f821 	bl	80039f4 <HAL_RCC_GetSysClockFreq>
 80039b2:	4602      	mov	r2, r0
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	490a      	ldr	r1, [pc, #40]	; (80039e8 <HAL_RCC_ClockConfig+0x1c8>)
 80039c0:	5ccb      	ldrb	r3, [r1, r3]
 80039c2:	fa22 f303 	lsr.w	r3, r2, r3
 80039c6:	4a09      	ldr	r2, [pc, #36]	; (80039ec <HAL_RCC_ClockConfig+0x1cc>)
 80039c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039ca:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCC_ClockConfig+0x1d0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe f984 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40022000 	.word	0x40022000
 80039e4:	40021000 	.word	0x40021000
 80039e8:	08006e4c 	.word	0x08006e4c
 80039ec:	2000000c 	.word	0x2000000c
 80039f0:	20000020 	.word	0x20000020

080039f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f4:	b490      	push	{r4, r7}
 80039f6:	b08a      	sub	sp, #40	; 0x28
 80039f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039fa:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xac>)
 80039fc:	1d3c      	adds	r4, r7, #4
 80039fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a04:	f240 2301 	movw	r3, #513	; 0x201
 8003a08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61bb      	str	r3, [r7, #24]
 8003a12:	2300      	movs	r3, #0
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a1e:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d002      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x40>
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d003      	beq.n	8003a3a <HAL_RCC_GetSysClockFreq+0x46>
 8003a32:	e02b      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a34:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a36:	623b      	str	r3, [r7, #32]
      break;
 8003a38:	e02b      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	0c9b      	lsrs	r3, r3, #18
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	3328      	adds	r3, #40	; 0x28
 8003a44:	443b      	add	r3, r7
 8003a46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a4a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d012      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	0c5b      	lsrs	r3, r3, #17
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	3328      	adds	r3, #40	; 0x28
 8003a62:	443b      	add	r3, r7
 8003a64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a6e:	fb03 f202 	mul.w	r2, r3, r2
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7a:	e004      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	4a0b      	ldr	r2, [pc, #44]	; (8003aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a80:	fb02 f303 	mul.w	r3, r2, r3
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	623b      	str	r3, [r7, #32]
      break;
 8003a8a:	e002      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a8e:	623b      	str	r3, [r7, #32]
      break;
 8003a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a92:	6a3b      	ldr	r3, [r7, #32]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3728      	adds	r7, #40	; 0x28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc90      	pop	{r4, r7}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	08006e3c 	.word	0x08006e3c
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	007a1200 	.word	0x007a1200
 8003aac:	003d0900 	.word	0x003d0900

08003ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab4:	4b02      	ldr	r3, [pc, #8]	; (8003ac0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	2000000c 	.word	0x2000000c

08003ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ac8:	f7ff fff2 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4903      	ldr	r1, [pc, #12]	; (8003ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	08006e5c 	.word	0x08006e5c

08003aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003af0:	f7ff ffde 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003af4:	4602      	mov	r2, r0
 8003af6:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	0adb      	lsrs	r3, r3, #11
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	4903      	ldr	r1, [pc, #12]	; (8003b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	08006e5c 	.word	0x08006e5c

08003b14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <RCC_Delay+0x34>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <RCC_Delay+0x38>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	0a5b      	lsrs	r3, r3, #9
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b30:	bf00      	nop
  }
  while (Delay --);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1e5a      	subs	r2, r3, #1
 8003b36:	60fa      	str	r2, [r7, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f9      	bne.n	8003b30 <RCC_Delay+0x1c>
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	2000000c 	.word	0x2000000c
 8003b4c:	10624dd3 	.word	0x10624dd3

08003b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e03f      	b.n	8003be2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd fbf6 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f905 	bl	8003da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b08a      	sub	sp, #40	; 0x28
 8003bee:	af02      	add	r7, sp, #8
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d17c      	bne.n	8003d04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_UART_Transmit+0x2c>
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e075      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_UART_Transmit+0x3e>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e06e      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2221      	movs	r2, #33	; 0x21
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c3e:	f7fe f88f 	bl	8001d60 <HAL_GetTick>
 8003c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	88fa      	ldrh	r2, [r7, #6]
 8003c48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	88fa      	ldrh	r2, [r7, #6]
 8003c4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c58:	d108      	bne.n	8003c6c <HAL_UART_Transmit+0x82>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d104      	bne.n	8003c6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	e003      	b.n	8003c74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c7c:	e02a      	b.n	8003cd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2180      	movs	r1, #128	; 0x80
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f840 	bl	8003d0e <UART_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e036      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	e007      	b.n	8003cc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	781a      	ldrb	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1cf      	bne.n	8003c7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2140      	movs	r1, #64	; 0x40
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f810 	bl	8003d0e <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e006      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d1e:	e02c      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d26:	d028      	beq.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d2e:	f7fe f817 	bl	8001d60 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d21d      	bcs.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d4c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e00f      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4013      	ands	r3, r2
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	bf0c      	ite	eq
 8003d8a:	2301      	moveq	r3, #1
 8003d8c:	2300      	movne	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d0c3      	beq.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003dde:	f023 030c 	bic.w	r3, r3, #12
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	430b      	orrs	r3, r1
 8003dea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <UART_SetConfig+0x114>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d103      	bne.n	8003e14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f7ff fe6e 	bl	8003aec <HAL_RCC_GetPCLK2Freq>
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	e002      	b.n	8003e1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7ff fe56 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 8003e18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	009a      	lsls	r2, r3, #2
 8003e24:	441a      	add	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <UART_SetConfig+0x118>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	0119      	lsls	r1, r3, #4
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	009a      	lsls	r2, r3, #2
 8003e44:	441a      	add	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <UART_SetConfig+0x118>)
 8003e52:	fba3 0302 	umull	r0, r3, r3, r2
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2064      	movs	r0, #100	; 0x64
 8003e5a:	fb00 f303 	mul.w	r3, r0, r3
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	3332      	adds	r3, #50	; 0x32
 8003e64:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <UART_SetConfig+0x118>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e70:	4419      	add	r1, r3
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009a      	lsls	r2, r3, #2
 8003e7c:	441a      	add	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <UART_SetConfig+0x118>)
 8003e8a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2064      	movs	r0, #100	; 0x64
 8003e92:	fb00 f303 	mul.w	r3, r0, r3
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	3332      	adds	r3, #50	; 0x32
 8003e9c:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <UART_SetConfig+0x118>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	f003 020f 	and.w	r2, r3, #15
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	440a      	add	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40013800 	.word	0x40013800
 8003ebc:	51eb851f 	.word	0x51eb851f

08003ec0 <__errno>:
 8003ec0:	4b01      	ldr	r3, [pc, #4]	; (8003ec8 <__errno+0x8>)
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	20000028 	.word	0x20000028

08003ecc <__libc_init_array>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	2600      	movs	r6, #0
 8003ed0:	4d0c      	ldr	r5, [pc, #48]	; (8003f04 <__libc_init_array+0x38>)
 8003ed2:	4c0d      	ldr	r4, [pc, #52]	; (8003f08 <__libc_init_array+0x3c>)
 8003ed4:	1b64      	subs	r4, r4, r5
 8003ed6:	10a4      	asrs	r4, r4, #2
 8003ed8:	42a6      	cmp	r6, r4
 8003eda:	d109      	bne.n	8003ef0 <__libc_init_array+0x24>
 8003edc:	f002 fefc 	bl	8006cd8 <_init>
 8003ee0:	2600      	movs	r6, #0
 8003ee2:	4d0a      	ldr	r5, [pc, #40]	; (8003f0c <__libc_init_array+0x40>)
 8003ee4:	4c0a      	ldr	r4, [pc, #40]	; (8003f10 <__libc_init_array+0x44>)
 8003ee6:	1b64      	subs	r4, r4, r5
 8003ee8:	10a4      	asrs	r4, r4, #2
 8003eea:	42a6      	cmp	r6, r4
 8003eec:	d105      	bne.n	8003efa <__libc_init_array+0x2e>
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
 8003ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef4:	4798      	blx	r3
 8003ef6:	3601      	adds	r6, #1
 8003ef8:	e7ee      	b.n	8003ed8 <__libc_init_array+0xc>
 8003efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efe:	4798      	blx	r3
 8003f00:	3601      	adds	r6, #1
 8003f02:	e7f2      	b.n	8003eea <__libc_init_array+0x1e>
 8003f04:	0800723c 	.word	0x0800723c
 8003f08:	0800723c 	.word	0x0800723c
 8003f0c:	0800723c 	.word	0x0800723c
 8003f10:	08007240 	.word	0x08007240

08003f14 <memset>:
 8003f14:	4603      	mov	r3, r0
 8003f16:	4402      	add	r2, r0
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d100      	bne.n	8003f1e <memset+0xa>
 8003f1c:	4770      	bx	lr
 8003f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f22:	e7f9      	b.n	8003f18 <memset+0x4>

08003f24 <__cvt>:
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f2a:	461f      	mov	r7, r3
 8003f2c:	bfbb      	ittet	lt
 8003f2e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f32:	461f      	movlt	r7, r3
 8003f34:	2300      	movge	r3, #0
 8003f36:	232d      	movlt	r3, #45	; 0x2d
 8003f38:	b088      	sub	sp, #32
 8003f3a:	4614      	mov	r4, r2
 8003f3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f3e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f40:	7013      	strb	r3, [r2, #0]
 8003f42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f44:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003f48:	f023 0820 	bic.w	r8, r3, #32
 8003f4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f50:	d005      	beq.n	8003f5e <__cvt+0x3a>
 8003f52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f56:	d100      	bne.n	8003f5a <__cvt+0x36>
 8003f58:	3501      	adds	r5, #1
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e000      	b.n	8003f60 <__cvt+0x3c>
 8003f5e:	2303      	movs	r3, #3
 8003f60:	aa07      	add	r2, sp, #28
 8003f62:	9204      	str	r2, [sp, #16]
 8003f64:	aa06      	add	r2, sp, #24
 8003f66:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f6a:	e9cd 3500 	strd	r3, r5, [sp]
 8003f6e:	4622      	mov	r2, r4
 8003f70:	463b      	mov	r3, r7
 8003f72:	f000 fce5 	bl	8004940 <_dtoa_r>
 8003f76:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	d102      	bne.n	8003f84 <__cvt+0x60>
 8003f7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f80:	07db      	lsls	r3, r3, #31
 8003f82:	d522      	bpl.n	8003fca <__cvt+0xa6>
 8003f84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f88:	eb06 0905 	add.w	r9, r6, r5
 8003f8c:	d110      	bne.n	8003fb0 <__cvt+0x8c>
 8003f8e:	7833      	ldrb	r3, [r6, #0]
 8003f90:	2b30      	cmp	r3, #48	; 0x30
 8003f92:	d10a      	bne.n	8003faa <__cvt+0x86>
 8003f94:	2200      	movs	r2, #0
 8003f96:	2300      	movs	r3, #0
 8003f98:	4620      	mov	r0, r4
 8003f9a:	4639      	mov	r1, r7
 8003f9c:	f7fc fd04 	bl	80009a8 <__aeabi_dcmpeq>
 8003fa0:	b918      	cbnz	r0, 8003faa <__cvt+0x86>
 8003fa2:	f1c5 0501 	rsb	r5, r5, #1
 8003fa6:	f8ca 5000 	str.w	r5, [sl]
 8003faa:	f8da 3000 	ldr.w	r3, [sl]
 8003fae:	4499      	add	r9, r3
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	4639      	mov	r1, r7
 8003fb8:	f7fc fcf6 	bl	80009a8 <__aeabi_dcmpeq>
 8003fbc:	b108      	cbz	r0, 8003fc2 <__cvt+0x9e>
 8003fbe:	f8cd 901c 	str.w	r9, [sp, #28]
 8003fc2:	2230      	movs	r2, #48	; 0x30
 8003fc4:	9b07      	ldr	r3, [sp, #28]
 8003fc6:	454b      	cmp	r3, r9
 8003fc8:	d307      	bcc.n	8003fda <__cvt+0xb6>
 8003fca:	4630      	mov	r0, r6
 8003fcc:	9b07      	ldr	r3, [sp, #28]
 8003fce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003fd0:	1b9b      	subs	r3, r3, r6
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	b008      	add	sp, #32
 8003fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fda:	1c59      	adds	r1, r3, #1
 8003fdc:	9107      	str	r1, [sp, #28]
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	e7f0      	b.n	8003fc4 <__cvt+0xa0>

08003fe2 <__exponent>:
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fe6:	2900      	cmp	r1, #0
 8003fe8:	f803 2b02 	strb.w	r2, [r3], #2
 8003fec:	bfb6      	itet	lt
 8003fee:	222d      	movlt	r2, #45	; 0x2d
 8003ff0:	222b      	movge	r2, #43	; 0x2b
 8003ff2:	4249      	neglt	r1, r1
 8003ff4:	2909      	cmp	r1, #9
 8003ff6:	7042      	strb	r2, [r0, #1]
 8003ff8:	dd2b      	ble.n	8004052 <__exponent+0x70>
 8003ffa:	f10d 0407 	add.w	r4, sp, #7
 8003ffe:	46a4      	mov	ip, r4
 8004000:	270a      	movs	r7, #10
 8004002:	fb91 f6f7 	sdiv	r6, r1, r7
 8004006:	460a      	mov	r2, r1
 8004008:	46a6      	mov	lr, r4
 800400a:	fb07 1516 	mls	r5, r7, r6, r1
 800400e:	2a63      	cmp	r2, #99	; 0x63
 8004010:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004014:	4631      	mov	r1, r6
 8004016:	f104 34ff 	add.w	r4, r4, #4294967295
 800401a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800401e:	dcf0      	bgt.n	8004002 <__exponent+0x20>
 8004020:	3130      	adds	r1, #48	; 0x30
 8004022:	f1ae 0502 	sub.w	r5, lr, #2
 8004026:	f804 1c01 	strb.w	r1, [r4, #-1]
 800402a:	4629      	mov	r1, r5
 800402c:	1c44      	adds	r4, r0, #1
 800402e:	4561      	cmp	r1, ip
 8004030:	d30a      	bcc.n	8004048 <__exponent+0x66>
 8004032:	f10d 0209 	add.w	r2, sp, #9
 8004036:	eba2 020e 	sub.w	r2, r2, lr
 800403a:	4565      	cmp	r5, ip
 800403c:	bf88      	it	hi
 800403e:	2200      	movhi	r2, #0
 8004040:	4413      	add	r3, r2
 8004042:	1a18      	subs	r0, r3, r0
 8004044:	b003      	add	sp, #12
 8004046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004048:	f811 2b01 	ldrb.w	r2, [r1], #1
 800404c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004050:	e7ed      	b.n	800402e <__exponent+0x4c>
 8004052:	2330      	movs	r3, #48	; 0x30
 8004054:	3130      	adds	r1, #48	; 0x30
 8004056:	7083      	strb	r3, [r0, #2]
 8004058:	70c1      	strb	r1, [r0, #3]
 800405a:	1d03      	adds	r3, r0, #4
 800405c:	e7f1      	b.n	8004042 <__exponent+0x60>
	...

08004060 <_printf_float>:
 8004060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004064:	b091      	sub	sp, #68	; 0x44
 8004066:	460c      	mov	r4, r1
 8004068:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800406c:	4616      	mov	r6, r2
 800406e:	461f      	mov	r7, r3
 8004070:	4605      	mov	r5, r0
 8004072:	f001 fa53 	bl	800551c <_localeconv_r>
 8004076:	6803      	ldr	r3, [r0, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	9309      	str	r3, [sp, #36]	; 0x24
 800407c:	f7fc f868 	bl	8000150 <strlen>
 8004080:	2300      	movs	r3, #0
 8004082:	930e      	str	r3, [sp, #56]	; 0x38
 8004084:	f8d8 3000 	ldr.w	r3, [r8]
 8004088:	900a      	str	r0, [sp, #40]	; 0x28
 800408a:	3307      	adds	r3, #7
 800408c:	f023 0307 	bic.w	r3, r3, #7
 8004090:	f103 0208 	add.w	r2, r3, #8
 8004094:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004098:	f8d4 b000 	ldr.w	fp, [r4]
 800409c:	f8c8 2000 	str.w	r2, [r8]
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040a8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80040ac:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80040b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80040b2:	f04f 32ff 	mov.w	r2, #4294967295
 80040b6:	4640      	mov	r0, r8
 80040b8:	4b9c      	ldr	r3, [pc, #624]	; (800432c <_printf_float+0x2cc>)
 80040ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040bc:	f7fc fca6 	bl	8000a0c <__aeabi_dcmpun>
 80040c0:	bb70      	cbnz	r0, 8004120 <_printf_float+0xc0>
 80040c2:	f04f 32ff 	mov.w	r2, #4294967295
 80040c6:	4640      	mov	r0, r8
 80040c8:	4b98      	ldr	r3, [pc, #608]	; (800432c <_printf_float+0x2cc>)
 80040ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040cc:	f7fc fc80 	bl	80009d0 <__aeabi_dcmple>
 80040d0:	bb30      	cbnz	r0, 8004120 <_printf_float+0xc0>
 80040d2:	2200      	movs	r2, #0
 80040d4:	2300      	movs	r3, #0
 80040d6:	4640      	mov	r0, r8
 80040d8:	4651      	mov	r1, sl
 80040da:	f7fc fc6f 	bl	80009bc <__aeabi_dcmplt>
 80040de:	b110      	cbz	r0, 80040e6 <_printf_float+0x86>
 80040e0:	232d      	movs	r3, #45	; 0x2d
 80040e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e6:	4b92      	ldr	r3, [pc, #584]	; (8004330 <_printf_float+0x2d0>)
 80040e8:	4892      	ldr	r0, [pc, #584]	; (8004334 <_printf_float+0x2d4>)
 80040ea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80040ee:	bf94      	ite	ls
 80040f0:	4698      	movls	r8, r3
 80040f2:	4680      	movhi	r8, r0
 80040f4:	2303      	movs	r3, #3
 80040f6:	f04f 0a00 	mov.w	sl, #0
 80040fa:	6123      	str	r3, [r4, #16]
 80040fc:	f02b 0304 	bic.w	r3, fp, #4
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	4633      	mov	r3, r6
 8004104:	4621      	mov	r1, r4
 8004106:	4628      	mov	r0, r5
 8004108:	9700      	str	r7, [sp, #0]
 800410a:	aa0f      	add	r2, sp, #60	; 0x3c
 800410c:	f000 f9d4 	bl	80044b8 <_printf_common>
 8004110:	3001      	adds	r0, #1
 8004112:	f040 8090 	bne.w	8004236 <_printf_float+0x1d6>
 8004116:	f04f 30ff 	mov.w	r0, #4294967295
 800411a:	b011      	add	sp, #68	; 0x44
 800411c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004120:	4642      	mov	r2, r8
 8004122:	4653      	mov	r3, sl
 8004124:	4640      	mov	r0, r8
 8004126:	4651      	mov	r1, sl
 8004128:	f7fc fc70 	bl	8000a0c <__aeabi_dcmpun>
 800412c:	b148      	cbz	r0, 8004142 <_printf_float+0xe2>
 800412e:	f1ba 0f00 	cmp.w	sl, #0
 8004132:	bfb8      	it	lt
 8004134:	232d      	movlt	r3, #45	; 0x2d
 8004136:	4880      	ldr	r0, [pc, #512]	; (8004338 <_printf_float+0x2d8>)
 8004138:	bfb8      	it	lt
 800413a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800413e:	4b7f      	ldr	r3, [pc, #508]	; (800433c <_printf_float+0x2dc>)
 8004140:	e7d3      	b.n	80040ea <_printf_float+0x8a>
 8004142:	6863      	ldr	r3, [r4, #4]
 8004144:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	d142      	bne.n	80041d2 <_printf_float+0x172>
 800414c:	2306      	movs	r3, #6
 800414e:	6063      	str	r3, [r4, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	9206      	str	r2, [sp, #24]
 8004154:	aa0e      	add	r2, sp, #56	; 0x38
 8004156:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800415a:	aa0d      	add	r2, sp, #52	; 0x34
 800415c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004160:	9203      	str	r2, [sp, #12]
 8004162:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004166:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	6863      	ldr	r3, [r4, #4]
 800416e:	4642      	mov	r2, r8
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	4628      	mov	r0, r5
 8004174:	4653      	mov	r3, sl
 8004176:	910b      	str	r1, [sp, #44]	; 0x2c
 8004178:	f7ff fed4 	bl	8003f24 <__cvt>
 800417c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800417e:	4680      	mov	r8, r0
 8004180:	2947      	cmp	r1, #71	; 0x47
 8004182:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004184:	d108      	bne.n	8004198 <_printf_float+0x138>
 8004186:	1cc8      	adds	r0, r1, #3
 8004188:	db02      	blt.n	8004190 <_printf_float+0x130>
 800418a:	6863      	ldr	r3, [r4, #4]
 800418c:	4299      	cmp	r1, r3
 800418e:	dd40      	ble.n	8004212 <_printf_float+0x1b2>
 8004190:	f1a9 0902 	sub.w	r9, r9, #2
 8004194:	fa5f f989 	uxtb.w	r9, r9
 8004198:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800419c:	d81f      	bhi.n	80041de <_printf_float+0x17e>
 800419e:	464a      	mov	r2, r9
 80041a0:	3901      	subs	r1, #1
 80041a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041a6:	910d      	str	r1, [sp, #52]	; 0x34
 80041a8:	f7ff ff1b 	bl	8003fe2 <__exponent>
 80041ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041ae:	4682      	mov	sl, r0
 80041b0:	1813      	adds	r3, r2, r0
 80041b2:	2a01      	cmp	r2, #1
 80041b4:	6123      	str	r3, [r4, #16]
 80041b6:	dc02      	bgt.n	80041be <_printf_float+0x15e>
 80041b8:	6822      	ldr	r2, [r4, #0]
 80041ba:	07d2      	lsls	r2, r2, #31
 80041bc:	d501      	bpl.n	80041c2 <_printf_float+0x162>
 80041be:	3301      	adds	r3, #1
 80041c0:	6123      	str	r3, [r4, #16]
 80041c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d09b      	beq.n	8004102 <_printf_float+0xa2>
 80041ca:	232d      	movs	r3, #45	; 0x2d
 80041cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d0:	e797      	b.n	8004102 <_printf_float+0xa2>
 80041d2:	2947      	cmp	r1, #71	; 0x47
 80041d4:	d1bc      	bne.n	8004150 <_printf_float+0xf0>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ba      	bne.n	8004150 <_printf_float+0xf0>
 80041da:	2301      	movs	r3, #1
 80041dc:	e7b7      	b.n	800414e <_printf_float+0xee>
 80041de:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80041e2:	d118      	bne.n	8004216 <_printf_float+0x1b6>
 80041e4:	2900      	cmp	r1, #0
 80041e6:	6863      	ldr	r3, [r4, #4]
 80041e8:	dd0b      	ble.n	8004202 <_printf_float+0x1a2>
 80041ea:	6121      	str	r1, [r4, #16]
 80041ec:	b913      	cbnz	r3, 80041f4 <_printf_float+0x194>
 80041ee:	6822      	ldr	r2, [r4, #0]
 80041f0:	07d0      	lsls	r0, r2, #31
 80041f2:	d502      	bpl.n	80041fa <_printf_float+0x19a>
 80041f4:	3301      	adds	r3, #1
 80041f6:	440b      	add	r3, r1
 80041f8:	6123      	str	r3, [r4, #16]
 80041fa:	f04f 0a00 	mov.w	sl, #0
 80041fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8004200:	e7df      	b.n	80041c2 <_printf_float+0x162>
 8004202:	b913      	cbnz	r3, 800420a <_printf_float+0x1aa>
 8004204:	6822      	ldr	r2, [r4, #0]
 8004206:	07d2      	lsls	r2, r2, #31
 8004208:	d501      	bpl.n	800420e <_printf_float+0x1ae>
 800420a:	3302      	adds	r3, #2
 800420c:	e7f4      	b.n	80041f8 <_printf_float+0x198>
 800420e:	2301      	movs	r3, #1
 8004210:	e7f2      	b.n	80041f8 <_printf_float+0x198>
 8004212:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004218:	4299      	cmp	r1, r3
 800421a:	db05      	blt.n	8004228 <_printf_float+0x1c8>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	6121      	str	r1, [r4, #16]
 8004220:	07d8      	lsls	r0, r3, #31
 8004222:	d5ea      	bpl.n	80041fa <_printf_float+0x19a>
 8004224:	1c4b      	adds	r3, r1, #1
 8004226:	e7e7      	b.n	80041f8 <_printf_float+0x198>
 8004228:	2900      	cmp	r1, #0
 800422a:	bfcc      	ite	gt
 800422c:	2201      	movgt	r2, #1
 800422e:	f1c1 0202 	rsble	r2, r1, #2
 8004232:	4413      	add	r3, r2
 8004234:	e7e0      	b.n	80041f8 <_printf_float+0x198>
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	055a      	lsls	r2, r3, #21
 800423a:	d407      	bmi.n	800424c <_printf_float+0x1ec>
 800423c:	6923      	ldr	r3, [r4, #16]
 800423e:	4642      	mov	r2, r8
 8004240:	4631      	mov	r1, r6
 8004242:	4628      	mov	r0, r5
 8004244:	47b8      	blx	r7
 8004246:	3001      	adds	r0, #1
 8004248:	d12b      	bne.n	80042a2 <_printf_float+0x242>
 800424a:	e764      	b.n	8004116 <_printf_float+0xb6>
 800424c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004250:	f240 80dd 	bls.w	800440e <_printf_float+0x3ae>
 8004254:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004258:	2200      	movs	r2, #0
 800425a:	2300      	movs	r3, #0
 800425c:	f7fc fba4 	bl	80009a8 <__aeabi_dcmpeq>
 8004260:	2800      	cmp	r0, #0
 8004262:	d033      	beq.n	80042cc <_printf_float+0x26c>
 8004264:	2301      	movs	r3, #1
 8004266:	4631      	mov	r1, r6
 8004268:	4628      	mov	r0, r5
 800426a:	4a35      	ldr	r2, [pc, #212]	; (8004340 <_printf_float+0x2e0>)
 800426c:	47b8      	blx	r7
 800426e:	3001      	adds	r0, #1
 8004270:	f43f af51 	beq.w	8004116 <_printf_float+0xb6>
 8004274:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004278:	429a      	cmp	r2, r3
 800427a:	db02      	blt.n	8004282 <_printf_float+0x222>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	07d8      	lsls	r0, r3, #31
 8004280:	d50f      	bpl.n	80042a2 <_printf_float+0x242>
 8004282:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004286:	4631      	mov	r1, r6
 8004288:	4628      	mov	r0, r5
 800428a:	47b8      	blx	r7
 800428c:	3001      	adds	r0, #1
 800428e:	f43f af42 	beq.w	8004116 <_printf_float+0xb6>
 8004292:	f04f 0800 	mov.w	r8, #0
 8004296:	f104 091a 	add.w	r9, r4, #26
 800429a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800429c:	3b01      	subs	r3, #1
 800429e:	4543      	cmp	r3, r8
 80042a0:	dc09      	bgt.n	80042b6 <_printf_float+0x256>
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	079b      	lsls	r3, r3, #30
 80042a6:	f100 8102 	bmi.w	80044ae <_printf_float+0x44e>
 80042aa:	68e0      	ldr	r0, [r4, #12]
 80042ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042ae:	4298      	cmp	r0, r3
 80042b0:	bfb8      	it	lt
 80042b2:	4618      	movlt	r0, r3
 80042b4:	e731      	b.n	800411a <_printf_float+0xba>
 80042b6:	2301      	movs	r3, #1
 80042b8:	464a      	mov	r2, r9
 80042ba:	4631      	mov	r1, r6
 80042bc:	4628      	mov	r0, r5
 80042be:	47b8      	blx	r7
 80042c0:	3001      	adds	r0, #1
 80042c2:	f43f af28 	beq.w	8004116 <_printf_float+0xb6>
 80042c6:	f108 0801 	add.w	r8, r8, #1
 80042ca:	e7e6      	b.n	800429a <_printf_float+0x23a>
 80042cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	dc38      	bgt.n	8004344 <_printf_float+0x2e4>
 80042d2:	2301      	movs	r3, #1
 80042d4:	4631      	mov	r1, r6
 80042d6:	4628      	mov	r0, r5
 80042d8:	4a19      	ldr	r2, [pc, #100]	; (8004340 <_printf_float+0x2e0>)
 80042da:	47b8      	blx	r7
 80042dc:	3001      	adds	r0, #1
 80042de:	f43f af1a 	beq.w	8004116 <_printf_float+0xb6>
 80042e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042e6:	4313      	orrs	r3, r2
 80042e8:	d102      	bne.n	80042f0 <_printf_float+0x290>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	07d9      	lsls	r1, r3, #31
 80042ee:	d5d8      	bpl.n	80042a2 <_printf_float+0x242>
 80042f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042f4:	4631      	mov	r1, r6
 80042f6:	4628      	mov	r0, r5
 80042f8:	47b8      	blx	r7
 80042fa:	3001      	adds	r0, #1
 80042fc:	f43f af0b 	beq.w	8004116 <_printf_float+0xb6>
 8004300:	f04f 0900 	mov.w	r9, #0
 8004304:	f104 0a1a 	add.w	sl, r4, #26
 8004308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800430a:	425b      	negs	r3, r3
 800430c:	454b      	cmp	r3, r9
 800430e:	dc01      	bgt.n	8004314 <_printf_float+0x2b4>
 8004310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004312:	e794      	b.n	800423e <_printf_float+0x1de>
 8004314:	2301      	movs	r3, #1
 8004316:	4652      	mov	r2, sl
 8004318:	4631      	mov	r1, r6
 800431a:	4628      	mov	r0, r5
 800431c:	47b8      	blx	r7
 800431e:	3001      	adds	r0, #1
 8004320:	f43f aef9 	beq.w	8004116 <_printf_float+0xb6>
 8004324:	f109 0901 	add.w	r9, r9, #1
 8004328:	e7ee      	b.n	8004308 <_printf_float+0x2a8>
 800432a:	bf00      	nop
 800432c:	7fefffff 	.word	0x7fefffff
 8004330:	08006e68 	.word	0x08006e68
 8004334:	08006e6c 	.word	0x08006e6c
 8004338:	08006e74 	.word	0x08006e74
 800433c:	08006e70 	.word	0x08006e70
 8004340:	08006e78 	.word	0x08006e78
 8004344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004348:	429a      	cmp	r2, r3
 800434a:	bfa8      	it	ge
 800434c:	461a      	movge	r2, r3
 800434e:	2a00      	cmp	r2, #0
 8004350:	4691      	mov	r9, r2
 8004352:	dc37      	bgt.n	80043c4 <_printf_float+0x364>
 8004354:	f04f 0b00 	mov.w	fp, #0
 8004358:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800435c:	f104 021a 	add.w	r2, r4, #26
 8004360:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004364:	ebaa 0309 	sub.w	r3, sl, r9
 8004368:	455b      	cmp	r3, fp
 800436a:	dc33      	bgt.n	80043d4 <_printf_float+0x374>
 800436c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004370:	429a      	cmp	r2, r3
 8004372:	db3b      	blt.n	80043ec <_printf_float+0x38c>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	07da      	lsls	r2, r3, #31
 8004378:	d438      	bmi.n	80043ec <_printf_float+0x38c>
 800437a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800437c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800437e:	eba3 020a 	sub.w	r2, r3, sl
 8004382:	eba3 0901 	sub.w	r9, r3, r1
 8004386:	4591      	cmp	r9, r2
 8004388:	bfa8      	it	ge
 800438a:	4691      	movge	r9, r2
 800438c:	f1b9 0f00 	cmp.w	r9, #0
 8004390:	dc34      	bgt.n	80043fc <_printf_float+0x39c>
 8004392:	f04f 0800 	mov.w	r8, #0
 8004396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800439a:	f104 0a1a 	add.w	sl, r4, #26
 800439e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	eba3 0309 	sub.w	r3, r3, r9
 80043a8:	4543      	cmp	r3, r8
 80043aa:	f77f af7a 	ble.w	80042a2 <_printf_float+0x242>
 80043ae:	2301      	movs	r3, #1
 80043b0:	4652      	mov	r2, sl
 80043b2:	4631      	mov	r1, r6
 80043b4:	4628      	mov	r0, r5
 80043b6:	47b8      	blx	r7
 80043b8:	3001      	adds	r0, #1
 80043ba:	f43f aeac 	beq.w	8004116 <_printf_float+0xb6>
 80043be:	f108 0801 	add.w	r8, r8, #1
 80043c2:	e7ec      	b.n	800439e <_printf_float+0x33e>
 80043c4:	4613      	mov	r3, r2
 80043c6:	4631      	mov	r1, r6
 80043c8:	4642      	mov	r2, r8
 80043ca:	4628      	mov	r0, r5
 80043cc:	47b8      	blx	r7
 80043ce:	3001      	adds	r0, #1
 80043d0:	d1c0      	bne.n	8004354 <_printf_float+0x2f4>
 80043d2:	e6a0      	b.n	8004116 <_printf_float+0xb6>
 80043d4:	2301      	movs	r3, #1
 80043d6:	4631      	mov	r1, r6
 80043d8:	4628      	mov	r0, r5
 80043da:	920b      	str	r2, [sp, #44]	; 0x2c
 80043dc:	47b8      	blx	r7
 80043de:	3001      	adds	r0, #1
 80043e0:	f43f ae99 	beq.w	8004116 <_printf_float+0xb6>
 80043e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043e6:	f10b 0b01 	add.w	fp, fp, #1
 80043ea:	e7b9      	b.n	8004360 <_printf_float+0x300>
 80043ec:	4631      	mov	r1, r6
 80043ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043f2:	4628      	mov	r0, r5
 80043f4:	47b8      	blx	r7
 80043f6:	3001      	adds	r0, #1
 80043f8:	d1bf      	bne.n	800437a <_printf_float+0x31a>
 80043fa:	e68c      	b.n	8004116 <_printf_float+0xb6>
 80043fc:	464b      	mov	r3, r9
 80043fe:	4631      	mov	r1, r6
 8004400:	4628      	mov	r0, r5
 8004402:	eb08 020a 	add.w	r2, r8, sl
 8004406:	47b8      	blx	r7
 8004408:	3001      	adds	r0, #1
 800440a:	d1c2      	bne.n	8004392 <_printf_float+0x332>
 800440c:	e683      	b.n	8004116 <_printf_float+0xb6>
 800440e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004410:	2a01      	cmp	r2, #1
 8004412:	dc01      	bgt.n	8004418 <_printf_float+0x3b8>
 8004414:	07db      	lsls	r3, r3, #31
 8004416:	d537      	bpl.n	8004488 <_printf_float+0x428>
 8004418:	2301      	movs	r3, #1
 800441a:	4642      	mov	r2, r8
 800441c:	4631      	mov	r1, r6
 800441e:	4628      	mov	r0, r5
 8004420:	47b8      	blx	r7
 8004422:	3001      	adds	r0, #1
 8004424:	f43f ae77 	beq.w	8004116 <_printf_float+0xb6>
 8004428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800442c:	4631      	mov	r1, r6
 800442e:	4628      	mov	r0, r5
 8004430:	47b8      	blx	r7
 8004432:	3001      	adds	r0, #1
 8004434:	f43f ae6f 	beq.w	8004116 <_printf_float+0xb6>
 8004438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800443c:	2200      	movs	r2, #0
 800443e:	2300      	movs	r3, #0
 8004440:	f7fc fab2 	bl	80009a8 <__aeabi_dcmpeq>
 8004444:	b9d8      	cbnz	r0, 800447e <_printf_float+0x41e>
 8004446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004448:	f108 0201 	add.w	r2, r8, #1
 800444c:	3b01      	subs	r3, #1
 800444e:	4631      	mov	r1, r6
 8004450:	4628      	mov	r0, r5
 8004452:	47b8      	blx	r7
 8004454:	3001      	adds	r0, #1
 8004456:	d10e      	bne.n	8004476 <_printf_float+0x416>
 8004458:	e65d      	b.n	8004116 <_printf_float+0xb6>
 800445a:	2301      	movs	r3, #1
 800445c:	464a      	mov	r2, r9
 800445e:	4631      	mov	r1, r6
 8004460:	4628      	mov	r0, r5
 8004462:	47b8      	blx	r7
 8004464:	3001      	adds	r0, #1
 8004466:	f43f ae56 	beq.w	8004116 <_printf_float+0xb6>
 800446a:	f108 0801 	add.w	r8, r8, #1
 800446e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004470:	3b01      	subs	r3, #1
 8004472:	4543      	cmp	r3, r8
 8004474:	dcf1      	bgt.n	800445a <_printf_float+0x3fa>
 8004476:	4653      	mov	r3, sl
 8004478:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800447c:	e6e0      	b.n	8004240 <_printf_float+0x1e0>
 800447e:	f04f 0800 	mov.w	r8, #0
 8004482:	f104 091a 	add.w	r9, r4, #26
 8004486:	e7f2      	b.n	800446e <_printf_float+0x40e>
 8004488:	2301      	movs	r3, #1
 800448a:	4642      	mov	r2, r8
 800448c:	e7df      	b.n	800444e <_printf_float+0x3ee>
 800448e:	2301      	movs	r3, #1
 8004490:	464a      	mov	r2, r9
 8004492:	4631      	mov	r1, r6
 8004494:	4628      	mov	r0, r5
 8004496:	47b8      	blx	r7
 8004498:	3001      	adds	r0, #1
 800449a:	f43f ae3c 	beq.w	8004116 <_printf_float+0xb6>
 800449e:	f108 0801 	add.w	r8, r8, #1
 80044a2:	68e3      	ldr	r3, [r4, #12]
 80044a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80044a6:	1a5b      	subs	r3, r3, r1
 80044a8:	4543      	cmp	r3, r8
 80044aa:	dcf0      	bgt.n	800448e <_printf_float+0x42e>
 80044ac:	e6fd      	b.n	80042aa <_printf_float+0x24a>
 80044ae:	f04f 0800 	mov.w	r8, #0
 80044b2:	f104 0919 	add.w	r9, r4, #25
 80044b6:	e7f4      	b.n	80044a2 <_printf_float+0x442>

080044b8 <_printf_common>:
 80044b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044bc:	4616      	mov	r6, r2
 80044be:	4699      	mov	r9, r3
 80044c0:	688a      	ldr	r2, [r1, #8]
 80044c2:	690b      	ldr	r3, [r1, #16]
 80044c4:	4607      	mov	r7, r0
 80044c6:	4293      	cmp	r3, r2
 80044c8:	bfb8      	it	lt
 80044ca:	4613      	movlt	r3, r2
 80044cc:	6033      	str	r3, [r6, #0]
 80044ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044d2:	460c      	mov	r4, r1
 80044d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044d8:	b10a      	cbz	r2, 80044de <_printf_common+0x26>
 80044da:	3301      	adds	r3, #1
 80044dc:	6033      	str	r3, [r6, #0]
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	0699      	lsls	r1, r3, #26
 80044e2:	bf42      	ittt	mi
 80044e4:	6833      	ldrmi	r3, [r6, #0]
 80044e6:	3302      	addmi	r3, #2
 80044e8:	6033      	strmi	r3, [r6, #0]
 80044ea:	6825      	ldr	r5, [r4, #0]
 80044ec:	f015 0506 	ands.w	r5, r5, #6
 80044f0:	d106      	bne.n	8004500 <_printf_common+0x48>
 80044f2:	f104 0a19 	add.w	sl, r4, #25
 80044f6:	68e3      	ldr	r3, [r4, #12]
 80044f8:	6832      	ldr	r2, [r6, #0]
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	42ab      	cmp	r3, r5
 80044fe:	dc28      	bgt.n	8004552 <_printf_common+0x9a>
 8004500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004504:	1e13      	subs	r3, r2, #0
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	bf18      	it	ne
 800450a:	2301      	movne	r3, #1
 800450c:	0692      	lsls	r2, r2, #26
 800450e:	d42d      	bmi.n	800456c <_printf_common+0xb4>
 8004510:	4649      	mov	r1, r9
 8004512:	4638      	mov	r0, r7
 8004514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004518:	47c0      	blx	r8
 800451a:	3001      	adds	r0, #1
 800451c:	d020      	beq.n	8004560 <_printf_common+0xa8>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	68e5      	ldr	r5, [r4, #12]
 8004522:	f003 0306 	and.w	r3, r3, #6
 8004526:	2b04      	cmp	r3, #4
 8004528:	bf18      	it	ne
 800452a:	2500      	movne	r5, #0
 800452c:	6832      	ldr	r2, [r6, #0]
 800452e:	f04f 0600 	mov.w	r6, #0
 8004532:	68a3      	ldr	r3, [r4, #8]
 8004534:	bf08      	it	eq
 8004536:	1aad      	subeq	r5, r5, r2
 8004538:	6922      	ldr	r2, [r4, #16]
 800453a:	bf08      	it	eq
 800453c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004540:	4293      	cmp	r3, r2
 8004542:	bfc4      	itt	gt
 8004544:	1a9b      	subgt	r3, r3, r2
 8004546:	18ed      	addgt	r5, r5, r3
 8004548:	341a      	adds	r4, #26
 800454a:	42b5      	cmp	r5, r6
 800454c:	d11a      	bne.n	8004584 <_printf_common+0xcc>
 800454e:	2000      	movs	r0, #0
 8004550:	e008      	b.n	8004564 <_printf_common+0xac>
 8004552:	2301      	movs	r3, #1
 8004554:	4652      	mov	r2, sl
 8004556:	4649      	mov	r1, r9
 8004558:	4638      	mov	r0, r7
 800455a:	47c0      	blx	r8
 800455c:	3001      	adds	r0, #1
 800455e:	d103      	bne.n	8004568 <_printf_common+0xb0>
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004568:	3501      	adds	r5, #1
 800456a:	e7c4      	b.n	80044f6 <_printf_common+0x3e>
 800456c:	2030      	movs	r0, #48	; 0x30
 800456e:	18e1      	adds	r1, r4, r3
 8004570:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800457a:	4422      	add	r2, r4
 800457c:	3302      	adds	r3, #2
 800457e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004582:	e7c5      	b.n	8004510 <_printf_common+0x58>
 8004584:	2301      	movs	r3, #1
 8004586:	4622      	mov	r2, r4
 8004588:	4649      	mov	r1, r9
 800458a:	4638      	mov	r0, r7
 800458c:	47c0      	blx	r8
 800458e:	3001      	adds	r0, #1
 8004590:	d0e6      	beq.n	8004560 <_printf_common+0xa8>
 8004592:	3601      	adds	r6, #1
 8004594:	e7d9      	b.n	800454a <_printf_common+0x92>
	...

08004598 <_printf_i>:
 8004598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	7e0f      	ldrb	r7, [r1, #24]
 800459e:	4691      	mov	r9, r2
 80045a0:	2f78      	cmp	r7, #120	; 0x78
 80045a2:	4680      	mov	r8, r0
 80045a4:	460c      	mov	r4, r1
 80045a6:	469a      	mov	sl, r3
 80045a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045ae:	d807      	bhi.n	80045c0 <_printf_i+0x28>
 80045b0:	2f62      	cmp	r7, #98	; 0x62
 80045b2:	d80a      	bhi.n	80045ca <_printf_i+0x32>
 80045b4:	2f00      	cmp	r7, #0
 80045b6:	f000 80d9 	beq.w	800476c <_printf_i+0x1d4>
 80045ba:	2f58      	cmp	r7, #88	; 0x58
 80045bc:	f000 80a4 	beq.w	8004708 <_printf_i+0x170>
 80045c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045c8:	e03a      	b.n	8004640 <_printf_i+0xa8>
 80045ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045ce:	2b15      	cmp	r3, #21
 80045d0:	d8f6      	bhi.n	80045c0 <_printf_i+0x28>
 80045d2:	a101      	add	r1, pc, #4	; (adr r1, 80045d8 <_printf_i+0x40>)
 80045d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045d8:	08004631 	.word	0x08004631
 80045dc:	08004645 	.word	0x08004645
 80045e0:	080045c1 	.word	0x080045c1
 80045e4:	080045c1 	.word	0x080045c1
 80045e8:	080045c1 	.word	0x080045c1
 80045ec:	080045c1 	.word	0x080045c1
 80045f0:	08004645 	.word	0x08004645
 80045f4:	080045c1 	.word	0x080045c1
 80045f8:	080045c1 	.word	0x080045c1
 80045fc:	080045c1 	.word	0x080045c1
 8004600:	080045c1 	.word	0x080045c1
 8004604:	08004753 	.word	0x08004753
 8004608:	08004675 	.word	0x08004675
 800460c:	08004735 	.word	0x08004735
 8004610:	080045c1 	.word	0x080045c1
 8004614:	080045c1 	.word	0x080045c1
 8004618:	08004775 	.word	0x08004775
 800461c:	080045c1 	.word	0x080045c1
 8004620:	08004675 	.word	0x08004675
 8004624:	080045c1 	.word	0x080045c1
 8004628:	080045c1 	.word	0x080045c1
 800462c:	0800473d 	.word	0x0800473d
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	1d1a      	adds	r2, r3, #4
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	602a      	str	r2, [r5, #0]
 8004638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800463c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004640:	2301      	movs	r3, #1
 8004642:	e0a4      	b.n	800478e <_printf_i+0x1f6>
 8004644:	6820      	ldr	r0, [r4, #0]
 8004646:	6829      	ldr	r1, [r5, #0]
 8004648:	0606      	lsls	r6, r0, #24
 800464a:	f101 0304 	add.w	r3, r1, #4
 800464e:	d50a      	bpl.n	8004666 <_printf_i+0xce>
 8004650:	680e      	ldr	r6, [r1, #0]
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	2e00      	cmp	r6, #0
 8004656:	da03      	bge.n	8004660 <_printf_i+0xc8>
 8004658:	232d      	movs	r3, #45	; 0x2d
 800465a:	4276      	negs	r6, r6
 800465c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004660:	230a      	movs	r3, #10
 8004662:	485e      	ldr	r0, [pc, #376]	; (80047dc <_printf_i+0x244>)
 8004664:	e019      	b.n	800469a <_printf_i+0x102>
 8004666:	680e      	ldr	r6, [r1, #0]
 8004668:	f010 0f40 	tst.w	r0, #64	; 0x40
 800466c:	602b      	str	r3, [r5, #0]
 800466e:	bf18      	it	ne
 8004670:	b236      	sxthne	r6, r6
 8004672:	e7ef      	b.n	8004654 <_printf_i+0xbc>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	6820      	ldr	r0, [r4, #0]
 8004678:	1d19      	adds	r1, r3, #4
 800467a:	6029      	str	r1, [r5, #0]
 800467c:	0601      	lsls	r1, r0, #24
 800467e:	d501      	bpl.n	8004684 <_printf_i+0xec>
 8004680:	681e      	ldr	r6, [r3, #0]
 8004682:	e002      	b.n	800468a <_printf_i+0xf2>
 8004684:	0646      	lsls	r6, r0, #25
 8004686:	d5fb      	bpl.n	8004680 <_printf_i+0xe8>
 8004688:	881e      	ldrh	r6, [r3, #0]
 800468a:	2f6f      	cmp	r7, #111	; 0x6f
 800468c:	bf0c      	ite	eq
 800468e:	2308      	moveq	r3, #8
 8004690:	230a      	movne	r3, #10
 8004692:	4852      	ldr	r0, [pc, #328]	; (80047dc <_printf_i+0x244>)
 8004694:	2100      	movs	r1, #0
 8004696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800469a:	6865      	ldr	r5, [r4, #4]
 800469c:	2d00      	cmp	r5, #0
 800469e:	bfa8      	it	ge
 80046a0:	6821      	ldrge	r1, [r4, #0]
 80046a2:	60a5      	str	r5, [r4, #8]
 80046a4:	bfa4      	itt	ge
 80046a6:	f021 0104 	bicge.w	r1, r1, #4
 80046aa:	6021      	strge	r1, [r4, #0]
 80046ac:	b90e      	cbnz	r6, 80046b2 <_printf_i+0x11a>
 80046ae:	2d00      	cmp	r5, #0
 80046b0:	d04d      	beq.n	800474e <_printf_i+0x1b6>
 80046b2:	4615      	mov	r5, r2
 80046b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80046b8:	fb03 6711 	mls	r7, r3, r1, r6
 80046bc:	5dc7      	ldrb	r7, [r0, r7]
 80046be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046c2:	4637      	mov	r7, r6
 80046c4:	42bb      	cmp	r3, r7
 80046c6:	460e      	mov	r6, r1
 80046c8:	d9f4      	bls.n	80046b4 <_printf_i+0x11c>
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d10b      	bne.n	80046e6 <_printf_i+0x14e>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	07de      	lsls	r6, r3, #31
 80046d2:	d508      	bpl.n	80046e6 <_printf_i+0x14e>
 80046d4:	6923      	ldr	r3, [r4, #16]
 80046d6:	6861      	ldr	r1, [r4, #4]
 80046d8:	4299      	cmp	r1, r3
 80046da:	bfde      	ittt	le
 80046dc:	2330      	movle	r3, #48	; 0x30
 80046de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046e6:	1b52      	subs	r2, r2, r5
 80046e8:	6122      	str	r2, [r4, #16]
 80046ea:	464b      	mov	r3, r9
 80046ec:	4621      	mov	r1, r4
 80046ee:	4640      	mov	r0, r8
 80046f0:	f8cd a000 	str.w	sl, [sp]
 80046f4:	aa03      	add	r2, sp, #12
 80046f6:	f7ff fedf 	bl	80044b8 <_printf_common>
 80046fa:	3001      	adds	r0, #1
 80046fc:	d14c      	bne.n	8004798 <_printf_i+0x200>
 80046fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004702:	b004      	add	sp, #16
 8004704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004708:	4834      	ldr	r0, [pc, #208]	; (80047dc <_printf_i+0x244>)
 800470a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800470e:	6829      	ldr	r1, [r5, #0]
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	f851 6b04 	ldr.w	r6, [r1], #4
 8004716:	6029      	str	r1, [r5, #0]
 8004718:	061d      	lsls	r5, r3, #24
 800471a:	d514      	bpl.n	8004746 <_printf_i+0x1ae>
 800471c:	07df      	lsls	r7, r3, #31
 800471e:	bf44      	itt	mi
 8004720:	f043 0320 	orrmi.w	r3, r3, #32
 8004724:	6023      	strmi	r3, [r4, #0]
 8004726:	b91e      	cbnz	r6, 8004730 <_printf_i+0x198>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	f023 0320 	bic.w	r3, r3, #32
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	2310      	movs	r3, #16
 8004732:	e7af      	b.n	8004694 <_printf_i+0xfc>
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	f043 0320 	orr.w	r3, r3, #32
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	2378      	movs	r3, #120	; 0x78
 800473e:	4828      	ldr	r0, [pc, #160]	; (80047e0 <_printf_i+0x248>)
 8004740:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004744:	e7e3      	b.n	800470e <_printf_i+0x176>
 8004746:	0659      	lsls	r1, r3, #25
 8004748:	bf48      	it	mi
 800474a:	b2b6      	uxthmi	r6, r6
 800474c:	e7e6      	b.n	800471c <_printf_i+0x184>
 800474e:	4615      	mov	r5, r2
 8004750:	e7bb      	b.n	80046ca <_printf_i+0x132>
 8004752:	682b      	ldr	r3, [r5, #0]
 8004754:	6826      	ldr	r6, [r4, #0]
 8004756:	1d18      	adds	r0, r3, #4
 8004758:	6961      	ldr	r1, [r4, #20]
 800475a:	6028      	str	r0, [r5, #0]
 800475c:	0635      	lsls	r5, r6, #24
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	d501      	bpl.n	8004766 <_printf_i+0x1ce>
 8004762:	6019      	str	r1, [r3, #0]
 8004764:	e002      	b.n	800476c <_printf_i+0x1d4>
 8004766:	0670      	lsls	r0, r6, #25
 8004768:	d5fb      	bpl.n	8004762 <_printf_i+0x1ca>
 800476a:	8019      	strh	r1, [r3, #0]
 800476c:	2300      	movs	r3, #0
 800476e:	4615      	mov	r5, r2
 8004770:	6123      	str	r3, [r4, #16]
 8004772:	e7ba      	b.n	80046ea <_printf_i+0x152>
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	2100      	movs	r1, #0
 8004778:	1d1a      	adds	r2, r3, #4
 800477a:	602a      	str	r2, [r5, #0]
 800477c:	681d      	ldr	r5, [r3, #0]
 800477e:	6862      	ldr	r2, [r4, #4]
 8004780:	4628      	mov	r0, r5
 8004782:	f000 fed7 	bl	8005534 <memchr>
 8004786:	b108      	cbz	r0, 800478c <_printf_i+0x1f4>
 8004788:	1b40      	subs	r0, r0, r5
 800478a:	6060      	str	r0, [r4, #4]
 800478c:	6863      	ldr	r3, [r4, #4]
 800478e:	6123      	str	r3, [r4, #16]
 8004790:	2300      	movs	r3, #0
 8004792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004796:	e7a8      	b.n	80046ea <_printf_i+0x152>
 8004798:	462a      	mov	r2, r5
 800479a:	4649      	mov	r1, r9
 800479c:	4640      	mov	r0, r8
 800479e:	6923      	ldr	r3, [r4, #16]
 80047a0:	47d0      	blx	sl
 80047a2:	3001      	adds	r0, #1
 80047a4:	d0ab      	beq.n	80046fe <_printf_i+0x166>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	079b      	lsls	r3, r3, #30
 80047aa:	d413      	bmi.n	80047d4 <_printf_i+0x23c>
 80047ac:	68e0      	ldr	r0, [r4, #12]
 80047ae:	9b03      	ldr	r3, [sp, #12]
 80047b0:	4298      	cmp	r0, r3
 80047b2:	bfb8      	it	lt
 80047b4:	4618      	movlt	r0, r3
 80047b6:	e7a4      	b.n	8004702 <_printf_i+0x16a>
 80047b8:	2301      	movs	r3, #1
 80047ba:	4632      	mov	r2, r6
 80047bc:	4649      	mov	r1, r9
 80047be:	4640      	mov	r0, r8
 80047c0:	47d0      	blx	sl
 80047c2:	3001      	adds	r0, #1
 80047c4:	d09b      	beq.n	80046fe <_printf_i+0x166>
 80047c6:	3501      	adds	r5, #1
 80047c8:	68e3      	ldr	r3, [r4, #12]
 80047ca:	9903      	ldr	r1, [sp, #12]
 80047cc:	1a5b      	subs	r3, r3, r1
 80047ce:	42ab      	cmp	r3, r5
 80047d0:	dcf2      	bgt.n	80047b8 <_printf_i+0x220>
 80047d2:	e7eb      	b.n	80047ac <_printf_i+0x214>
 80047d4:	2500      	movs	r5, #0
 80047d6:	f104 0619 	add.w	r6, r4, #25
 80047da:	e7f5      	b.n	80047c8 <_printf_i+0x230>
 80047dc:	08006e7a 	.word	0x08006e7a
 80047e0:	08006e8b 	.word	0x08006e8b

080047e4 <siprintf>:
 80047e4:	b40e      	push	{r1, r2, r3}
 80047e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047ea:	b500      	push	{lr}
 80047ec:	b09c      	sub	sp, #112	; 0x70
 80047ee:	ab1d      	add	r3, sp, #116	; 0x74
 80047f0:	9002      	str	r0, [sp, #8]
 80047f2:	9006      	str	r0, [sp, #24]
 80047f4:	9107      	str	r1, [sp, #28]
 80047f6:	9104      	str	r1, [sp, #16]
 80047f8:	4808      	ldr	r0, [pc, #32]	; (800481c <siprintf+0x38>)
 80047fa:	4909      	ldr	r1, [pc, #36]	; (8004820 <siprintf+0x3c>)
 80047fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004800:	9105      	str	r1, [sp, #20]
 8004802:	6800      	ldr	r0, [r0, #0]
 8004804:	a902      	add	r1, sp, #8
 8004806:	9301      	str	r3, [sp, #4]
 8004808:	f001 fb7e 	bl	8005f08 <_svfiprintf_r>
 800480c:	2200      	movs	r2, #0
 800480e:	9b02      	ldr	r3, [sp, #8]
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	b01c      	add	sp, #112	; 0x70
 8004814:	f85d eb04 	ldr.w	lr, [sp], #4
 8004818:	b003      	add	sp, #12
 800481a:	4770      	bx	lr
 800481c:	20000028 	.word	0x20000028
 8004820:	ffff0208 	.word	0xffff0208

08004824 <quorem>:
 8004824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004828:	6903      	ldr	r3, [r0, #16]
 800482a:	690c      	ldr	r4, [r1, #16]
 800482c:	4607      	mov	r7, r0
 800482e:	42a3      	cmp	r3, r4
 8004830:	f2c0 8082 	blt.w	8004938 <quorem+0x114>
 8004834:	3c01      	subs	r4, #1
 8004836:	f100 0514 	add.w	r5, r0, #20
 800483a:	f101 0814 	add.w	r8, r1, #20
 800483e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800484c:	3301      	adds	r3, #1
 800484e:	429a      	cmp	r2, r3
 8004850:	fbb2 f6f3 	udiv	r6, r2, r3
 8004854:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004858:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800485c:	d331      	bcc.n	80048c2 <quorem+0x9e>
 800485e:	f04f 0e00 	mov.w	lr, #0
 8004862:	4640      	mov	r0, r8
 8004864:	46ac      	mov	ip, r5
 8004866:	46f2      	mov	sl, lr
 8004868:	f850 2b04 	ldr.w	r2, [r0], #4
 800486c:	b293      	uxth	r3, r2
 800486e:	fb06 e303 	mla	r3, r6, r3, lr
 8004872:	0c12      	lsrs	r2, r2, #16
 8004874:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004878:	b29b      	uxth	r3, r3
 800487a:	fb06 e202 	mla	r2, r6, r2, lr
 800487e:	ebaa 0303 	sub.w	r3, sl, r3
 8004882:	f8dc a000 	ldr.w	sl, [ip]
 8004886:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800488a:	fa1f fa8a 	uxth.w	sl, sl
 800488e:	4453      	add	r3, sl
 8004890:	f8dc a000 	ldr.w	sl, [ip]
 8004894:	b292      	uxth	r2, r2
 8004896:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800489a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800489e:	b29b      	uxth	r3, r3
 80048a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048a4:	4581      	cmp	r9, r0
 80048a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80048aa:	f84c 3b04 	str.w	r3, [ip], #4
 80048ae:	d2db      	bcs.n	8004868 <quorem+0x44>
 80048b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80048b4:	b92b      	cbnz	r3, 80048c2 <quorem+0x9e>
 80048b6:	9b01      	ldr	r3, [sp, #4]
 80048b8:	3b04      	subs	r3, #4
 80048ba:	429d      	cmp	r5, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	d32f      	bcc.n	8004920 <quorem+0xfc>
 80048c0:	613c      	str	r4, [r7, #16]
 80048c2:	4638      	mov	r0, r7
 80048c4:	f001 f8d0 	bl	8005a68 <__mcmp>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	db25      	blt.n	8004918 <quorem+0xf4>
 80048cc:	4628      	mov	r0, r5
 80048ce:	f04f 0c00 	mov.w	ip, #0
 80048d2:	3601      	adds	r6, #1
 80048d4:	f858 1b04 	ldr.w	r1, [r8], #4
 80048d8:	f8d0 e000 	ldr.w	lr, [r0]
 80048dc:	b28b      	uxth	r3, r1
 80048de:	ebac 0303 	sub.w	r3, ip, r3
 80048e2:	fa1f f28e 	uxth.w	r2, lr
 80048e6:	4413      	add	r3, r2
 80048e8:	0c0a      	lsrs	r2, r1, #16
 80048ea:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048f8:	45c1      	cmp	r9, r8
 80048fa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80048fe:	f840 3b04 	str.w	r3, [r0], #4
 8004902:	d2e7      	bcs.n	80048d4 <quorem+0xb0>
 8004904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004908:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800490c:	b922      	cbnz	r2, 8004918 <quorem+0xf4>
 800490e:	3b04      	subs	r3, #4
 8004910:	429d      	cmp	r5, r3
 8004912:	461a      	mov	r2, r3
 8004914:	d30a      	bcc.n	800492c <quorem+0x108>
 8004916:	613c      	str	r4, [r7, #16]
 8004918:	4630      	mov	r0, r6
 800491a:	b003      	add	sp, #12
 800491c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	3b04      	subs	r3, #4
 8004924:	2a00      	cmp	r2, #0
 8004926:	d1cb      	bne.n	80048c0 <quorem+0x9c>
 8004928:	3c01      	subs	r4, #1
 800492a:	e7c6      	b.n	80048ba <quorem+0x96>
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	3b04      	subs	r3, #4
 8004930:	2a00      	cmp	r2, #0
 8004932:	d1f0      	bne.n	8004916 <quorem+0xf2>
 8004934:	3c01      	subs	r4, #1
 8004936:	e7eb      	b.n	8004910 <quorem+0xec>
 8004938:	2000      	movs	r0, #0
 800493a:	e7ee      	b.n	800491a <quorem+0xf6>
 800493c:	0000      	movs	r0, r0
	...

08004940 <_dtoa_r>:
 8004940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004944:	4616      	mov	r6, r2
 8004946:	461f      	mov	r7, r3
 8004948:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800494a:	b099      	sub	sp, #100	; 0x64
 800494c:	4605      	mov	r5, r0
 800494e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004952:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004956:	b974      	cbnz	r4, 8004976 <_dtoa_r+0x36>
 8004958:	2010      	movs	r0, #16
 800495a:	f000 fde3 	bl	8005524 <malloc>
 800495e:	4602      	mov	r2, r0
 8004960:	6268      	str	r0, [r5, #36]	; 0x24
 8004962:	b920      	cbnz	r0, 800496e <_dtoa_r+0x2e>
 8004964:	21ea      	movs	r1, #234	; 0xea
 8004966:	4ba8      	ldr	r3, [pc, #672]	; (8004c08 <_dtoa_r+0x2c8>)
 8004968:	48a8      	ldr	r0, [pc, #672]	; (8004c0c <_dtoa_r+0x2cc>)
 800496a:	f001 fbdd 	bl	8006128 <__assert_func>
 800496e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004972:	6004      	str	r4, [r0, #0]
 8004974:	60c4      	str	r4, [r0, #12]
 8004976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004978:	6819      	ldr	r1, [r3, #0]
 800497a:	b151      	cbz	r1, 8004992 <_dtoa_r+0x52>
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	2301      	movs	r3, #1
 8004980:	4093      	lsls	r3, r2
 8004982:	604a      	str	r2, [r1, #4]
 8004984:	608b      	str	r3, [r1, #8]
 8004986:	4628      	mov	r0, r5
 8004988:	f000 fe30 	bl	80055ec <_Bfree>
 800498c:	2200      	movs	r2, #0
 800498e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	1e3b      	subs	r3, r7, #0
 8004994:	bfaf      	iteee	ge
 8004996:	2300      	movge	r3, #0
 8004998:	2201      	movlt	r2, #1
 800499a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800499e:	9305      	strlt	r3, [sp, #20]
 80049a0:	bfa8      	it	ge
 80049a2:	f8c8 3000 	strge.w	r3, [r8]
 80049a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80049aa:	4b99      	ldr	r3, [pc, #612]	; (8004c10 <_dtoa_r+0x2d0>)
 80049ac:	bfb8      	it	lt
 80049ae:	f8c8 2000 	strlt.w	r2, [r8]
 80049b2:	ea33 0309 	bics.w	r3, r3, r9
 80049b6:	d119      	bne.n	80049ec <_dtoa_r+0xac>
 80049b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80049bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80049c4:	4333      	orrs	r3, r6
 80049c6:	f000 857f 	beq.w	80054c8 <_dtoa_r+0xb88>
 80049ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80049cc:	b953      	cbnz	r3, 80049e4 <_dtoa_r+0xa4>
 80049ce:	4b91      	ldr	r3, [pc, #580]	; (8004c14 <_dtoa_r+0x2d4>)
 80049d0:	e022      	b.n	8004a18 <_dtoa_r+0xd8>
 80049d2:	4b91      	ldr	r3, [pc, #580]	; (8004c18 <_dtoa_r+0x2d8>)
 80049d4:	9303      	str	r3, [sp, #12]
 80049d6:	3308      	adds	r3, #8
 80049d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	9803      	ldr	r0, [sp, #12]
 80049de:	b019      	add	sp, #100	; 0x64
 80049e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e4:	4b8b      	ldr	r3, [pc, #556]	; (8004c14 <_dtoa_r+0x2d4>)
 80049e6:	9303      	str	r3, [sp, #12]
 80049e8:	3303      	adds	r3, #3
 80049ea:	e7f5      	b.n	80049d8 <_dtoa_r+0x98>
 80049ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80049f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80049f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049f8:	2200      	movs	r2, #0
 80049fa:	2300      	movs	r3, #0
 80049fc:	f7fb ffd4 	bl	80009a8 <__aeabi_dcmpeq>
 8004a00:	4680      	mov	r8, r0
 8004a02:	b158      	cbz	r0, 8004a1c <_dtoa_r+0xdc>
 8004a04:	2301      	movs	r3, #1
 8004a06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8558 	beq.w	80054c2 <_dtoa_r+0xb82>
 8004a12:	4882      	ldr	r0, [pc, #520]	; (8004c1c <_dtoa_r+0x2dc>)
 8004a14:	6018      	str	r0, [r3, #0]
 8004a16:	1e43      	subs	r3, r0, #1
 8004a18:	9303      	str	r3, [sp, #12]
 8004a1a:	e7df      	b.n	80049dc <_dtoa_r+0x9c>
 8004a1c:	ab16      	add	r3, sp, #88	; 0x58
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	ab17      	add	r3, sp, #92	; 0x5c
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4628      	mov	r0, r5
 8004a26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a2a:	f001 f8c5 	bl	8005bb8 <__d2b>
 8004a2e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004a32:	4683      	mov	fp, r0
 8004a34:	2c00      	cmp	r4, #0
 8004a36:	d07f      	beq.n	8004b38 <_dtoa_r+0x1f8>
 8004a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a3e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a46:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004a4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004a4e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004a52:	2200      	movs	r2, #0
 8004a54:	4b72      	ldr	r3, [pc, #456]	; (8004c20 <_dtoa_r+0x2e0>)
 8004a56:	f7fb fb87 	bl	8000168 <__aeabi_dsub>
 8004a5a:	a365      	add	r3, pc, #404	; (adr r3, 8004bf0 <_dtoa_r+0x2b0>)
 8004a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a60:	f7fb fd3a 	bl	80004d8 <__aeabi_dmul>
 8004a64:	a364      	add	r3, pc, #400	; (adr r3, 8004bf8 <_dtoa_r+0x2b8>)
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f7fb fb7f 	bl	800016c <__adddf3>
 8004a6e:	4606      	mov	r6, r0
 8004a70:	4620      	mov	r0, r4
 8004a72:	460f      	mov	r7, r1
 8004a74:	f7fb fcc6 	bl	8000404 <__aeabi_i2d>
 8004a78:	a361      	add	r3, pc, #388	; (adr r3, 8004c00 <_dtoa_r+0x2c0>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f7fb fd2b 	bl	80004d8 <__aeabi_dmul>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4630      	mov	r0, r6
 8004a88:	4639      	mov	r1, r7
 8004a8a:	f7fb fb6f 	bl	800016c <__adddf3>
 8004a8e:	4606      	mov	r6, r0
 8004a90:	460f      	mov	r7, r1
 8004a92:	f7fb ffd1 	bl	8000a38 <__aeabi_d2iz>
 8004a96:	2200      	movs	r2, #0
 8004a98:	4682      	mov	sl, r0
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	4639      	mov	r1, r7
 8004aa0:	f7fb ff8c 	bl	80009bc <__aeabi_dcmplt>
 8004aa4:	b148      	cbz	r0, 8004aba <_dtoa_r+0x17a>
 8004aa6:	4650      	mov	r0, sl
 8004aa8:	f7fb fcac 	bl	8000404 <__aeabi_i2d>
 8004aac:	4632      	mov	r2, r6
 8004aae:	463b      	mov	r3, r7
 8004ab0:	f7fb ff7a 	bl	80009a8 <__aeabi_dcmpeq>
 8004ab4:	b908      	cbnz	r0, 8004aba <_dtoa_r+0x17a>
 8004ab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004aba:	f1ba 0f16 	cmp.w	sl, #22
 8004abe:	d858      	bhi.n	8004b72 <_dtoa_r+0x232>
 8004ac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ac4:	4b57      	ldr	r3, [pc, #348]	; (8004c24 <_dtoa_r+0x2e4>)
 8004ac6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f7fb ff75 	bl	80009bc <__aeabi_dcmplt>
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d04f      	beq.n	8004b76 <_dtoa_r+0x236>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004adc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ade:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004ae0:	1b1c      	subs	r4, r3, r4
 8004ae2:	1e63      	subs	r3, r4, #1
 8004ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae6:	bf49      	itett	mi
 8004ae8:	f1c4 0301 	rsbmi	r3, r4, #1
 8004aec:	2300      	movpl	r3, #0
 8004aee:	9306      	strmi	r3, [sp, #24]
 8004af0:	2300      	movmi	r3, #0
 8004af2:	bf54      	ite	pl
 8004af4:	9306      	strpl	r3, [sp, #24]
 8004af6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004af8:	f1ba 0f00 	cmp.w	sl, #0
 8004afc:	db3d      	blt.n	8004b7a <_dtoa_r+0x23a>
 8004afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b00:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004b04:	4453      	add	r3, sl
 8004b06:	9309      	str	r3, [sp, #36]	; 0x24
 8004b08:	2300      	movs	r3, #0
 8004b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8004b0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b0e:	2b09      	cmp	r3, #9
 8004b10:	f200 808c 	bhi.w	8004c2c <_dtoa_r+0x2ec>
 8004b14:	2b05      	cmp	r3, #5
 8004b16:	bfc4      	itt	gt
 8004b18:	3b04      	subgt	r3, #4
 8004b1a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b1e:	bfc8      	it	gt
 8004b20:	2400      	movgt	r4, #0
 8004b22:	f1a3 0302 	sub.w	r3, r3, #2
 8004b26:	bfd8      	it	le
 8004b28:	2401      	movle	r4, #1
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	f200 808a 	bhi.w	8004c44 <_dtoa_r+0x304>
 8004b30:	e8df f003 	tbb	[pc, r3]
 8004b34:	5b4d4f2d 	.word	0x5b4d4f2d
 8004b38:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004b3c:	441c      	add	r4, r3
 8004b3e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	bfc3      	ittte	gt
 8004b46:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004b4a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004b4e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004b52:	f1c3 0320 	rsble	r3, r3, #32
 8004b56:	bfc6      	itte	gt
 8004b58:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004b5c:	4318      	orrgt	r0, r3
 8004b5e:	fa06 f003 	lslle.w	r0, r6, r3
 8004b62:	f7fb fc3f 	bl	80003e4 <__aeabi_ui2d>
 8004b66:	2301      	movs	r3, #1
 8004b68:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004b6c:	3c01      	subs	r4, #1
 8004b6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b70:	e76f      	b.n	8004a52 <_dtoa_r+0x112>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e7b2      	b.n	8004adc <_dtoa_r+0x19c>
 8004b76:	900f      	str	r0, [sp, #60]	; 0x3c
 8004b78:	e7b1      	b.n	8004ade <_dtoa_r+0x19e>
 8004b7a:	9b06      	ldr	r3, [sp, #24]
 8004b7c:	eba3 030a 	sub.w	r3, r3, sl
 8004b80:	9306      	str	r3, [sp, #24]
 8004b82:	f1ca 0300 	rsb	r3, sl, #0
 8004b86:	930a      	str	r3, [sp, #40]	; 0x28
 8004b88:	2300      	movs	r3, #0
 8004b8a:	930e      	str	r3, [sp, #56]	; 0x38
 8004b8c:	e7be      	b.n	8004b0c <_dtoa_r+0x1cc>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	dc58      	bgt.n	8004c4a <_dtoa_r+0x30a>
 8004b98:	f04f 0901 	mov.w	r9, #1
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004ba2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004baa:	6042      	str	r2, [r0, #4]
 8004bac:	2204      	movs	r2, #4
 8004bae:	f102 0614 	add.w	r6, r2, #20
 8004bb2:	429e      	cmp	r6, r3
 8004bb4:	6841      	ldr	r1, [r0, #4]
 8004bb6:	d94e      	bls.n	8004c56 <_dtoa_r+0x316>
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f000 fcd7 	bl	800556c <_Balloc>
 8004bbe:	9003      	str	r0, [sp, #12]
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d14c      	bne.n	8004c5e <_dtoa_r+0x31e>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004bca:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <_dtoa_r+0x2e8>)
 8004bcc:	e6cc      	b.n	8004968 <_dtoa_r+0x28>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e7de      	b.n	8004b90 <_dtoa_r+0x250>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bd8:	eb0a 0903 	add.w	r9, sl, r3
 8004bdc:	f109 0301 	add.w	r3, r9, #1
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	9308      	str	r3, [sp, #32]
 8004be4:	bfb8      	it	lt
 8004be6:	2301      	movlt	r3, #1
 8004be8:	e7dd      	b.n	8004ba6 <_dtoa_r+0x266>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e7f2      	b.n	8004bd4 <_dtoa_r+0x294>
 8004bee:	bf00      	nop
 8004bf0:	636f4361 	.word	0x636f4361
 8004bf4:	3fd287a7 	.word	0x3fd287a7
 8004bf8:	8b60c8b3 	.word	0x8b60c8b3
 8004bfc:	3fc68a28 	.word	0x3fc68a28
 8004c00:	509f79fb 	.word	0x509f79fb
 8004c04:	3fd34413 	.word	0x3fd34413
 8004c08:	08006ea9 	.word	0x08006ea9
 8004c0c:	08006ec0 	.word	0x08006ec0
 8004c10:	7ff00000 	.word	0x7ff00000
 8004c14:	08006ea5 	.word	0x08006ea5
 8004c18:	08006e9c 	.word	0x08006e9c
 8004c1c:	08006e79 	.word	0x08006e79
 8004c20:	3ff80000 	.word	0x3ff80000
 8004c24:	08006fb0 	.word	0x08006fb0
 8004c28:	08006f1b 	.word	0x08006f1b
 8004c2c:	2401      	movs	r4, #1
 8004c2e:	2300      	movs	r3, #0
 8004c30:	940b      	str	r4, [sp, #44]	; 0x2c
 8004c32:	9322      	str	r3, [sp, #136]	; 0x88
 8004c34:	f04f 39ff 	mov.w	r9, #4294967295
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2312      	movs	r3, #18
 8004c3c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004c40:	9223      	str	r2, [sp, #140]	; 0x8c
 8004c42:	e7b0      	b.n	8004ba6 <_dtoa_r+0x266>
 8004c44:	2301      	movs	r3, #1
 8004c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c48:	e7f4      	b.n	8004c34 <_dtoa_r+0x2f4>
 8004c4a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004c4e:	464b      	mov	r3, r9
 8004c50:	f8cd 9020 	str.w	r9, [sp, #32]
 8004c54:	e7a7      	b.n	8004ba6 <_dtoa_r+0x266>
 8004c56:	3101      	adds	r1, #1
 8004c58:	6041      	str	r1, [r0, #4]
 8004c5a:	0052      	lsls	r2, r2, #1
 8004c5c:	e7a7      	b.n	8004bae <_dtoa_r+0x26e>
 8004c5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c60:	9a03      	ldr	r2, [sp, #12]
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	9b08      	ldr	r3, [sp, #32]
 8004c66:	2b0e      	cmp	r3, #14
 8004c68:	f200 80a8 	bhi.w	8004dbc <_dtoa_r+0x47c>
 8004c6c:	2c00      	cmp	r4, #0
 8004c6e:	f000 80a5 	beq.w	8004dbc <_dtoa_r+0x47c>
 8004c72:	f1ba 0f00 	cmp.w	sl, #0
 8004c76:	dd34      	ble.n	8004ce2 <_dtoa_r+0x3a2>
 8004c78:	4a9a      	ldr	r2, [pc, #616]	; (8004ee4 <_dtoa_r+0x5a4>)
 8004c7a:	f00a 030f 	and.w	r3, sl, #15
 8004c7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c82:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004c86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004c8e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004c92:	d016      	beq.n	8004cc2 <_dtoa_r+0x382>
 8004c94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c98:	4b93      	ldr	r3, [pc, #588]	; (8004ee8 <_dtoa_r+0x5a8>)
 8004c9a:	2703      	movs	r7, #3
 8004c9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ca0:	f7fb fd44 	bl	800072c <__aeabi_ddiv>
 8004ca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ca8:	f004 040f 	and.w	r4, r4, #15
 8004cac:	4e8e      	ldr	r6, [pc, #568]	; (8004ee8 <_dtoa_r+0x5a8>)
 8004cae:	b954      	cbnz	r4, 8004cc6 <_dtoa_r+0x386>
 8004cb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cb8:	f7fb fd38 	bl	800072c <__aeabi_ddiv>
 8004cbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cc0:	e029      	b.n	8004d16 <_dtoa_r+0x3d6>
 8004cc2:	2702      	movs	r7, #2
 8004cc4:	e7f2      	b.n	8004cac <_dtoa_r+0x36c>
 8004cc6:	07e1      	lsls	r1, r4, #31
 8004cc8:	d508      	bpl.n	8004cdc <_dtoa_r+0x39c>
 8004cca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004cce:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004cd2:	f7fb fc01 	bl	80004d8 <__aeabi_dmul>
 8004cd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cda:	3701      	adds	r7, #1
 8004cdc:	1064      	asrs	r4, r4, #1
 8004cde:	3608      	adds	r6, #8
 8004ce0:	e7e5      	b.n	8004cae <_dtoa_r+0x36e>
 8004ce2:	f000 80a5 	beq.w	8004e30 <_dtoa_r+0x4f0>
 8004ce6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cea:	f1ca 0400 	rsb	r4, sl, #0
 8004cee:	4b7d      	ldr	r3, [pc, #500]	; (8004ee4 <_dtoa_r+0x5a4>)
 8004cf0:	f004 020f 	and.w	r2, r4, #15
 8004cf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f7fb fbec 	bl	80004d8 <__aeabi_dmul>
 8004d00:	2702      	movs	r7, #2
 8004d02:	2300      	movs	r3, #0
 8004d04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d08:	4e77      	ldr	r6, [pc, #476]	; (8004ee8 <_dtoa_r+0x5a8>)
 8004d0a:	1124      	asrs	r4, r4, #4
 8004d0c:	2c00      	cmp	r4, #0
 8004d0e:	f040 8084 	bne.w	8004e1a <_dtoa_r+0x4da>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1d2      	bne.n	8004cbc <_dtoa_r+0x37c>
 8004d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 808b 	beq.w	8004e34 <_dtoa_r+0x4f4>
 8004d1e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004d26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	4b6f      	ldr	r3, [pc, #444]	; (8004eec <_dtoa_r+0x5ac>)
 8004d2e:	f7fb fe45 	bl	80009bc <__aeabi_dcmplt>
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d07e      	beq.n	8004e34 <_dtoa_r+0x4f4>
 8004d36:	9b08      	ldr	r3, [sp, #32]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d07b      	beq.n	8004e34 <_dtoa_r+0x4f4>
 8004d3c:	f1b9 0f00 	cmp.w	r9, #0
 8004d40:	dd38      	ble.n	8004db4 <_dtoa_r+0x474>
 8004d42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d46:	2200      	movs	r2, #0
 8004d48:	4b69      	ldr	r3, [pc, #420]	; (8004ef0 <_dtoa_r+0x5b0>)
 8004d4a:	f7fb fbc5 	bl	80004d8 <__aeabi_dmul>
 8004d4e:	464c      	mov	r4, r9
 8004d50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d54:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004d58:	3701      	adds	r7, #1
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	f7fb fb52 	bl	8000404 <__aeabi_i2d>
 8004d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d64:	f7fb fbb8 	bl	80004d8 <__aeabi_dmul>
 8004d68:	2200      	movs	r2, #0
 8004d6a:	4b62      	ldr	r3, [pc, #392]	; (8004ef4 <_dtoa_r+0x5b4>)
 8004d6c:	f7fb f9fe 	bl	800016c <__adddf3>
 8004d70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004d74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d78:	9611      	str	r6, [sp, #68]	; 0x44
 8004d7a:	2c00      	cmp	r4, #0
 8004d7c:	d15d      	bne.n	8004e3a <_dtoa_r+0x4fa>
 8004d7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d82:	2200      	movs	r2, #0
 8004d84:	4b5c      	ldr	r3, [pc, #368]	; (8004ef8 <_dtoa_r+0x5b8>)
 8004d86:	f7fb f9ef 	bl	8000168 <__aeabi_dsub>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d92:	4633      	mov	r3, r6
 8004d94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d96:	f7fb fe2f 	bl	80009f8 <__aeabi_dcmpgt>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	f040 829c 	bne.w	80052d8 <_dtoa_r+0x998>
 8004da0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004da4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004da6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004daa:	f7fb fe07 	bl	80009bc <__aeabi_dcmplt>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	f040 8290 	bne.w	80052d4 <_dtoa_r+0x994>
 8004db4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004db8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004dbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f2c0 8152 	blt.w	8005068 <_dtoa_r+0x728>
 8004dc4:	f1ba 0f0e 	cmp.w	sl, #14
 8004dc8:	f300 814e 	bgt.w	8005068 <_dtoa_r+0x728>
 8004dcc:	4b45      	ldr	r3, [pc, #276]	; (8004ee4 <_dtoa_r+0x5a4>)
 8004dce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004dd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004dd6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004dda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f280 80db 	bge.w	8004f98 <_dtoa_r+0x658>
 8004de2:	9b08      	ldr	r3, [sp, #32]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f300 80d7 	bgt.w	8004f98 <_dtoa_r+0x658>
 8004dea:	f040 8272 	bne.w	80052d2 <_dtoa_r+0x992>
 8004dee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004df2:	2200      	movs	r2, #0
 8004df4:	4b40      	ldr	r3, [pc, #256]	; (8004ef8 <_dtoa_r+0x5b8>)
 8004df6:	f7fb fb6f 	bl	80004d8 <__aeabi_dmul>
 8004dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dfe:	f7fb fdf1 	bl	80009e4 <__aeabi_dcmpge>
 8004e02:	9c08      	ldr	r4, [sp, #32]
 8004e04:	4626      	mov	r6, r4
 8004e06:	2800      	cmp	r0, #0
 8004e08:	f040 8248 	bne.w	800529c <_dtoa_r+0x95c>
 8004e0c:	2331      	movs	r3, #49	; 0x31
 8004e0e:	9f03      	ldr	r7, [sp, #12]
 8004e10:	f10a 0a01 	add.w	sl, sl, #1
 8004e14:	f807 3b01 	strb.w	r3, [r7], #1
 8004e18:	e244      	b.n	80052a4 <_dtoa_r+0x964>
 8004e1a:	07e2      	lsls	r2, r4, #31
 8004e1c:	d505      	bpl.n	8004e2a <_dtoa_r+0x4ea>
 8004e1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e22:	f7fb fb59 	bl	80004d8 <__aeabi_dmul>
 8004e26:	2301      	movs	r3, #1
 8004e28:	3701      	adds	r7, #1
 8004e2a:	1064      	asrs	r4, r4, #1
 8004e2c:	3608      	adds	r6, #8
 8004e2e:	e76d      	b.n	8004d0c <_dtoa_r+0x3cc>
 8004e30:	2702      	movs	r7, #2
 8004e32:	e770      	b.n	8004d16 <_dtoa_r+0x3d6>
 8004e34:	46d0      	mov	r8, sl
 8004e36:	9c08      	ldr	r4, [sp, #32]
 8004e38:	e78f      	b.n	8004d5a <_dtoa_r+0x41a>
 8004e3a:	9903      	ldr	r1, [sp, #12]
 8004e3c:	4b29      	ldr	r3, [pc, #164]	; (8004ee4 <_dtoa_r+0x5a4>)
 8004e3e:	4421      	add	r1, r4
 8004e40:	9112      	str	r1, [sp, #72]	; 0x48
 8004e42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004e4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e50:	2900      	cmp	r1, #0
 8004e52:	d055      	beq.n	8004f00 <_dtoa_r+0x5c0>
 8004e54:	2000      	movs	r0, #0
 8004e56:	4929      	ldr	r1, [pc, #164]	; (8004efc <_dtoa_r+0x5bc>)
 8004e58:	f7fb fc68 	bl	800072c <__aeabi_ddiv>
 8004e5c:	463b      	mov	r3, r7
 8004e5e:	4632      	mov	r2, r6
 8004e60:	f7fb f982 	bl	8000168 <__aeabi_dsub>
 8004e64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e68:	9f03      	ldr	r7, [sp, #12]
 8004e6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e6e:	f7fb fde3 	bl	8000a38 <__aeabi_d2iz>
 8004e72:	4604      	mov	r4, r0
 8004e74:	f7fb fac6 	bl	8000404 <__aeabi_i2d>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e80:	f7fb f972 	bl	8000168 <__aeabi_dsub>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	3430      	adds	r4, #48	; 0x30
 8004e8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e92:	f807 4b01 	strb.w	r4, [r7], #1
 8004e96:	f7fb fd91 	bl	80009bc <__aeabi_dcmplt>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d174      	bne.n	8004f88 <_dtoa_r+0x648>
 8004e9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	4911      	ldr	r1, [pc, #68]	; (8004eec <_dtoa_r+0x5ac>)
 8004ea6:	f7fb f95f 	bl	8000168 <__aeabi_dsub>
 8004eaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004eae:	f7fb fd85 	bl	80009bc <__aeabi_dcmplt>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	f040 80b7 	bne.w	8005026 <_dtoa_r+0x6e6>
 8004eb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004eba:	429f      	cmp	r7, r3
 8004ebc:	f43f af7a 	beq.w	8004db4 <_dtoa_r+0x474>
 8004ec0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <_dtoa_r+0x5b0>)
 8004ec8:	f7fb fb06 	bl	80004d8 <__aeabi_dmul>
 8004ecc:	2200      	movs	r2, #0
 8004ece:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ed2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <_dtoa_r+0x5b0>)
 8004ed8:	f7fb fafe 	bl	80004d8 <__aeabi_dmul>
 8004edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ee0:	e7c3      	b.n	8004e6a <_dtoa_r+0x52a>
 8004ee2:	bf00      	nop
 8004ee4:	08006fb0 	.word	0x08006fb0
 8004ee8:	08006f88 	.word	0x08006f88
 8004eec:	3ff00000 	.word	0x3ff00000
 8004ef0:	40240000 	.word	0x40240000
 8004ef4:	401c0000 	.word	0x401c0000
 8004ef8:	40140000 	.word	0x40140000
 8004efc:	3fe00000 	.word	0x3fe00000
 8004f00:	4630      	mov	r0, r6
 8004f02:	4639      	mov	r1, r7
 8004f04:	f7fb fae8 	bl	80004d8 <__aeabi_dmul>
 8004f08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f0e:	9c03      	ldr	r4, [sp, #12]
 8004f10:	9314      	str	r3, [sp, #80]	; 0x50
 8004f12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f16:	f7fb fd8f 	bl	8000a38 <__aeabi_d2iz>
 8004f1a:	9015      	str	r0, [sp, #84]	; 0x54
 8004f1c:	f7fb fa72 	bl	8000404 <__aeabi_i2d>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f28:	f7fb f91e 	bl	8000168 <__aeabi_dsub>
 8004f2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f2e:	4606      	mov	r6, r0
 8004f30:	3330      	adds	r3, #48	; 0x30
 8004f32:	f804 3b01 	strb.w	r3, [r4], #1
 8004f36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f38:	460f      	mov	r7, r1
 8004f3a:	429c      	cmp	r4, r3
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	d124      	bne.n	8004f8c <_dtoa_r+0x64c>
 8004f42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f46:	4bb0      	ldr	r3, [pc, #704]	; (8005208 <_dtoa_r+0x8c8>)
 8004f48:	f7fb f910 	bl	800016c <__adddf3>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4630      	mov	r0, r6
 8004f52:	4639      	mov	r1, r7
 8004f54:	f7fb fd50 	bl	80009f8 <__aeabi_dcmpgt>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d163      	bne.n	8005024 <_dtoa_r+0x6e4>
 8004f5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f60:	2000      	movs	r0, #0
 8004f62:	49a9      	ldr	r1, [pc, #676]	; (8005208 <_dtoa_r+0x8c8>)
 8004f64:	f7fb f900 	bl	8000168 <__aeabi_dsub>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	4639      	mov	r1, r7
 8004f70:	f7fb fd24 	bl	80009bc <__aeabi_dcmplt>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	f43f af1d 	beq.w	8004db4 <_dtoa_r+0x474>
 8004f7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004f7c:	1e7b      	subs	r3, r7, #1
 8004f7e:	9314      	str	r3, [sp, #80]	; 0x50
 8004f80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004f84:	2b30      	cmp	r3, #48	; 0x30
 8004f86:	d0f8      	beq.n	8004f7a <_dtoa_r+0x63a>
 8004f88:	46c2      	mov	sl, r8
 8004f8a:	e03b      	b.n	8005004 <_dtoa_r+0x6c4>
 8004f8c:	4b9f      	ldr	r3, [pc, #636]	; (800520c <_dtoa_r+0x8cc>)
 8004f8e:	f7fb faa3 	bl	80004d8 <__aeabi_dmul>
 8004f92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f96:	e7bc      	b.n	8004f12 <_dtoa_r+0x5d2>
 8004f98:	9f03      	ldr	r7, [sp, #12]
 8004f9a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004f9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	f7fb fbc1 	bl	800072c <__aeabi_ddiv>
 8004faa:	f7fb fd45 	bl	8000a38 <__aeabi_d2iz>
 8004fae:	4604      	mov	r4, r0
 8004fb0:	f7fb fa28 	bl	8000404 <__aeabi_i2d>
 8004fb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fb8:	f7fb fa8e 	bl	80004d8 <__aeabi_dmul>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	f7fb f8d0 	bl	8000168 <__aeabi_dsub>
 8004fc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004fcc:	f807 6b01 	strb.w	r6, [r7], #1
 8004fd0:	9e03      	ldr	r6, [sp, #12]
 8004fd2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004fd6:	1bbe      	subs	r6, r7, r6
 8004fd8:	45b4      	cmp	ip, r6
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	d136      	bne.n	800504e <_dtoa_r+0x70e>
 8004fe0:	f7fb f8c4 	bl	800016c <__adddf3>
 8004fe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fe8:	4680      	mov	r8, r0
 8004fea:	4689      	mov	r9, r1
 8004fec:	f7fb fd04 	bl	80009f8 <__aeabi_dcmpgt>
 8004ff0:	bb58      	cbnz	r0, 800504a <_dtoa_r+0x70a>
 8004ff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	f7fb fcd5 	bl	80009a8 <__aeabi_dcmpeq>
 8004ffe:	b108      	cbz	r0, 8005004 <_dtoa_r+0x6c4>
 8005000:	07e1      	lsls	r1, r4, #31
 8005002:	d422      	bmi.n	800504a <_dtoa_r+0x70a>
 8005004:	4628      	mov	r0, r5
 8005006:	4659      	mov	r1, fp
 8005008:	f000 faf0 	bl	80055ec <_Bfree>
 800500c:	2300      	movs	r3, #0
 800500e:	703b      	strb	r3, [r7, #0]
 8005010:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005012:	f10a 0001 	add.w	r0, sl, #1
 8005016:	6018      	str	r0, [r3, #0]
 8005018:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800501a:	2b00      	cmp	r3, #0
 800501c:	f43f acde 	beq.w	80049dc <_dtoa_r+0x9c>
 8005020:	601f      	str	r7, [r3, #0]
 8005022:	e4db      	b.n	80049dc <_dtoa_r+0x9c>
 8005024:	4627      	mov	r7, r4
 8005026:	463b      	mov	r3, r7
 8005028:	461f      	mov	r7, r3
 800502a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800502e:	2a39      	cmp	r2, #57	; 0x39
 8005030:	d107      	bne.n	8005042 <_dtoa_r+0x702>
 8005032:	9a03      	ldr	r2, [sp, #12]
 8005034:	429a      	cmp	r2, r3
 8005036:	d1f7      	bne.n	8005028 <_dtoa_r+0x6e8>
 8005038:	2230      	movs	r2, #48	; 0x30
 800503a:	9903      	ldr	r1, [sp, #12]
 800503c:	f108 0801 	add.w	r8, r8, #1
 8005040:	700a      	strb	r2, [r1, #0]
 8005042:	781a      	ldrb	r2, [r3, #0]
 8005044:	3201      	adds	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	e79e      	b.n	8004f88 <_dtoa_r+0x648>
 800504a:	46d0      	mov	r8, sl
 800504c:	e7eb      	b.n	8005026 <_dtoa_r+0x6e6>
 800504e:	2200      	movs	r2, #0
 8005050:	4b6e      	ldr	r3, [pc, #440]	; (800520c <_dtoa_r+0x8cc>)
 8005052:	f7fb fa41 	bl	80004d8 <__aeabi_dmul>
 8005056:	2200      	movs	r2, #0
 8005058:	2300      	movs	r3, #0
 800505a:	4680      	mov	r8, r0
 800505c:	4689      	mov	r9, r1
 800505e:	f7fb fca3 	bl	80009a8 <__aeabi_dcmpeq>
 8005062:	2800      	cmp	r0, #0
 8005064:	d09b      	beq.n	8004f9e <_dtoa_r+0x65e>
 8005066:	e7cd      	b.n	8005004 <_dtoa_r+0x6c4>
 8005068:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800506a:	2a00      	cmp	r2, #0
 800506c:	f000 80d0 	beq.w	8005210 <_dtoa_r+0x8d0>
 8005070:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005072:	2a01      	cmp	r2, #1
 8005074:	f300 80ae 	bgt.w	80051d4 <_dtoa_r+0x894>
 8005078:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800507a:	2a00      	cmp	r2, #0
 800507c:	f000 80a6 	beq.w	80051cc <_dtoa_r+0x88c>
 8005080:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005084:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005086:	9f06      	ldr	r7, [sp, #24]
 8005088:	9a06      	ldr	r2, [sp, #24]
 800508a:	2101      	movs	r1, #1
 800508c:	441a      	add	r2, r3
 800508e:	9206      	str	r2, [sp, #24]
 8005090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005092:	4628      	mov	r0, r5
 8005094:	441a      	add	r2, r3
 8005096:	9209      	str	r2, [sp, #36]	; 0x24
 8005098:	f000 fb5e 	bl	8005758 <__i2b>
 800509c:	4606      	mov	r6, r0
 800509e:	2f00      	cmp	r7, #0
 80050a0:	dd0c      	ble.n	80050bc <_dtoa_r+0x77c>
 80050a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	dd09      	ble.n	80050bc <_dtoa_r+0x77c>
 80050a8:	42bb      	cmp	r3, r7
 80050aa:	bfa8      	it	ge
 80050ac:	463b      	movge	r3, r7
 80050ae:	9a06      	ldr	r2, [sp, #24]
 80050b0:	1aff      	subs	r7, r7, r3
 80050b2:	1ad2      	subs	r2, r2, r3
 80050b4:	9206      	str	r2, [sp, #24]
 80050b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	9309      	str	r3, [sp, #36]	; 0x24
 80050bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050be:	b1f3      	cbz	r3, 80050fe <_dtoa_r+0x7be>
 80050c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80a8 	beq.w	8005218 <_dtoa_r+0x8d8>
 80050c8:	2c00      	cmp	r4, #0
 80050ca:	dd10      	ble.n	80050ee <_dtoa_r+0x7ae>
 80050cc:	4631      	mov	r1, r6
 80050ce:	4622      	mov	r2, r4
 80050d0:	4628      	mov	r0, r5
 80050d2:	f000 fbff 	bl	80058d4 <__pow5mult>
 80050d6:	465a      	mov	r2, fp
 80050d8:	4601      	mov	r1, r0
 80050da:	4606      	mov	r6, r0
 80050dc:	4628      	mov	r0, r5
 80050de:	f000 fb51 	bl	8005784 <__multiply>
 80050e2:	4680      	mov	r8, r0
 80050e4:	4659      	mov	r1, fp
 80050e6:	4628      	mov	r0, r5
 80050e8:	f000 fa80 	bl	80055ec <_Bfree>
 80050ec:	46c3      	mov	fp, r8
 80050ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050f0:	1b1a      	subs	r2, r3, r4
 80050f2:	d004      	beq.n	80050fe <_dtoa_r+0x7be>
 80050f4:	4659      	mov	r1, fp
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 fbec 	bl	80058d4 <__pow5mult>
 80050fc:	4683      	mov	fp, r0
 80050fe:	2101      	movs	r1, #1
 8005100:	4628      	mov	r0, r5
 8005102:	f000 fb29 	bl	8005758 <__i2b>
 8005106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005108:	4604      	mov	r4, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	f340 8086 	ble.w	800521c <_dtoa_r+0x8dc>
 8005110:	461a      	mov	r2, r3
 8005112:	4601      	mov	r1, r0
 8005114:	4628      	mov	r0, r5
 8005116:	f000 fbdd 	bl	80058d4 <__pow5mult>
 800511a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800511c:	4604      	mov	r4, r0
 800511e:	2b01      	cmp	r3, #1
 8005120:	dd7f      	ble.n	8005222 <_dtoa_r+0x8e2>
 8005122:	f04f 0800 	mov.w	r8, #0
 8005126:	6923      	ldr	r3, [r4, #16]
 8005128:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800512c:	6918      	ldr	r0, [r3, #16]
 800512e:	f000 fac5 	bl	80056bc <__hi0bits>
 8005132:	f1c0 0020 	rsb	r0, r0, #32
 8005136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005138:	4418      	add	r0, r3
 800513a:	f010 001f 	ands.w	r0, r0, #31
 800513e:	f000 8092 	beq.w	8005266 <_dtoa_r+0x926>
 8005142:	f1c0 0320 	rsb	r3, r0, #32
 8005146:	2b04      	cmp	r3, #4
 8005148:	f340 808a 	ble.w	8005260 <_dtoa_r+0x920>
 800514c:	f1c0 001c 	rsb	r0, r0, #28
 8005150:	9b06      	ldr	r3, [sp, #24]
 8005152:	4407      	add	r7, r0
 8005154:	4403      	add	r3, r0
 8005156:	9306      	str	r3, [sp, #24]
 8005158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800515a:	4403      	add	r3, r0
 800515c:	9309      	str	r3, [sp, #36]	; 0x24
 800515e:	9b06      	ldr	r3, [sp, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	dd05      	ble.n	8005170 <_dtoa_r+0x830>
 8005164:	4659      	mov	r1, fp
 8005166:	461a      	mov	r2, r3
 8005168:	4628      	mov	r0, r5
 800516a:	f000 fc0d 	bl	8005988 <__lshift>
 800516e:	4683      	mov	fp, r0
 8005170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005172:	2b00      	cmp	r3, #0
 8005174:	dd05      	ble.n	8005182 <_dtoa_r+0x842>
 8005176:	4621      	mov	r1, r4
 8005178:	461a      	mov	r2, r3
 800517a:	4628      	mov	r0, r5
 800517c:	f000 fc04 	bl	8005988 <__lshift>
 8005180:	4604      	mov	r4, r0
 8005182:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d070      	beq.n	800526a <_dtoa_r+0x92a>
 8005188:	4621      	mov	r1, r4
 800518a:	4658      	mov	r0, fp
 800518c:	f000 fc6c 	bl	8005a68 <__mcmp>
 8005190:	2800      	cmp	r0, #0
 8005192:	da6a      	bge.n	800526a <_dtoa_r+0x92a>
 8005194:	2300      	movs	r3, #0
 8005196:	4659      	mov	r1, fp
 8005198:	220a      	movs	r2, #10
 800519a:	4628      	mov	r0, r5
 800519c:	f000 fa48 	bl	8005630 <__multadd>
 80051a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051a2:	4683      	mov	fp, r0
 80051a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8194 	beq.w	80054d6 <_dtoa_r+0xb96>
 80051ae:	4631      	mov	r1, r6
 80051b0:	2300      	movs	r3, #0
 80051b2:	220a      	movs	r2, #10
 80051b4:	4628      	mov	r0, r5
 80051b6:	f000 fa3b 	bl	8005630 <__multadd>
 80051ba:	f1b9 0f00 	cmp.w	r9, #0
 80051be:	4606      	mov	r6, r0
 80051c0:	f300 8093 	bgt.w	80052ea <_dtoa_r+0x9aa>
 80051c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	dc57      	bgt.n	800527a <_dtoa_r+0x93a>
 80051ca:	e08e      	b.n	80052ea <_dtoa_r+0x9aa>
 80051cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80051ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80051d2:	e757      	b.n	8005084 <_dtoa_r+0x744>
 80051d4:	9b08      	ldr	r3, [sp, #32]
 80051d6:	1e5c      	subs	r4, r3, #1
 80051d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051da:	42a3      	cmp	r3, r4
 80051dc:	bfb7      	itett	lt
 80051de:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80051e0:	1b1c      	subge	r4, r3, r4
 80051e2:	1ae2      	sublt	r2, r4, r3
 80051e4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80051e6:	bfbe      	ittt	lt
 80051e8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80051ea:	189b      	addlt	r3, r3, r2
 80051ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80051ee:	9b08      	ldr	r3, [sp, #32]
 80051f0:	bfb8      	it	lt
 80051f2:	2400      	movlt	r4, #0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bfbb      	ittet	lt
 80051f8:	9b06      	ldrlt	r3, [sp, #24]
 80051fa:	9a08      	ldrlt	r2, [sp, #32]
 80051fc:	9f06      	ldrge	r7, [sp, #24]
 80051fe:	1a9f      	sublt	r7, r3, r2
 8005200:	bfac      	ite	ge
 8005202:	9b08      	ldrge	r3, [sp, #32]
 8005204:	2300      	movlt	r3, #0
 8005206:	e73f      	b.n	8005088 <_dtoa_r+0x748>
 8005208:	3fe00000 	.word	0x3fe00000
 800520c:	40240000 	.word	0x40240000
 8005210:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005212:	9f06      	ldr	r7, [sp, #24]
 8005214:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005216:	e742      	b.n	800509e <_dtoa_r+0x75e>
 8005218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800521a:	e76b      	b.n	80050f4 <_dtoa_r+0x7b4>
 800521c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800521e:	2b01      	cmp	r3, #1
 8005220:	dc19      	bgt.n	8005256 <_dtoa_r+0x916>
 8005222:	9b04      	ldr	r3, [sp, #16]
 8005224:	b9bb      	cbnz	r3, 8005256 <_dtoa_r+0x916>
 8005226:	9b05      	ldr	r3, [sp, #20]
 8005228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800522c:	b99b      	cbnz	r3, 8005256 <_dtoa_r+0x916>
 800522e:	9b05      	ldr	r3, [sp, #20]
 8005230:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005234:	0d1b      	lsrs	r3, r3, #20
 8005236:	051b      	lsls	r3, r3, #20
 8005238:	b183      	cbz	r3, 800525c <_dtoa_r+0x91c>
 800523a:	f04f 0801 	mov.w	r8, #1
 800523e:	9b06      	ldr	r3, [sp, #24]
 8005240:	3301      	adds	r3, #1
 8005242:	9306      	str	r3, [sp, #24]
 8005244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005246:	3301      	adds	r3, #1
 8005248:	9309      	str	r3, [sp, #36]	; 0x24
 800524a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800524c:	2b00      	cmp	r3, #0
 800524e:	f47f af6a 	bne.w	8005126 <_dtoa_r+0x7e6>
 8005252:	2001      	movs	r0, #1
 8005254:	e76f      	b.n	8005136 <_dtoa_r+0x7f6>
 8005256:	f04f 0800 	mov.w	r8, #0
 800525a:	e7f6      	b.n	800524a <_dtoa_r+0x90a>
 800525c:	4698      	mov	r8, r3
 800525e:	e7f4      	b.n	800524a <_dtoa_r+0x90a>
 8005260:	f43f af7d 	beq.w	800515e <_dtoa_r+0x81e>
 8005264:	4618      	mov	r0, r3
 8005266:	301c      	adds	r0, #28
 8005268:	e772      	b.n	8005150 <_dtoa_r+0x810>
 800526a:	9b08      	ldr	r3, [sp, #32]
 800526c:	2b00      	cmp	r3, #0
 800526e:	dc36      	bgt.n	80052de <_dtoa_r+0x99e>
 8005270:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005272:	2b02      	cmp	r3, #2
 8005274:	dd33      	ble.n	80052de <_dtoa_r+0x99e>
 8005276:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800527a:	f1b9 0f00 	cmp.w	r9, #0
 800527e:	d10d      	bne.n	800529c <_dtoa_r+0x95c>
 8005280:	4621      	mov	r1, r4
 8005282:	464b      	mov	r3, r9
 8005284:	2205      	movs	r2, #5
 8005286:	4628      	mov	r0, r5
 8005288:	f000 f9d2 	bl	8005630 <__multadd>
 800528c:	4601      	mov	r1, r0
 800528e:	4604      	mov	r4, r0
 8005290:	4658      	mov	r0, fp
 8005292:	f000 fbe9 	bl	8005a68 <__mcmp>
 8005296:	2800      	cmp	r0, #0
 8005298:	f73f adb8 	bgt.w	8004e0c <_dtoa_r+0x4cc>
 800529c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800529e:	9f03      	ldr	r7, [sp, #12]
 80052a0:	ea6f 0a03 	mvn.w	sl, r3
 80052a4:	f04f 0800 	mov.w	r8, #0
 80052a8:	4621      	mov	r1, r4
 80052aa:	4628      	mov	r0, r5
 80052ac:	f000 f99e 	bl	80055ec <_Bfree>
 80052b0:	2e00      	cmp	r6, #0
 80052b2:	f43f aea7 	beq.w	8005004 <_dtoa_r+0x6c4>
 80052b6:	f1b8 0f00 	cmp.w	r8, #0
 80052ba:	d005      	beq.n	80052c8 <_dtoa_r+0x988>
 80052bc:	45b0      	cmp	r8, r6
 80052be:	d003      	beq.n	80052c8 <_dtoa_r+0x988>
 80052c0:	4641      	mov	r1, r8
 80052c2:	4628      	mov	r0, r5
 80052c4:	f000 f992 	bl	80055ec <_Bfree>
 80052c8:	4631      	mov	r1, r6
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 f98e 	bl	80055ec <_Bfree>
 80052d0:	e698      	b.n	8005004 <_dtoa_r+0x6c4>
 80052d2:	2400      	movs	r4, #0
 80052d4:	4626      	mov	r6, r4
 80052d6:	e7e1      	b.n	800529c <_dtoa_r+0x95c>
 80052d8:	46c2      	mov	sl, r8
 80052da:	4626      	mov	r6, r4
 80052dc:	e596      	b.n	8004e0c <_dtoa_r+0x4cc>
 80052de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80fd 	beq.w	80054e4 <_dtoa_r+0xba4>
 80052ea:	2f00      	cmp	r7, #0
 80052ec:	dd05      	ble.n	80052fa <_dtoa_r+0x9ba>
 80052ee:	4631      	mov	r1, r6
 80052f0:	463a      	mov	r2, r7
 80052f2:	4628      	mov	r0, r5
 80052f4:	f000 fb48 	bl	8005988 <__lshift>
 80052f8:	4606      	mov	r6, r0
 80052fa:	f1b8 0f00 	cmp.w	r8, #0
 80052fe:	d05c      	beq.n	80053ba <_dtoa_r+0xa7a>
 8005300:	4628      	mov	r0, r5
 8005302:	6871      	ldr	r1, [r6, #4]
 8005304:	f000 f932 	bl	800556c <_Balloc>
 8005308:	4607      	mov	r7, r0
 800530a:	b928      	cbnz	r0, 8005318 <_dtoa_r+0x9d8>
 800530c:	4602      	mov	r2, r0
 800530e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005312:	4b7f      	ldr	r3, [pc, #508]	; (8005510 <_dtoa_r+0xbd0>)
 8005314:	f7ff bb28 	b.w	8004968 <_dtoa_r+0x28>
 8005318:	6932      	ldr	r2, [r6, #16]
 800531a:	f106 010c 	add.w	r1, r6, #12
 800531e:	3202      	adds	r2, #2
 8005320:	0092      	lsls	r2, r2, #2
 8005322:	300c      	adds	r0, #12
 8005324:	f000 f914 	bl	8005550 <memcpy>
 8005328:	2201      	movs	r2, #1
 800532a:	4639      	mov	r1, r7
 800532c:	4628      	mov	r0, r5
 800532e:	f000 fb2b 	bl	8005988 <__lshift>
 8005332:	46b0      	mov	r8, r6
 8005334:	4606      	mov	r6, r0
 8005336:	9b03      	ldr	r3, [sp, #12]
 8005338:	3301      	adds	r3, #1
 800533a:	9308      	str	r3, [sp, #32]
 800533c:	9b03      	ldr	r3, [sp, #12]
 800533e:	444b      	add	r3, r9
 8005340:	930a      	str	r3, [sp, #40]	; 0x28
 8005342:	9b04      	ldr	r3, [sp, #16]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	9309      	str	r3, [sp, #36]	; 0x24
 800534a:	9b08      	ldr	r3, [sp, #32]
 800534c:	4621      	mov	r1, r4
 800534e:	3b01      	subs	r3, #1
 8005350:	4658      	mov	r0, fp
 8005352:	9304      	str	r3, [sp, #16]
 8005354:	f7ff fa66 	bl	8004824 <quorem>
 8005358:	4603      	mov	r3, r0
 800535a:	4641      	mov	r1, r8
 800535c:	3330      	adds	r3, #48	; 0x30
 800535e:	9006      	str	r0, [sp, #24]
 8005360:	4658      	mov	r0, fp
 8005362:	930b      	str	r3, [sp, #44]	; 0x2c
 8005364:	f000 fb80 	bl	8005a68 <__mcmp>
 8005368:	4632      	mov	r2, r6
 800536a:	4681      	mov	r9, r0
 800536c:	4621      	mov	r1, r4
 800536e:	4628      	mov	r0, r5
 8005370:	f000 fb96 	bl	8005aa0 <__mdiff>
 8005374:	68c2      	ldr	r2, [r0, #12]
 8005376:	4607      	mov	r7, r0
 8005378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800537a:	bb02      	cbnz	r2, 80053be <_dtoa_r+0xa7e>
 800537c:	4601      	mov	r1, r0
 800537e:	4658      	mov	r0, fp
 8005380:	f000 fb72 	bl	8005a68 <__mcmp>
 8005384:	4602      	mov	r2, r0
 8005386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005388:	4639      	mov	r1, r7
 800538a:	4628      	mov	r0, r5
 800538c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005390:	f000 f92c 	bl	80055ec <_Bfree>
 8005394:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005398:	9f08      	ldr	r7, [sp, #32]
 800539a:	ea43 0102 	orr.w	r1, r3, r2
 800539e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a0:	430b      	orrs	r3, r1
 80053a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053a4:	d10d      	bne.n	80053c2 <_dtoa_r+0xa82>
 80053a6:	2b39      	cmp	r3, #57	; 0x39
 80053a8:	d029      	beq.n	80053fe <_dtoa_r+0xabe>
 80053aa:	f1b9 0f00 	cmp.w	r9, #0
 80053ae:	dd01      	ble.n	80053b4 <_dtoa_r+0xa74>
 80053b0:	9b06      	ldr	r3, [sp, #24]
 80053b2:	3331      	adds	r3, #49	; 0x31
 80053b4:	9a04      	ldr	r2, [sp, #16]
 80053b6:	7013      	strb	r3, [r2, #0]
 80053b8:	e776      	b.n	80052a8 <_dtoa_r+0x968>
 80053ba:	4630      	mov	r0, r6
 80053bc:	e7b9      	b.n	8005332 <_dtoa_r+0x9f2>
 80053be:	2201      	movs	r2, #1
 80053c0:	e7e2      	b.n	8005388 <_dtoa_r+0xa48>
 80053c2:	f1b9 0f00 	cmp.w	r9, #0
 80053c6:	db06      	blt.n	80053d6 <_dtoa_r+0xa96>
 80053c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80053ca:	ea41 0909 	orr.w	r9, r1, r9
 80053ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053d0:	ea59 0101 	orrs.w	r1, r9, r1
 80053d4:	d120      	bne.n	8005418 <_dtoa_r+0xad8>
 80053d6:	2a00      	cmp	r2, #0
 80053d8:	ddec      	ble.n	80053b4 <_dtoa_r+0xa74>
 80053da:	4659      	mov	r1, fp
 80053dc:	2201      	movs	r2, #1
 80053de:	4628      	mov	r0, r5
 80053e0:	9308      	str	r3, [sp, #32]
 80053e2:	f000 fad1 	bl	8005988 <__lshift>
 80053e6:	4621      	mov	r1, r4
 80053e8:	4683      	mov	fp, r0
 80053ea:	f000 fb3d 	bl	8005a68 <__mcmp>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	9b08      	ldr	r3, [sp, #32]
 80053f2:	dc02      	bgt.n	80053fa <_dtoa_r+0xaba>
 80053f4:	d1de      	bne.n	80053b4 <_dtoa_r+0xa74>
 80053f6:	07da      	lsls	r2, r3, #31
 80053f8:	d5dc      	bpl.n	80053b4 <_dtoa_r+0xa74>
 80053fa:	2b39      	cmp	r3, #57	; 0x39
 80053fc:	d1d8      	bne.n	80053b0 <_dtoa_r+0xa70>
 80053fe:	2339      	movs	r3, #57	; 0x39
 8005400:	9a04      	ldr	r2, [sp, #16]
 8005402:	7013      	strb	r3, [r2, #0]
 8005404:	463b      	mov	r3, r7
 8005406:	461f      	mov	r7, r3
 8005408:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800540c:	3b01      	subs	r3, #1
 800540e:	2a39      	cmp	r2, #57	; 0x39
 8005410:	d050      	beq.n	80054b4 <_dtoa_r+0xb74>
 8005412:	3201      	adds	r2, #1
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	e747      	b.n	80052a8 <_dtoa_r+0x968>
 8005418:	2a00      	cmp	r2, #0
 800541a:	dd03      	ble.n	8005424 <_dtoa_r+0xae4>
 800541c:	2b39      	cmp	r3, #57	; 0x39
 800541e:	d0ee      	beq.n	80053fe <_dtoa_r+0xabe>
 8005420:	3301      	adds	r3, #1
 8005422:	e7c7      	b.n	80053b4 <_dtoa_r+0xa74>
 8005424:	9a08      	ldr	r2, [sp, #32]
 8005426:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005428:	f802 3c01 	strb.w	r3, [r2, #-1]
 800542c:	428a      	cmp	r2, r1
 800542e:	d02a      	beq.n	8005486 <_dtoa_r+0xb46>
 8005430:	4659      	mov	r1, fp
 8005432:	2300      	movs	r3, #0
 8005434:	220a      	movs	r2, #10
 8005436:	4628      	mov	r0, r5
 8005438:	f000 f8fa 	bl	8005630 <__multadd>
 800543c:	45b0      	cmp	r8, r6
 800543e:	4683      	mov	fp, r0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	f04f 020a 	mov.w	r2, #10
 8005448:	4641      	mov	r1, r8
 800544a:	4628      	mov	r0, r5
 800544c:	d107      	bne.n	800545e <_dtoa_r+0xb1e>
 800544e:	f000 f8ef 	bl	8005630 <__multadd>
 8005452:	4680      	mov	r8, r0
 8005454:	4606      	mov	r6, r0
 8005456:	9b08      	ldr	r3, [sp, #32]
 8005458:	3301      	adds	r3, #1
 800545a:	9308      	str	r3, [sp, #32]
 800545c:	e775      	b.n	800534a <_dtoa_r+0xa0a>
 800545e:	f000 f8e7 	bl	8005630 <__multadd>
 8005462:	4631      	mov	r1, r6
 8005464:	4680      	mov	r8, r0
 8005466:	2300      	movs	r3, #0
 8005468:	220a      	movs	r2, #10
 800546a:	4628      	mov	r0, r5
 800546c:	f000 f8e0 	bl	8005630 <__multadd>
 8005470:	4606      	mov	r6, r0
 8005472:	e7f0      	b.n	8005456 <_dtoa_r+0xb16>
 8005474:	f1b9 0f00 	cmp.w	r9, #0
 8005478:	bfcc      	ite	gt
 800547a:	464f      	movgt	r7, r9
 800547c:	2701      	movle	r7, #1
 800547e:	f04f 0800 	mov.w	r8, #0
 8005482:	9a03      	ldr	r2, [sp, #12]
 8005484:	4417      	add	r7, r2
 8005486:	4659      	mov	r1, fp
 8005488:	2201      	movs	r2, #1
 800548a:	4628      	mov	r0, r5
 800548c:	9308      	str	r3, [sp, #32]
 800548e:	f000 fa7b 	bl	8005988 <__lshift>
 8005492:	4621      	mov	r1, r4
 8005494:	4683      	mov	fp, r0
 8005496:	f000 fae7 	bl	8005a68 <__mcmp>
 800549a:	2800      	cmp	r0, #0
 800549c:	dcb2      	bgt.n	8005404 <_dtoa_r+0xac4>
 800549e:	d102      	bne.n	80054a6 <_dtoa_r+0xb66>
 80054a0:	9b08      	ldr	r3, [sp, #32]
 80054a2:	07db      	lsls	r3, r3, #31
 80054a4:	d4ae      	bmi.n	8005404 <_dtoa_r+0xac4>
 80054a6:	463b      	mov	r3, r7
 80054a8:	461f      	mov	r7, r3
 80054aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054ae:	2a30      	cmp	r2, #48	; 0x30
 80054b0:	d0fa      	beq.n	80054a8 <_dtoa_r+0xb68>
 80054b2:	e6f9      	b.n	80052a8 <_dtoa_r+0x968>
 80054b4:	9a03      	ldr	r2, [sp, #12]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d1a5      	bne.n	8005406 <_dtoa_r+0xac6>
 80054ba:	2331      	movs	r3, #49	; 0x31
 80054bc:	f10a 0a01 	add.w	sl, sl, #1
 80054c0:	e779      	b.n	80053b6 <_dtoa_r+0xa76>
 80054c2:	4b14      	ldr	r3, [pc, #80]	; (8005514 <_dtoa_r+0xbd4>)
 80054c4:	f7ff baa8 	b.w	8004a18 <_dtoa_r+0xd8>
 80054c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f47f aa81 	bne.w	80049d2 <_dtoa_r+0x92>
 80054d0:	4b11      	ldr	r3, [pc, #68]	; (8005518 <_dtoa_r+0xbd8>)
 80054d2:	f7ff baa1 	b.w	8004a18 <_dtoa_r+0xd8>
 80054d6:	f1b9 0f00 	cmp.w	r9, #0
 80054da:	dc03      	bgt.n	80054e4 <_dtoa_r+0xba4>
 80054dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054de:	2b02      	cmp	r3, #2
 80054e0:	f73f aecb 	bgt.w	800527a <_dtoa_r+0x93a>
 80054e4:	9f03      	ldr	r7, [sp, #12]
 80054e6:	4621      	mov	r1, r4
 80054e8:	4658      	mov	r0, fp
 80054ea:	f7ff f99b 	bl	8004824 <quorem>
 80054ee:	9a03      	ldr	r2, [sp, #12]
 80054f0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80054f4:	f807 3b01 	strb.w	r3, [r7], #1
 80054f8:	1aba      	subs	r2, r7, r2
 80054fa:	4591      	cmp	r9, r2
 80054fc:	ddba      	ble.n	8005474 <_dtoa_r+0xb34>
 80054fe:	4659      	mov	r1, fp
 8005500:	2300      	movs	r3, #0
 8005502:	220a      	movs	r2, #10
 8005504:	4628      	mov	r0, r5
 8005506:	f000 f893 	bl	8005630 <__multadd>
 800550a:	4683      	mov	fp, r0
 800550c:	e7eb      	b.n	80054e6 <_dtoa_r+0xba6>
 800550e:	bf00      	nop
 8005510:	08006f1b 	.word	0x08006f1b
 8005514:	08006e78 	.word	0x08006e78
 8005518:	08006e9c 	.word	0x08006e9c

0800551c <_localeconv_r>:
 800551c:	4800      	ldr	r0, [pc, #0]	; (8005520 <_localeconv_r+0x4>)
 800551e:	4770      	bx	lr
 8005520:	2000017c 	.word	0x2000017c

08005524 <malloc>:
 8005524:	4b02      	ldr	r3, [pc, #8]	; (8005530 <malloc+0xc>)
 8005526:	4601      	mov	r1, r0
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	f000 bc1d 	b.w	8005d68 <_malloc_r>
 800552e:	bf00      	nop
 8005530:	20000028 	.word	0x20000028

08005534 <memchr>:
 8005534:	4603      	mov	r3, r0
 8005536:	b510      	push	{r4, lr}
 8005538:	b2c9      	uxtb	r1, r1
 800553a:	4402      	add	r2, r0
 800553c:	4293      	cmp	r3, r2
 800553e:	4618      	mov	r0, r3
 8005540:	d101      	bne.n	8005546 <memchr+0x12>
 8005542:	2000      	movs	r0, #0
 8005544:	e003      	b.n	800554e <memchr+0x1a>
 8005546:	7804      	ldrb	r4, [r0, #0]
 8005548:	3301      	adds	r3, #1
 800554a:	428c      	cmp	r4, r1
 800554c:	d1f6      	bne.n	800553c <memchr+0x8>
 800554e:	bd10      	pop	{r4, pc}

08005550 <memcpy>:
 8005550:	440a      	add	r2, r1
 8005552:	4291      	cmp	r1, r2
 8005554:	f100 33ff 	add.w	r3, r0, #4294967295
 8005558:	d100      	bne.n	800555c <memcpy+0xc>
 800555a:	4770      	bx	lr
 800555c:	b510      	push	{r4, lr}
 800555e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005562:	4291      	cmp	r1, r2
 8005564:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005568:	d1f9      	bne.n	800555e <memcpy+0xe>
 800556a:	bd10      	pop	{r4, pc}

0800556c <_Balloc>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005570:	4604      	mov	r4, r0
 8005572:	460d      	mov	r5, r1
 8005574:	b976      	cbnz	r6, 8005594 <_Balloc+0x28>
 8005576:	2010      	movs	r0, #16
 8005578:	f7ff ffd4 	bl	8005524 <malloc>
 800557c:	4602      	mov	r2, r0
 800557e:	6260      	str	r0, [r4, #36]	; 0x24
 8005580:	b920      	cbnz	r0, 800558c <_Balloc+0x20>
 8005582:	2166      	movs	r1, #102	; 0x66
 8005584:	4b17      	ldr	r3, [pc, #92]	; (80055e4 <_Balloc+0x78>)
 8005586:	4818      	ldr	r0, [pc, #96]	; (80055e8 <_Balloc+0x7c>)
 8005588:	f000 fdce 	bl	8006128 <__assert_func>
 800558c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005590:	6006      	str	r6, [r0, #0]
 8005592:	60c6      	str	r6, [r0, #12]
 8005594:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005596:	68f3      	ldr	r3, [r6, #12]
 8005598:	b183      	cbz	r3, 80055bc <_Balloc+0x50>
 800559a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055a2:	b9b8      	cbnz	r0, 80055d4 <_Balloc+0x68>
 80055a4:	2101      	movs	r1, #1
 80055a6:	fa01 f605 	lsl.w	r6, r1, r5
 80055aa:	1d72      	adds	r2, r6, #5
 80055ac:	4620      	mov	r0, r4
 80055ae:	0092      	lsls	r2, r2, #2
 80055b0:	f000 fb5e 	bl	8005c70 <_calloc_r>
 80055b4:	b160      	cbz	r0, 80055d0 <_Balloc+0x64>
 80055b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80055ba:	e00e      	b.n	80055da <_Balloc+0x6e>
 80055bc:	2221      	movs	r2, #33	; 0x21
 80055be:	2104      	movs	r1, #4
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fb55 	bl	8005c70 <_calloc_r>
 80055c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055c8:	60f0      	str	r0, [r6, #12]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e4      	bne.n	800559a <_Balloc+0x2e>
 80055d0:	2000      	movs	r0, #0
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	6802      	ldr	r2, [r0, #0]
 80055d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055da:	2300      	movs	r3, #0
 80055dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055e0:	e7f7      	b.n	80055d2 <_Balloc+0x66>
 80055e2:	bf00      	nop
 80055e4:	08006ea9 	.word	0x08006ea9
 80055e8:	08006f2c 	.word	0x08006f2c

080055ec <_Bfree>:
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80055f0:	4605      	mov	r5, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	b976      	cbnz	r6, 8005614 <_Bfree+0x28>
 80055f6:	2010      	movs	r0, #16
 80055f8:	f7ff ff94 	bl	8005524 <malloc>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6268      	str	r0, [r5, #36]	; 0x24
 8005600:	b920      	cbnz	r0, 800560c <_Bfree+0x20>
 8005602:	218a      	movs	r1, #138	; 0x8a
 8005604:	4b08      	ldr	r3, [pc, #32]	; (8005628 <_Bfree+0x3c>)
 8005606:	4809      	ldr	r0, [pc, #36]	; (800562c <_Bfree+0x40>)
 8005608:	f000 fd8e 	bl	8006128 <__assert_func>
 800560c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005610:	6006      	str	r6, [r0, #0]
 8005612:	60c6      	str	r6, [r0, #12]
 8005614:	b13c      	cbz	r4, 8005626 <_Bfree+0x3a>
 8005616:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005618:	6862      	ldr	r2, [r4, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005620:	6021      	str	r1, [r4, #0]
 8005622:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005626:	bd70      	pop	{r4, r5, r6, pc}
 8005628:	08006ea9 	.word	0x08006ea9
 800562c:	08006f2c 	.word	0x08006f2c

08005630 <__multadd>:
 8005630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005634:	4607      	mov	r7, r0
 8005636:	460c      	mov	r4, r1
 8005638:	461e      	mov	r6, r3
 800563a:	2000      	movs	r0, #0
 800563c:	690d      	ldr	r5, [r1, #16]
 800563e:	f101 0c14 	add.w	ip, r1, #20
 8005642:	f8dc 3000 	ldr.w	r3, [ip]
 8005646:	3001      	adds	r0, #1
 8005648:	b299      	uxth	r1, r3
 800564a:	fb02 6101 	mla	r1, r2, r1, r6
 800564e:	0c1e      	lsrs	r6, r3, #16
 8005650:	0c0b      	lsrs	r3, r1, #16
 8005652:	fb02 3306 	mla	r3, r2, r6, r3
 8005656:	b289      	uxth	r1, r1
 8005658:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800565c:	4285      	cmp	r5, r0
 800565e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005662:	f84c 1b04 	str.w	r1, [ip], #4
 8005666:	dcec      	bgt.n	8005642 <__multadd+0x12>
 8005668:	b30e      	cbz	r6, 80056ae <__multadd+0x7e>
 800566a:	68a3      	ldr	r3, [r4, #8]
 800566c:	42ab      	cmp	r3, r5
 800566e:	dc19      	bgt.n	80056a4 <__multadd+0x74>
 8005670:	6861      	ldr	r1, [r4, #4]
 8005672:	4638      	mov	r0, r7
 8005674:	3101      	adds	r1, #1
 8005676:	f7ff ff79 	bl	800556c <_Balloc>
 800567a:	4680      	mov	r8, r0
 800567c:	b928      	cbnz	r0, 800568a <__multadd+0x5a>
 800567e:	4602      	mov	r2, r0
 8005680:	21b5      	movs	r1, #181	; 0xb5
 8005682:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <__multadd+0x84>)
 8005684:	480c      	ldr	r0, [pc, #48]	; (80056b8 <__multadd+0x88>)
 8005686:	f000 fd4f 	bl	8006128 <__assert_func>
 800568a:	6922      	ldr	r2, [r4, #16]
 800568c:	f104 010c 	add.w	r1, r4, #12
 8005690:	3202      	adds	r2, #2
 8005692:	0092      	lsls	r2, r2, #2
 8005694:	300c      	adds	r0, #12
 8005696:	f7ff ff5b 	bl	8005550 <memcpy>
 800569a:	4621      	mov	r1, r4
 800569c:	4638      	mov	r0, r7
 800569e:	f7ff ffa5 	bl	80055ec <_Bfree>
 80056a2:	4644      	mov	r4, r8
 80056a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80056a8:	3501      	adds	r5, #1
 80056aa:	615e      	str	r6, [r3, #20]
 80056ac:	6125      	str	r5, [r4, #16]
 80056ae:	4620      	mov	r0, r4
 80056b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b4:	08006f1b 	.word	0x08006f1b
 80056b8:	08006f2c 	.word	0x08006f2c

080056bc <__hi0bits>:
 80056bc:	0c02      	lsrs	r2, r0, #16
 80056be:	0412      	lsls	r2, r2, #16
 80056c0:	4603      	mov	r3, r0
 80056c2:	b9ca      	cbnz	r2, 80056f8 <__hi0bits+0x3c>
 80056c4:	0403      	lsls	r3, r0, #16
 80056c6:	2010      	movs	r0, #16
 80056c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80056cc:	bf04      	itt	eq
 80056ce:	021b      	lsleq	r3, r3, #8
 80056d0:	3008      	addeq	r0, #8
 80056d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80056d6:	bf04      	itt	eq
 80056d8:	011b      	lsleq	r3, r3, #4
 80056da:	3004      	addeq	r0, #4
 80056dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80056e0:	bf04      	itt	eq
 80056e2:	009b      	lsleq	r3, r3, #2
 80056e4:	3002      	addeq	r0, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	db05      	blt.n	80056f6 <__hi0bits+0x3a>
 80056ea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80056ee:	f100 0001 	add.w	r0, r0, #1
 80056f2:	bf08      	it	eq
 80056f4:	2020      	moveq	r0, #32
 80056f6:	4770      	bx	lr
 80056f8:	2000      	movs	r0, #0
 80056fa:	e7e5      	b.n	80056c8 <__hi0bits+0xc>

080056fc <__lo0bits>:
 80056fc:	6803      	ldr	r3, [r0, #0]
 80056fe:	4602      	mov	r2, r0
 8005700:	f013 0007 	ands.w	r0, r3, #7
 8005704:	d00b      	beq.n	800571e <__lo0bits+0x22>
 8005706:	07d9      	lsls	r1, r3, #31
 8005708:	d421      	bmi.n	800574e <__lo0bits+0x52>
 800570a:	0798      	lsls	r0, r3, #30
 800570c:	bf49      	itett	mi
 800570e:	085b      	lsrmi	r3, r3, #1
 8005710:	089b      	lsrpl	r3, r3, #2
 8005712:	2001      	movmi	r0, #1
 8005714:	6013      	strmi	r3, [r2, #0]
 8005716:	bf5c      	itt	pl
 8005718:	2002      	movpl	r0, #2
 800571a:	6013      	strpl	r3, [r2, #0]
 800571c:	4770      	bx	lr
 800571e:	b299      	uxth	r1, r3
 8005720:	b909      	cbnz	r1, 8005726 <__lo0bits+0x2a>
 8005722:	2010      	movs	r0, #16
 8005724:	0c1b      	lsrs	r3, r3, #16
 8005726:	b2d9      	uxtb	r1, r3
 8005728:	b909      	cbnz	r1, 800572e <__lo0bits+0x32>
 800572a:	3008      	adds	r0, #8
 800572c:	0a1b      	lsrs	r3, r3, #8
 800572e:	0719      	lsls	r1, r3, #28
 8005730:	bf04      	itt	eq
 8005732:	091b      	lsreq	r3, r3, #4
 8005734:	3004      	addeq	r0, #4
 8005736:	0799      	lsls	r1, r3, #30
 8005738:	bf04      	itt	eq
 800573a:	089b      	lsreq	r3, r3, #2
 800573c:	3002      	addeq	r0, #2
 800573e:	07d9      	lsls	r1, r3, #31
 8005740:	d403      	bmi.n	800574a <__lo0bits+0x4e>
 8005742:	085b      	lsrs	r3, r3, #1
 8005744:	f100 0001 	add.w	r0, r0, #1
 8005748:	d003      	beq.n	8005752 <__lo0bits+0x56>
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	4770      	bx	lr
 800574e:	2000      	movs	r0, #0
 8005750:	4770      	bx	lr
 8005752:	2020      	movs	r0, #32
 8005754:	4770      	bx	lr
	...

08005758 <__i2b>:
 8005758:	b510      	push	{r4, lr}
 800575a:	460c      	mov	r4, r1
 800575c:	2101      	movs	r1, #1
 800575e:	f7ff ff05 	bl	800556c <_Balloc>
 8005762:	4602      	mov	r2, r0
 8005764:	b928      	cbnz	r0, 8005772 <__i2b+0x1a>
 8005766:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800576a:	4b04      	ldr	r3, [pc, #16]	; (800577c <__i2b+0x24>)
 800576c:	4804      	ldr	r0, [pc, #16]	; (8005780 <__i2b+0x28>)
 800576e:	f000 fcdb 	bl	8006128 <__assert_func>
 8005772:	2301      	movs	r3, #1
 8005774:	6144      	str	r4, [r0, #20]
 8005776:	6103      	str	r3, [r0, #16]
 8005778:	bd10      	pop	{r4, pc}
 800577a:	bf00      	nop
 800577c:	08006f1b 	.word	0x08006f1b
 8005780:	08006f2c 	.word	0x08006f2c

08005784 <__multiply>:
 8005784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005788:	4691      	mov	r9, r2
 800578a:	690a      	ldr	r2, [r1, #16]
 800578c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005790:	460c      	mov	r4, r1
 8005792:	429a      	cmp	r2, r3
 8005794:	bfbe      	ittt	lt
 8005796:	460b      	movlt	r3, r1
 8005798:	464c      	movlt	r4, r9
 800579a:	4699      	movlt	r9, r3
 800579c:	6927      	ldr	r7, [r4, #16]
 800579e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80057a2:	68a3      	ldr	r3, [r4, #8]
 80057a4:	6861      	ldr	r1, [r4, #4]
 80057a6:	eb07 060a 	add.w	r6, r7, sl
 80057aa:	42b3      	cmp	r3, r6
 80057ac:	b085      	sub	sp, #20
 80057ae:	bfb8      	it	lt
 80057b0:	3101      	addlt	r1, #1
 80057b2:	f7ff fedb 	bl	800556c <_Balloc>
 80057b6:	b930      	cbnz	r0, 80057c6 <__multiply+0x42>
 80057b8:	4602      	mov	r2, r0
 80057ba:	f240 115d 	movw	r1, #349	; 0x15d
 80057be:	4b43      	ldr	r3, [pc, #268]	; (80058cc <__multiply+0x148>)
 80057c0:	4843      	ldr	r0, [pc, #268]	; (80058d0 <__multiply+0x14c>)
 80057c2:	f000 fcb1 	bl	8006128 <__assert_func>
 80057c6:	f100 0514 	add.w	r5, r0, #20
 80057ca:	462b      	mov	r3, r5
 80057cc:	2200      	movs	r2, #0
 80057ce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80057d2:	4543      	cmp	r3, r8
 80057d4:	d321      	bcc.n	800581a <__multiply+0x96>
 80057d6:	f104 0314 	add.w	r3, r4, #20
 80057da:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80057de:	f109 0314 	add.w	r3, r9, #20
 80057e2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80057e6:	9202      	str	r2, [sp, #8]
 80057e8:	1b3a      	subs	r2, r7, r4
 80057ea:	3a15      	subs	r2, #21
 80057ec:	f022 0203 	bic.w	r2, r2, #3
 80057f0:	3204      	adds	r2, #4
 80057f2:	f104 0115 	add.w	r1, r4, #21
 80057f6:	428f      	cmp	r7, r1
 80057f8:	bf38      	it	cc
 80057fa:	2204      	movcc	r2, #4
 80057fc:	9201      	str	r2, [sp, #4]
 80057fe:	9a02      	ldr	r2, [sp, #8]
 8005800:	9303      	str	r3, [sp, #12]
 8005802:	429a      	cmp	r2, r3
 8005804:	d80c      	bhi.n	8005820 <__multiply+0x9c>
 8005806:	2e00      	cmp	r6, #0
 8005808:	dd03      	ble.n	8005812 <__multiply+0x8e>
 800580a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800580e:	2b00      	cmp	r3, #0
 8005810:	d059      	beq.n	80058c6 <__multiply+0x142>
 8005812:	6106      	str	r6, [r0, #16]
 8005814:	b005      	add	sp, #20
 8005816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800581a:	f843 2b04 	str.w	r2, [r3], #4
 800581e:	e7d8      	b.n	80057d2 <__multiply+0x4e>
 8005820:	f8b3 a000 	ldrh.w	sl, [r3]
 8005824:	f1ba 0f00 	cmp.w	sl, #0
 8005828:	d023      	beq.n	8005872 <__multiply+0xee>
 800582a:	46a9      	mov	r9, r5
 800582c:	f04f 0c00 	mov.w	ip, #0
 8005830:	f104 0e14 	add.w	lr, r4, #20
 8005834:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005838:	f8d9 1000 	ldr.w	r1, [r9]
 800583c:	fa1f fb82 	uxth.w	fp, r2
 8005840:	b289      	uxth	r1, r1
 8005842:	fb0a 110b 	mla	r1, sl, fp, r1
 8005846:	4461      	add	r1, ip
 8005848:	f8d9 c000 	ldr.w	ip, [r9]
 800584c:	0c12      	lsrs	r2, r2, #16
 800584e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005852:	fb0a c202 	mla	r2, sl, r2, ip
 8005856:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800585a:	b289      	uxth	r1, r1
 800585c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005860:	4577      	cmp	r7, lr
 8005862:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005866:	f849 1b04 	str.w	r1, [r9], #4
 800586a:	d8e3      	bhi.n	8005834 <__multiply+0xb0>
 800586c:	9a01      	ldr	r2, [sp, #4]
 800586e:	f845 c002 	str.w	ip, [r5, r2]
 8005872:	9a03      	ldr	r2, [sp, #12]
 8005874:	3304      	adds	r3, #4
 8005876:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800587a:	f1b9 0f00 	cmp.w	r9, #0
 800587e:	d020      	beq.n	80058c2 <__multiply+0x13e>
 8005880:	46ae      	mov	lr, r5
 8005882:	f04f 0a00 	mov.w	sl, #0
 8005886:	6829      	ldr	r1, [r5, #0]
 8005888:	f104 0c14 	add.w	ip, r4, #20
 800588c:	f8bc b000 	ldrh.w	fp, [ip]
 8005890:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005894:	b289      	uxth	r1, r1
 8005896:	fb09 220b 	mla	r2, r9, fp, r2
 800589a:	4492      	add	sl, r2
 800589c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80058a0:	f84e 1b04 	str.w	r1, [lr], #4
 80058a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80058a8:	f8be 1000 	ldrh.w	r1, [lr]
 80058ac:	0c12      	lsrs	r2, r2, #16
 80058ae:	fb09 1102 	mla	r1, r9, r2, r1
 80058b2:	4567      	cmp	r7, ip
 80058b4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80058b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80058bc:	d8e6      	bhi.n	800588c <__multiply+0x108>
 80058be:	9a01      	ldr	r2, [sp, #4]
 80058c0:	50a9      	str	r1, [r5, r2]
 80058c2:	3504      	adds	r5, #4
 80058c4:	e79b      	b.n	80057fe <__multiply+0x7a>
 80058c6:	3e01      	subs	r6, #1
 80058c8:	e79d      	b.n	8005806 <__multiply+0x82>
 80058ca:	bf00      	nop
 80058cc:	08006f1b 	.word	0x08006f1b
 80058d0:	08006f2c 	.word	0x08006f2c

080058d4 <__pow5mult>:
 80058d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d8:	4615      	mov	r5, r2
 80058da:	f012 0203 	ands.w	r2, r2, #3
 80058de:	4606      	mov	r6, r0
 80058e0:	460f      	mov	r7, r1
 80058e2:	d007      	beq.n	80058f4 <__pow5mult+0x20>
 80058e4:	4c25      	ldr	r4, [pc, #148]	; (800597c <__pow5mult+0xa8>)
 80058e6:	3a01      	subs	r2, #1
 80058e8:	2300      	movs	r3, #0
 80058ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058ee:	f7ff fe9f 	bl	8005630 <__multadd>
 80058f2:	4607      	mov	r7, r0
 80058f4:	10ad      	asrs	r5, r5, #2
 80058f6:	d03d      	beq.n	8005974 <__pow5mult+0xa0>
 80058f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80058fa:	b97c      	cbnz	r4, 800591c <__pow5mult+0x48>
 80058fc:	2010      	movs	r0, #16
 80058fe:	f7ff fe11 	bl	8005524 <malloc>
 8005902:	4602      	mov	r2, r0
 8005904:	6270      	str	r0, [r6, #36]	; 0x24
 8005906:	b928      	cbnz	r0, 8005914 <__pow5mult+0x40>
 8005908:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800590c:	4b1c      	ldr	r3, [pc, #112]	; (8005980 <__pow5mult+0xac>)
 800590e:	481d      	ldr	r0, [pc, #116]	; (8005984 <__pow5mult+0xb0>)
 8005910:	f000 fc0a 	bl	8006128 <__assert_func>
 8005914:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005918:	6004      	str	r4, [r0, #0]
 800591a:	60c4      	str	r4, [r0, #12]
 800591c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005924:	b94c      	cbnz	r4, 800593a <__pow5mult+0x66>
 8005926:	f240 2171 	movw	r1, #625	; 0x271
 800592a:	4630      	mov	r0, r6
 800592c:	f7ff ff14 	bl	8005758 <__i2b>
 8005930:	2300      	movs	r3, #0
 8005932:	4604      	mov	r4, r0
 8005934:	f8c8 0008 	str.w	r0, [r8, #8]
 8005938:	6003      	str	r3, [r0, #0]
 800593a:	f04f 0900 	mov.w	r9, #0
 800593e:	07eb      	lsls	r3, r5, #31
 8005940:	d50a      	bpl.n	8005958 <__pow5mult+0x84>
 8005942:	4639      	mov	r1, r7
 8005944:	4622      	mov	r2, r4
 8005946:	4630      	mov	r0, r6
 8005948:	f7ff ff1c 	bl	8005784 <__multiply>
 800594c:	4680      	mov	r8, r0
 800594e:	4639      	mov	r1, r7
 8005950:	4630      	mov	r0, r6
 8005952:	f7ff fe4b 	bl	80055ec <_Bfree>
 8005956:	4647      	mov	r7, r8
 8005958:	106d      	asrs	r5, r5, #1
 800595a:	d00b      	beq.n	8005974 <__pow5mult+0xa0>
 800595c:	6820      	ldr	r0, [r4, #0]
 800595e:	b938      	cbnz	r0, 8005970 <__pow5mult+0x9c>
 8005960:	4622      	mov	r2, r4
 8005962:	4621      	mov	r1, r4
 8005964:	4630      	mov	r0, r6
 8005966:	f7ff ff0d 	bl	8005784 <__multiply>
 800596a:	6020      	str	r0, [r4, #0]
 800596c:	f8c0 9000 	str.w	r9, [r0]
 8005970:	4604      	mov	r4, r0
 8005972:	e7e4      	b.n	800593e <__pow5mult+0x6a>
 8005974:	4638      	mov	r0, r7
 8005976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597a:	bf00      	nop
 800597c:	08007078 	.word	0x08007078
 8005980:	08006ea9 	.word	0x08006ea9
 8005984:	08006f2c 	.word	0x08006f2c

08005988 <__lshift>:
 8005988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800598c:	460c      	mov	r4, r1
 800598e:	4607      	mov	r7, r0
 8005990:	4691      	mov	r9, r2
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	6849      	ldr	r1, [r1, #4]
 8005996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800599a:	68a3      	ldr	r3, [r4, #8]
 800599c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059a0:	f108 0601 	add.w	r6, r8, #1
 80059a4:	42b3      	cmp	r3, r6
 80059a6:	db0b      	blt.n	80059c0 <__lshift+0x38>
 80059a8:	4638      	mov	r0, r7
 80059aa:	f7ff fddf 	bl	800556c <_Balloc>
 80059ae:	4605      	mov	r5, r0
 80059b0:	b948      	cbnz	r0, 80059c6 <__lshift+0x3e>
 80059b2:	4602      	mov	r2, r0
 80059b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80059b8:	4b29      	ldr	r3, [pc, #164]	; (8005a60 <__lshift+0xd8>)
 80059ba:	482a      	ldr	r0, [pc, #168]	; (8005a64 <__lshift+0xdc>)
 80059bc:	f000 fbb4 	bl	8006128 <__assert_func>
 80059c0:	3101      	adds	r1, #1
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	e7ee      	b.n	80059a4 <__lshift+0x1c>
 80059c6:	2300      	movs	r3, #0
 80059c8:	f100 0114 	add.w	r1, r0, #20
 80059cc:	f100 0210 	add.w	r2, r0, #16
 80059d0:	4618      	mov	r0, r3
 80059d2:	4553      	cmp	r3, sl
 80059d4:	db37      	blt.n	8005a46 <__lshift+0xbe>
 80059d6:	6920      	ldr	r0, [r4, #16]
 80059d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059dc:	f104 0314 	add.w	r3, r4, #20
 80059e0:	f019 091f 	ands.w	r9, r9, #31
 80059e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80059ec:	d02f      	beq.n	8005a4e <__lshift+0xc6>
 80059ee:	468a      	mov	sl, r1
 80059f0:	f04f 0c00 	mov.w	ip, #0
 80059f4:	f1c9 0e20 	rsb	lr, r9, #32
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	fa02 f209 	lsl.w	r2, r2, r9
 80059fe:	ea42 020c 	orr.w	r2, r2, ip
 8005a02:	f84a 2b04 	str.w	r2, [sl], #4
 8005a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a0a:	4298      	cmp	r0, r3
 8005a0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005a10:	d8f2      	bhi.n	80059f8 <__lshift+0x70>
 8005a12:	1b03      	subs	r3, r0, r4
 8005a14:	3b15      	subs	r3, #21
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	f104 0215 	add.w	r2, r4, #21
 8005a20:	4290      	cmp	r0, r2
 8005a22:	bf38      	it	cc
 8005a24:	2304      	movcc	r3, #4
 8005a26:	f841 c003 	str.w	ip, [r1, r3]
 8005a2a:	f1bc 0f00 	cmp.w	ip, #0
 8005a2e:	d001      	beq.n	8005a34 <__lshift+0xac>
 8005a30:	f108 0602 	add.w	r6, r8, #2
 8005a34:	3e01      	subs	r6, #1
 8005a36:	4638      	mov	r0, r7
 8005a38:	4621      	mov	r1, r4
 8005a3a:	612e      	str	r6, [r5, #16]
 8005a3c:	f7ff fdd6 	bl	80055ec <_Bfree>
 8005a40:	4628      	mov	r0, r5
 8005a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a46:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	e7c1      	b.n	80059d2 <__lshift+0x4a>
 8005a4e:	3904      	subs	r1, #4
 8005a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a54:	4298      	cmp	r0, r3
 8005a56:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a5a:	d8f9      	bhi.n	8005a50 <__lshift+0xc8>
 8005a5c:	e7ea      	b.n	8005a34 <__lshift+0xac>
 8005a5e:	bf00      	nop
 8005a60:	08006f1b 	.word	0x08006f1b
 8005a64:	08006f2c 	.word	0x08006f2c

08005a68 <__mcmp>:
 8005a68:	4603      	mov	r3, r0
 8005a6a:	690a      	ldr	r2, [r1, #16]
 8005a6c:	6900      	ldr	r0, [r0, #16]
 8005a6e:	b530      	push	{r4, r5, lr}
 8005a70:	1a80      	subs	r0, r0, r2
 8005a72:	d10d      	bne.n	8005a90 <__mcmp+0x28>
 8005a74:	3314      	adds	r3, #20
 8005a76:	3114      	adds	r1, #20
 8005a78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a88:	4295      	cmp	r5, r2
 8005a8a:	d002      	beq.n	8005a92 <__mcmp+0x2a>
 8005a8c:	d304      	bcc.n	8005a98 <__mcmp+0x30>
 8005a8e:	2001      	movs	r0, #1
 8005a90:	bd30      	pop	{r4, r5, pc}
 8005a92:	42a3      	cmp	r3, r4
 8005a94:	d3f4      	bcc.n	8005a80 <__mcmp+0x18>
 8005a96:	e7fb      	b.n	8005a90 <__mcmp+0x28>
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e7f8      	b.n	8005a90 <__mcmp+0x28>
	...

08005aa0 <__mdiff>:
 8005aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	460d      	mov	r5, r1
 8005aa6:	4607      	mov	r7, r0
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4628      	mov	r0, r5
 8005aac:	4614      	mov	r4, r2
 8005aae:	f7ff ffdb 	bl	8005a68 <__mcmp>
 8005ab2:	1e06      	subs	r6, r0, #0
 8005ab4:	d111      	bne.n	8005ada <__mdiff+0x3a>
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f7ff fd57 	bl	800556c <_Balloc>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	b928      	cbnz	r0, 8005ace <__mdiff+0x2e>
 8005ac2:	f240 2132 	movw	r1, #562	; 0x232
 8005ac6:	4b3a      	ldr	r3, [pc, #232]	; (8005bb0 <__mdiff+0x110>)
 8005ac8:	483a      	ldr	r0, [pc, #232]	; (8005bb4 <__mdiff+0x114>)
 8005aca:	f000 fb2d 	bl	8006128 <__assert_func>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ada:	bfa4      	itt	ge
 8005adc:	4623      	movge	r3, r4
 8005ade:	462c      	movge	r4, r5
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	6861      	ldr	r1, [r4, #4]
 8005ae4:	bfa6      	itte	ge
 8005ae6:	461d      	movge	r5, r3
 8005ae8:	2600      	movge	r6, #0
 8005aea:	2601      	movlt	r6, #1
 8005aec:	f7ff fd3e 	bl	800556c <_Balloc>
 8005af0:	4602      	mov	r2, r0
 8005af2:	b918      	cbnz	r0, 8005afc <__mdiff+0x5c>
 8005af4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005af8:	4b2d      	ldr	r3, [pc, #180]	; (8005bb0 <__mdiff+0x110>)
 8005afa:	e7e5      	b.n	8005ac8 <__mdiff+0x28>
 8005afc:	f102 0814 	add.w	r8, r2, #20
 8005b00:	46c2      	mov	sl, r8
 8005b02:	f04f 0c00 	mov.w	ip, #0
 8005b06:	6927      	ldr	r7, [r4, #16]
 8005b08:	60c6      	str	r6, [r0, #12]
 8005b0a:	692e      	ldr	r6, [r5, #16]
 8005b0c:	f104 0014 	add.w	r0, r4, #20
 8005b10:	f105 0914 	add.w	r9, r5, #20
 8005b14:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005b18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005b1c:	3410      	adds	r4, #16
 8005b1e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005b22:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b26:	fa1f f18b 	uxth.w	r1, fp
 8005b2a:	448c      	add	ip, r1
 8005b2c:	b299      	uxth	r1, r3
 8005b2e:	0c1b      	lsrs	r3, r3, #16
 8005b30:	ebac 0101 	sub.w	r1, ip, r1
 8005b34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005b38:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005b3c:	b289      	uxth	r1, r1
 8005b3e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005b42:	454e      	cmp	r6, r9
 8005b44:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005b48:	f84a 3b04 	str.w	r3, [sl], #4
 8005b4c:	d8e7      	bhi.n	8005b1e <__mdiff+0x7e>
 8005b4e:	1b73      	subs	r3, r6, r5
 8005b50:	3b15      	subs	r3, #21
 8005b52:	f023 0303 	bic.w	r3, r3, #3
 8005b56:	3515      	adds	r5, #21
 8005b58:	3304      	adds	r3, #4
 8005b5a:	42ae      	cmp	r6, r5
 8005b5c:	bf38      	it	cc
 8005b5e:	2304      	movcc	r3, #4
 8005b60:	4418      	add	r0, r3
 8005b62:	4443      	add	r3, r8
 8005b64:	461e      	mov	r6, r3
 8005b66:	4605      	mov	r5, r0
 8005b68:	4575      	cmp	r5, lr
 8005b6a:	d30e      	bcc.n	8005b8a <__mdiff+0xea>
 8005b6c:	f10e 0103 	add.w	r1, lr, #3
 8005b70:	1a09      	subs	r1, r1, r0
 8005b72:	f021 0103 	bic.w	r1, r1, #3
 8005b76:	3803      	subs	r0, #3
 8005b78:	4586      	cmp	lr, r0
 8005b7a:	bf38      	it	cc
 8005b7c:	2100      	movcc	r1, #0
 8005b7e:	4419      	add	r1, r3
 8005b80:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005b84:	b18b      	cbz	r3, 8005baa <__mdiff+0x10a>
 8005b86:	6117      	str	r7, [r2, #16]
 8005b88:	e7a4      	b.n	8005ad4 <__mdiff+0x34>
 8005b8a:	f855 8b04 	ldr.w	r8, [r5], #4
 8005b8e:	fa1f f188 	uxth.w	r1, r8
 8005b92:	4461      	add	r1, ip
 8005b94:	140c      	asrs	r4, r1, #16
 8005b96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005b9a:	b289      	uxth	r1, r1
 8005b9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005ba0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005ba4:	f846 1b04 	str.w	r1, [r6], #4
 8005ba8:	e7de      	b.n	8005b68 <__mdiff+0xc8>
 8005baa:	3f01      	subs	r7, #1
 8005bac:	e7e8      	b.n	8005b80 <__mdiff+0xe0>
 8005bae:	bf00      	nop
 8005bb0:	08006f1b 	.word	0x08006f1b
 8005bb4:	08006f2c 	.word	0x08006f2c

08005bb8 <__d2b>:
 8005bb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005bc2:	4690      	mov	r8, r2
 8005bc4:	461d      	mov	r5, r3
 8005bc6:	f7ff fcd1 	bl	800556c <_Balloc>
 8005bca:	4604      	mov	r4, r0
 8005bcc:	b930      	cbnz	r0, 8005bdc <__d2b+0x24>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	f240 310a 	movw	r1, #778	; 0x30a
 8005bd4:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <__d2b+0xb0>)
 8005bd6:	4825      	ldr	r0, [pc, #148]	; (8005c6c <__d2b+0xb4>)
 8005bd8:	f000 faa6 	bl	8006128 <__assert_func>
 8005bdc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005be0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005be4:	bb2d      	cbnz	r5, 8005c32 <__d2b+0x7a>
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	f1b8 0300 	subs.w	r3, r8, #0
 8005bec:	d026      	beq.n	8005c3c <__d2b+0x84>
 8005bee:	4668      	mov	r0, sp
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	f7ff fd83 	bl	80056fc <__lo0bits>
 8005bf6:	9900      	ldr	r1, [sp, #0]
 8005bf8:	b1f0      	cbz	r0, 8005c38 <__d2b+0x80>
 8005bfa:	9a01      	ldr	r2, [sp, #4]
 8005bfc:	f1c0 0320 	rsb	r3, r0, #32
 8005c00:	fa02 f303 	lsl.w	r3, r2, r3
 8005c04:	430b      	orrs	r3, r1
 8005c06:	40c2      	lsrs	r2, r0
 8005c08:	6163      	str	r3, [r4, #20]
 8005c0a:	9201      	str	r2, [sp, #4]
 8005c0c:	9b01      	ldr	r3, [sp, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bf14      	ite	ne
 8005c12:	2102      	movne	r1, #2
 8005c14:	2101      	moveq	r1, #1
 8005c16:	61a3      	str	r3, [r4, #24]
 8005c18:	6121      	str	r1, [r4, #16]
 8005c1a:	b1c5      	cbz	r5, 8005c4e <__d2b+0x96>
 8005c1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c20:	4405      	add	r5, r0
 8005c22:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c26:	603d      	str	r5, [r7, #0]
 8005c28:	6030      	str	r0, [r6, #0]
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	b002      	add	sp, #8
 8005c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c36:	e7d6      	b.n	8005be6 <__d2b+0x2e>
 8005c38:	6161      	str	r1, [r4, #20]
 8005c3a:	e7e7      	b.n	8005c0c <__d2b+0x54>
 8005c3c:	a801      	add	r0, sp, #4
 8005c3e:	f7ff fd5d 	bl	80056fc <__lo0bits>
 8005c42:	2101      	movs	r1, #1
 8005c44:	9b01      	ldr	r3, [sp, #4]
 8005c46:	6121      	str	r1, [r4, #16]
 8005c48:	6163      	str	r3, [r4, #20]
 8005c4a:	3020      	adds	r0, #32
 8005c4c:	e7e5      	b.n	8005c1a <__d2b+0x62>
 8005c4e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005c52:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c56:	6038      	str	r0, [r7, #0]
 8005c58:	6918      	ldr	r0, [r3, #16]
 8005c5a:	f7ff fd2f 	bl	80056bc <__hi0bits>
 8005c5e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005c62:	6031      	str	r1, [r6, #0]
 8005c64:	e7e1      	b.n	8005c2a <__d2b+0x72>
 8005c66:	bf00      	nop
 8005c68:	08006f1b 	.word	0x08006f1b
 8005c6c:	08006f2c 	.word	0x08006f2c

08005c70 <_calloc_r>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	fba1 5402 	umull	r5, r4, r1, r2
 8005c76:	b934      	cbnz	r4, 8005c86 <_calloc_r+0x16>
 8005c78:	4629      	mov	r1, r5
 8005c7a:	f000 f875 	bl	8005d68 <_malloc_r>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	b928      	cbnz	r0, 8005c8e <_calloc_r+0x1e>
 8005c82:	4630      	mov	r0, r6
 8005c84:	bd70      	pop	{r4, r5, r6, pc}
 8005c86:	220c      	movs	r2, #12
 8005c88:	2600      	movs	r6, #0
 8005c8a:	6002      	str	r2, [r0, #0]
 8005c8c:	e7f9      	b.n	8005c82 <_calloc_r+0x12>
 8005c8e:	462a      	mov	r2, r5
 8005c90:	4621      	mov	r1, r4
 8005c92:	f7fe f93f 	bl	8003f14 <memset>
 8005c96:	e7f4      	b.n	8005c82 <_calloc_r+0x12>

08005c98 <_free_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	d040      	beq.n	8005d22 <_free_r+0x8a>
 8005ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ca4:	1f0c      	subs	r4, r1, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bfb8      	it	lt
 8005caa:	18e4      	addlt	r4, r4, r3
 8005cac:	f000 fa98 	bl	80061e0 <__malloc_lock>
 8005cb0:	4a1c      	ldr	r2, [pc, #112]	; (8005d24 <_free_r+0x8c>)
 8005cb2:	6813      	ldr	r3, [r2, #0]
 8005cb4:	b933      	cbnz	r3, 8005cc4 <_free_r+0x2c>
 8005cb6:	6063      	str	r3, [r4, #4]
 8005cb8:	6014      	str	r4, [r2, #0]
 8005cba:	4628      	mov	r0, r5
 8005cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cc0:	f000 ba94 	b.w	80061ec <__malloc_unlock>
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	d908      	bls.n	8005cda <_free_r+0x42>
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	1821      	adds	r1, r4, r0
 8005ccc:	428b      	cmp	r3, r1
 8005cce:	bf01      	itttt	eq
 8005cd0:	6819      	ldreq	r1, [r3, #0]
 8005cd2:	685b      	ldreq	r3, [r3, #4]
 8005cd4:	1809      	addeq	r1, r1, r0
 8005cd6:	6021      	streq	r1, [r4, #0]
 8005cd8:	e7ed      	b.n	8005cb6 <_free_r+0x1e>
 8005cda:	461a      	mov	r2, r3
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b10b      	cbz	r3, 8005ce4 <_free_r+0x4c>
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	d9fa      	bls.n	8005cda <_free_r+0x42>
 8005ce4:	6811      	ldr	r1, [r2, #0]
 8005ce6:	1850      	adds	r0, r2, r1
 8005ce8:	42a0      	cmp	r0, r4
 8005cea:	d10b      	bne.n	8005d04 <_free_r+0x6c>
 8005cec:	6820      	ldr	r0, [r4, #0]
 8005cee:	4401      	add	r1, r0
 8005cf0:	1850      	adds	r0, r2, r1
 8005cf2:	4283      	cmp	r3, r0
 8005cf4:	6011      	str	r1, [r2, #0]
 8005cf6:	d1e0      	bne.n	8005cba <_free_r+0x22>
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	4401      	add	r1, r0
 8005cfe:	6011      	str	r1, [r2, #0]
 8005d00:	6053      	str	r3, [r2, #4]
 8005d02:	e7da      	b.n	8005cba <_free_r+0x22>
 8005d04:	d902      	bls.n	8005d0c <_free_r+0x74>
 8005d06:	230c      	movs	r3, #12
 8005d08:	602b      	str	r3, [r5, #0]
 8005d0a:	e7d6      	b.n	8005cba <_free_r+0x22>
 8005d0c:	6820      	ldr	r0, [r4, #0]
 8005d0e:	1821      	adds	r1, r4, r0
 8005d10:	428b      	cmp	r3, r1
 8005d12:	bf01      	itttt	eq
 8005d14:	6819      	ldreq	r1, [r3, #0]
 8005d16:	685b      	ldreq	r3, [r3, #4]
 8005d18:	1809      	addeq	r1, r1, r0
 8005d1a:	6021      	streq	r1, [r4, #0]
 8005d1c:	6063      	str	r3, [r4, #4]
 8005d1e:	6054      	str	r4, [r2, #4]
 8005d20:	e7cb      	b.n	8005cba <_free_r+0x22>
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	200002d0 	.word	0x200002d0

08005d28 <sbrk_aligned>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	4e0e      	ldr	r6, [pc, #56]	; (8005d64 <sbrk_aligned+0x3c>)
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	6831      	ldr	r1, [r6, #0]
 8005d30:	4605      	mov	r5, r0
 8005d32:	b911      	cbnz	r1, 8005d3a <sbrk_aligned+0x12>
 8005d34:	f000 f9e8 	bl	8006108 <_sbrk_r>
 8005d38:	6030      	str	r0, [r6, #0]
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f000 f9e3 	bl	8006108 <_sbrk_r>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d00a      	beq.n	8005d5c <sbrk_aligned+0x34>
 8005d46:	1cc4      	adds	r4, r0, #3
 8005d48:	f024 0403 	bic.w	r4, r4, #3
 8005d4c:	42a0      	cmp	r0, r4
 8005d4e:	d007      	beq.n	8005d60 <sbrk_aligned+0x38>
 8005d50:	1a21      	subs	r1, r4, r0
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 f9d8 	bl	8006108 <_sbrk_r>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d101      	bne.n	8005d60 <sbrk_aligned+0x38>
 8005d5c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d60:	4620      	mov	r0, r4
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	200002d4 	.word	0x200002d4

08005d68 <_malloc_r>:
 8005d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6c:	1ccd      	adds	r5, r1, #3
 8005d6e:	f025 0503 	bic.w	r5, r5, #3
 8005d72:	3508      	adds	r5, #8
 8005d74:	2d0c      	cmp	r5, #12
 8005d76:	bf38      	it	cc
 8005d78:	250c      	movcc	r5, #12
 8005d7a:	2d00      	cmp	r5, #0
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	db01      	blt.n	8005d84 <_malloc_r+0x1c>
 8005d80:	42a9      	cmp	r1, r5
 8005d82:	d905      	bls.n	8005d90 <_malloc_r+0x28>
 8005d84:	230c      	movs	r3, #12
 8005d86:	2600      	movs	r6, #0
 8005d88:	603b      	str	r3, [r7, #0]
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d90:	4e2e      	ldr	r6, [pc, #184]	; (8005e4c <_malloc_r+0xe4>)
 8005d92:	f000 fa25 	bl	80061e0 <__malloc_lock>
 8005d96:	6833      	ldr	r3, [r6, #0]
 8005d98:	461c      	mov	r4, r3
 8005d9a:	bb34      	cbnz	r4, 8005dea <_malloc_r+0x82>
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f7ff ffc2 	bl	8005d28 <sbrk_aligned>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	4604      	mov	r4, r0
 8005da8:	d14d      	bne.n	8005e46 <_malloc_r+0xde>
 8005daa:	6834      	ldr	r4, [r6, #0]
 8005dac:	4626      	mov	r6, r4
 8005dae:	2e00      	cmp	r6, #0
 8005db0:	d140      	bne.n	8005e34 <_malloc_r+0xcc>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	4631      	mov	r1, r6
 8005db6:	4638      	mov	r0, r7
 8005db8:	eb04 0803 	add.w	r8, r4, r3
 8005dbc:	f000 f9a4 	bl	8006108 <_sbrk_r>
 8005dc0:	4580      	cmp	r8, r0
 8005dc2:	d13a      	bne.n	8005e3a <_malloc_r+0xd2>
 8005dc4:	6821      	ldr	r1, [r4, #0]
 8005dc6:	3503      	adds	r5, #3
 8005dc8:	1a6d      	subs	r5, r5, r1
 8005dca:	f025 0503 	bic.w	r5, r5, #3
 8005dce:	3508      	adds	r5, #8
 8005dd0:	2d0c      	cmp	r5, #12
 8005dd2:	bf38      	it	cc
 8005dd4:	250c      	movcc	r5, #12
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	4629      	mov	r1, r5
 8005dda:	f7ff ffa5 	bl	8005d28 <sbrk_aligned>
 8005dde:	3001      	adds	r0, #1
 8005de0:	d02b      	beq.n	8005e3a <_malloc_r+0xd2>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	442b      	add	r3, r5
 8005de6:	6023      	str	r3, [r4, #0]
 8005de8:	e00e      	b.n	8005e08 <_malloc_r+0xa0>
 8005dea:	6822      	ldr	r2, [r4, #0]
 8005dec:	1b52      	subs	r2, r2, r5
 8005dee:	d41e      	bmi.n	8005e2e <_malloc_r+0xc6>
 8005df0:	2a0b      	cmp	r2, #11
 8005df2:	d916      	bls.n	8005e22 <_malloc_r+0xba>
 8005df4:	1961      	adds	r1, r4, r5
 8005df6:	42a3      	cmp	r3, r4
 8005df8:	6025      	str	r5, [r4, #0]
 8005dfa:	bf18      	it	ne
 8005dfc:	6059      	strne	r1, [r3, #4]
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	bf08      	it	eq
 8005e02:	6031      	streq	r1, [r6, #0]
 8005e04:	5162      	str	r2, [r4, r5]
 8005e06:	604b      	str	r3, [r1, #4]
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f104 060b 	add.w	r6, r4, #11
 8005e0e:	f000 f9ed 	bl	80061ec <__malloc_unlock>
 8005e12:	f026 0607 	bic.w	r6, r6, #7
 8005e16:	1d23      	adds	r3, r4, #4
 8005e18:	1af2      	subs	r2, r6, r3
 8005e1a:	d0b6      	beq.n	8005d8a <_malloc_r+0x22>
 8005e1c:	1b9b      	subs	r3, r3, r6
 8005e1e:	50a3      	str	r3, [r4, r2]
 8005e20:	e7b3      	b.n	8005d8a <_malloc_r+0x22>
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	bf0c      	ite	eq
 8005e28:	6032      	streq	r2, [r6, #0]
 8005e2a:	605a      	strne	r2, [r3, #4]
 8005e2c:	e7ec      	b.n	8005e08 <_malloc_r+0xa0>
 8005e2e:	4623      	mov	r3, r4
 8005e30:	6864      	ldr	r4, [r4, #4]
 8005e32:	e7b2      	b.n	8005d9a <_malloc_r+0x32>
 8005e34:	4634      	mov	r4, r6
 8005e36:	6876      	ldr	r6, [r6, #4]
 8005e38:	e7b9      	b.n	8005dae <_malloc_r+0x46>
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	f000 f9d4 	bl	80061ec <__malloc_unlock>
 8005e44:	e7a1      	b.n	8005d8a <_malloc_r+0x22>
 8005e46:	6025      	str	r5, [r4, #0]
 8005e48:	e7de      	b.n	8005e08 <_malloc_r+0xa0>
 8005e4a:	bf00      	nop
 8005e4c:	200002d0 	.word	0x200002d0

08005e50 <__ssputs_r>:
 8005e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e54:	688e      	ldr	r6, [r1, #8]
 8005e56:	4682      	mov	sl, r0
 8005e58:	429e      	cmp	r6, r3
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	4690      	mov	r8, r2
 8005e5e:	461f      	mov	r7, r3
 8005e60:	d838      	bhi.n	8005ed4 <__ssputs_r+0x84>
 8005e62:	898a      	ldrh	r2, [r1, #12]
 8005e64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e68:	d032      	beq.n	8005ed0 <__ssputs_r+0x80>
 8005e6a:	6825      	ldr	r5, [r4, #0]
 8005e6c:	6909      	ldr	r1, [r1, #16]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	eba5 0901 	sub.w	r9, r5, r1
 8005e74:	6965      	ldr	r5, [r4, #20]
 8005e76:	444b      	add	r3, r9
 8005e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e80:	106d      	asrs	r5, r5, #1
 8005e82:	429d      	cmp	r5, r3
 8005e84:	bf38      	it	cc
 8005e86:	461d      	movcc	r5, r3
 8005e88:	0553      	lsls	r3, r2, #21
 8005e8a:	d531      	bpl.n	8005ef0 <__ssputs_r+0xa0>
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	f7ff ff6b 	bl	8005d68 <_malloc_r>
 8005e92:	4606      	mov	r6, r0
 8005e94:	b950      	cbnz	r0, 8005eac <__ssputs_r+0x5c>
 8005e96:	230c      	movs	r3, #12
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9c:	f8ca 3000 	str.w	r3, [sl]
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eac:	464a      	mov	r2, r9
 8005eae:	6921      	ldr	r1, [r4, #16]
 8005eb0:	f7ff fb4e 	bl	8005550 <memcpy>
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ebe:	81a3      	strh	r3, [r4, #12]
 8005ec0:	6126      	str	r6, [r4, #16]
 8005ec2:	444e      	add	r6, r9
 8005ec4:	6026      	str	r6, [r4, #0]
 8005ec6:	463e      	mov	r6, r7
 8005ec8:	6165      	str	r5, [r4, #20]
 8005eca:	eba5 0509 	sub.w	r5, r5, r9
 8005ece:	60a5      	str	r5, [r4, #8]
 8005ed0:	42be      	cmp	r6, r7
 8005ed2:	d900      	bls.n	8005ed6 <__ssputs_r+0x86>
 8005ed4:	463e      	mov	r6, r7
 8005ed6:	4632      	mov	r2, r6
 8005ed8:	4641      	mov	r1, r8
 8005eda:	6820      	ldr	r0, [r4, #0]
 8005edc:	f000 f966 	bl	80061ac <memmove>
 8005ee0:	68a3      	ldr	r3, [r4, #8]
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	1b9b      	subs	r3, r3, r6
 8005ee6:	60a3      	str	r3, [r4, #8]
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	4433      	add	r3, r6
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	e7db      	b.n	8005ea8 <__ssputs_r+0x58>
 8005ef0:	462a      	mov	r2, r5
 8005ef2:	f000 f981 	bl	80061f8 <_realloc_r>
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d1e1      	bne.n	8005ec0 <__ssputs_r+0x70>
 8005efc:	4650      	mov	r0, sl
 8005efe:	6921      	ldr	r1, [r4, #16]
 8005f00:	f7ff feca 	bl	8005c98 <_free_r>
 8005f04:	e7c7      	b.n	8005e96 <__ssputs_r+0x46>
	...

08005f08 <_svfiprintf_r>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	4698      	mov	r8, r3
 8005f0e:	898b      	ldrh	r3, [r1, #12]
 8005f10:	4607      	mov	r7, r0
 8005f12:	061b      	lsls	r3, r3, #24
 8005f14:	460d      	mov	r5, r1
 8005f16:	4614      	mov	r4, r2
 8005f18:	b09d      	sub	sp, #116	; 0x74
 8005f1a:	d50e      	bpl.n	8005f3a <_svfiprintf_r+0x32>
 8005f1c:	690b      	ldr	r3, [r1, #16]
 8005f1e:	b963      	cbnz	r3, 8005f3a <_svfiprintf_r+0x32>
 8005f20:	2140      	movs	r1, #64	; 0x40
 8005f22:	f7ff ff21 	bl	8005d68 <_malloc_r>
 8005f26:	6028      	str	r0, [r5, #0]
 8005f28:	6128      	str	r0, [r5, #16]
 8005f2a:	b920      	cbnz	r0, 8005f36 <_svfiprintf_r+0x2e>
 8005f2c:	230c      	movs	r3, #12
 8005f2e:	603b      	str	r3, [r7, #0]
 8005f30:	f04f 30ff 	mov.w	r0, #4294967295
 8005f34:	e0d1      	b.n	80060da <_svfiprintf_r+0x1d2>
 8005f36:	2340      	movs	r3, #64	; 0x40
 8005f38:	616b      	str	r3, [r5, #20]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f3e:	2320      	movs	r3, #32
 8005f40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f44:	2330      	movs	r3, #48	; 0x30
 8005f46:	f04f 0901 	mov.w	r9, #1
 8005f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80060f4 <_svfiprintf_r+0x1ec>
 8005f52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f56:	4623      	mov	r3, r4
 8005f58:	469a      	mov	sl, r3
 8005f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f5e:	b10a      	cbz	r2, 8005f64 <_svfiprintf_r+0x5c>
 8005f60:	2a25      	cmp	r2, #37	; 0x25
 8005f62:	d1f9      	bne.n	8005f58 <_svfiprintf_r+0x50>
 8005f64:	ebba 0b04 	subs.w	fp, sl, r4
 8005f68:	d00b      	beq.n	8005f82 <_svfiprintf_r+0x7a>
 8005f6a:	465b      	mov	r3, fp
 8005f6c:	4622      	mov	r2, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	4638      	mov	r0, r7
 8005f72:	f7ff ff6d 	bl	8005e50 <__ssputs_r>
 8005f76:	3001      	adds	r0, #1
 8005f78:	f000 80aa 	beq.w	80060d0 <_svfiprintf_r+0x1c8>
 8005f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f7e:	445a      	add	r2, fp
 8005f80:	9209      	str	r2, [sp, #36]	; 0x24
 8005f82:	f89a 3000 	ldrb.w	r3, [sl]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 80a2 	beq.w	80060d0 <_svfiprintf_r+0x1c8>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f96:	f10a 0a01 	add.w	sl, sl, #1
 8005f9a:	9304      	str	r3, [sp, #16]
 8005f9c:	9307      	str	r3, [sp, #28]
 8005f9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8005fa4:	4654      	mov	r4, sl
 8005fa6:	2205      	movs	r2, #5
 8005fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fac:	4851      	ldr	r0, [pc, #324]	; (80060f4 <_svfiprintf_r+0x1ec>)
 8005fae:	f7ff fac1 	bl	8005534 <memchr>
 8005fb2:	9a04      	ldr	r2, [sp, #16]
 8005fb4:	b9d8      	cbnz	r0, 8005fee <_svfiprintf_r+0xe6>
 8005fb6:	06d0      	lsls	r0, r2, #27
 8005fb8:	bf44      	itt	mi
 8005fba:	2320      	movmi	r3, #32
 8005fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fc0:	0711      	lsls	r1, r2, #28
 8005fc2:	bf44      	itt	mi
 8005fc4:	232b      	movmi	r3, #43	; 0x2b
 8005fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fca:	f89a 3000 	ldrb.w	r3, [sl]
 8005fce:	2b2a      	cmp	r3, #42	; 0x2a
 8005fd0:	d015      	beq.n	8005ffe <_svfiprintf_r+0xf6>
 8005fd2:	4654      	mov	r4, sl
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	f04f 0c0a 	mov.w	ip, #10
 8005fda:	9a07      	ldr	r2, [sp, #28]
 8005fdc:	4621      	mov	r1, r4
 8005fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fe2:	3b30      	subs	r3, #48	; 0x30
 8005fe4:	2b09      	cmp	r3, #9
 8005fe6:	d94e      	bls.n	8006086 <_svfiprintf_r+0x17e>
 8005fe8:	b1b0      	cbz	r0, 8006018 <_svfiprintf_r+0x110>
 8005fea:	9207      	str	r2, [sp, #28]
 8005fec:	e014      	b.n	8006018 <_svfiprintf_r+0x110>
 8005fee:	eba0 0308 	sub.w	r3, r0, r8
 8005ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	46a2      	mov	sl, r4
 8005ffa:	9304      	str	r3, [sp, #16]
 8005ffc:	e7d2      	b.n	8005fa4 <_svfiprintf_r+0x9c>
 8005ffe:	9b03      	ldr	r3, [sp, #12]
 8006000:	1d19      	adds	r1, r3, #4
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	9103      	str	r1, [sp, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	bfbb      	ittet	lt
 800600a:	425b      	neglt	r3, r3
 800600c:	f042 0202 	orrlt.w	r2, r2, #2
 8006010:	9307      	strge	r3, [sp, #28]
 8006012:	9307      	strlt	r3, [sp, #28]
 8006014:	bfb8      	it	lt
 8006016:	9204      	strlt	r2, [sp, #16]
 8006018:	7823      	ldrb	r3, [r4, #0]
 800601a:	2b2e      	cmp	r3, #46	; 0x2e
 800601c:	d10c      	bne.n	8006038 <_svfiprintf_r+0x130>
 800601e:	7863      	ldrb	r3, [r4, #1]
 8006020:	2b2a      	cmp	r3, #42	; 0x2a
 8006022:	d135      	bne.n	8006090 <_svfiprintf_r+0x188>
 8006024:	9b03      	ldr	r3, [sp, #12]
 8006026:	3402      	adds	r4, #2
 8006028:	1d1a      	adds	r2, r3, #4
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	9203      	str	r2, [sp, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	bfb8      	it	lt
 8006032:	f04f 33ff 	movlt.w	r3, #4294967295
 8006036:	9305      	str	r3, [sp, #20]
 8006038:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80060f8 <_svfiprintf_r+0x1f0>
 800603c:	2203      	movs	r2, #3
 800603e:	4650      	mov	r0, sl
 8006040:	7821      	ldrb	r1, [r4, #0]
 8006042:	f7ff fa77 	bl	8005534 <memchr>
 8006046:	b140      	cbz	r0, 800605a <_svfiprintf_r+0x152>
 8006048:	2340      	movs	r3, #64	; 0x40
 800604a:	eba0 000a 	sub.w	r0, r0, sl
 800604e:	fa03 f000 	lsl.w	r0, r3, r0
 8006052:	9b04      	ldr	r3, [sp, #16]
 8006054:	3401      	adds	r4, #1
 8006056:	4303      	orrs	r3, r0
 8006058:	9304      	str	r3, [sp, #16]
 800605a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800605e:	2206      	movs	r2, #6
 8006060:	4826      	ldr	r0, [pc, #152]	; (80060fc <_svfiprintf_r+0x1f4>)
 8006062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006066:	f7ff fa65 	bl	8005534 <memchr>
 800606a:	2800      	cmp	r0, #0
 800606c:	d038      	beq.n	80060e0 <_svfiprintf_r+0x1d8>
 800606e:	4b24      	ldr	r3, [pc, #144]	; (8006100 <_svfiprintf_r+0x1f8>)
 8006070:	bb1b      	cbnz	r3, 80060ba <_svfiprintf_r+0x1b2>
 8006072:	9b03      	ldr	r3, [sp, #12]
 8006074:	3307      	adds	r3, #7
 8006076:	f023 0307 	bic.w	r3, r3, #7
 800607a:	3308      	adds	r3, #8
 800607c:	9303      	str	r3, [sp, #12]
 800607e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006080:	4433      	add	r3, r6
 8006082:	9309      	str	r3, [sp, #36]	; 0x24
 8006084:	e767      	b.n	8005f56 <_svfiprintf_r+0x4e>
 8006086:	460c      	mov	r4, r1
 8006088:	2001      	movs	r0, #1
 800608a:	fb0c 3202 	mla	r2, ip, r2, r3
 800608e:	e7a5      	b.n	8005fdc <_svfiprintf_r+0xd4>
 8006090:	2300      	movs	r3, #0
 8006092:	f04f 0c0a 	mov.w	ip, #10
 8006096:	4619      	mov	r1, r3
 8006098:	3401      	adds	r4, #1
 800609a:	9305      	str	r3, [sp, #20]
 800609c:	4620      	mov	r0, r4
 800609e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060a2:	3a30      	subs	r2, #48	; 0x30
 80060a4:	2a09      	cmp	r2, #9
 80060a6:	d903      	bls.n	80060b0 <_svfiprintf_r+0x1a8>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0c5      	beq.n	8006038 <_svfiprintf_r+0x130>
 80060ac:	9105      	str	r1, [sp, #20]
 80060ae:	e7c3      	b.n	8006038 <_svfiprintf_r+0x130>
 80060b0:	4604      	mov	r4, r0
 80060b2:	2301      	movs	r3, #1
 80060b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80060b8:	e7f0      	b.n	800609c <_svfiprintf_r+0x194>
 80060ba:	ab03      	add	r3, sp, #12
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	462a      	mov	r2, r5
 80060c0:	4638      	mov	r0, r7
 80060c2:	4b10      	ldr	r3, [pc, #64]	; (8006104 <_svfiprintf_r+0x1fc>)
 80060c4:	a904      	add	r1, sp, #16
 80060c6:	f7fd ffcb 	bl	8004060 <_printf_float>
 80060ca:	1c42      	adds	r2, r0, #1
 80060cc:	4606      	mov	r6, r0
 80060ce:	d1d6      	bne.n	800607e <_svfiprintf_r+0x176>
 80060d0:	89ab      	ldrh	r3, [r5, #12]
 80060d2:	065b      	lsls	r3, r3, #25
 80060d4:	f53f af2c 	bmi.w	8005f30 <_svfiprintf_r+0x28>
 80060d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060da:	b01d      	add	sp, #116	; 0x74
 80060dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e0:	ab03      	add	r3, sp, #12
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	462a      	mov	r2, r5
 80060e6:	4638      	mov	r0, r7
 80060e8:	4b06      	ldr	r3, [pc, #24]	; (8006104 <_svfiprintf_r+0x1fc>)
 80060ea:	a904      	add	r1, sp, #16
 80060ec:	f7fe fa54 	bl	8004598 <_printf_i>
 80060f0:	e7eb      	b.n	80060ca <_svfiprintf_r+0x1c2>
 80060f2:	bf00      	nop
 80060f4:	08007084 	.word	0x08007084
 80060f8:	0800708a 	.word	0x0800708a
 80060fc:	0800708e 	.word	0x0800708e
 8006100:	08004061 	.word	0x08004061
 8006104:	08005e51 	.word	0x08005e51

08006108 <_sbrk_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	2300      	movs	r3, #0
 800610c:	4d05      	ldr	r5, [pc, #20]	; (8006124 <_sbrk_r+0x1c>)
 800610e:	4604      	mov	r4, r0
 8006110:	4608      	mov	r0, r1
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	f7fb fa26 	bl	8001564 <_sbrk>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d102      	bne.n	8006122 <_sbrk_r+0x1a>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	b103      	cbz	r3, 8006122 <_sbrk_r+0x1a>
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	200002d8 	.word	0x200002d8

08006128 <__assert_func>:
 8006128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800612a:	4614      	mov	r4, r2
 800612c:	461a      	mov	r2, r3
 800612e:	4b09      	ldr	r3, [pc, #36]	; (8006154 <__assert_func+0x2c>)
 8006130:	4605      	mov	r5, r0
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68d8      	ldr	r0, [r3, #12]
 8006136:	b14c      	cbz	r4, 800614c <__assert_func+0x24>
 8006138:	4b07      	ldr	r3, [pc, #28]	; (8006158 <__assert_func+0x30>)
 800613a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800613e:	9100      	str	r1, [sp, #0]
 8006140:	462b      	mov	r3, r5
 8006142:	4906      	ldr	r1, [pc, #24]	; (800615c <__assert_func+0x34>)
 8006144:	f000 f80e 	bl	8006164 <fiprintf>
 8006148:	f000 faaa 	bl	80066a0 <abort>
 800614c:	4b04      	ldr	r3, [pc, #16]	; (8006160 <__assert_func+0x38>)
 800614e:	461c      	mov	r4, r3
 8006150:	e7f3      	b.n	800613a <__assert_func+0x12>
 8006152:	bf00      	nop
 8006154:	20000028 	.word	0x20000028
 8006158:	08007095 	.word	0x08007095
 800615c:	080070a2 	.word	0x080070a2
 8006160:	080070d0 	.word	0x080070d0

08006164 <fiprintf>:
 8006164:	b40e      	push	{r1, r2, r3}
 8006166:	b503      	push	{r0, r1, lr}
 8006168:	4601      	mov	r1, r0
 800616a:	ab03      	add	r3, sp, #12
 800616c:	4805      	ldr	r0, [pc, #20]	; (8006184 <fiprintf+0x20>)
 800616e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006172:	6800      	ldr	r0, [r0, #0]
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	f000 f895 	bl	80062a4 <_vfiprintf_r>
 800617a:	b002      	add	sp, #8
 800617c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006180:	b003      	add	sp, #12
 8006182:	4770      	bx	lr
 8006184:	20000028 	.word	0x20000028

08006188 <__ascii_mbtowc>:
 8006188:	b082      	sub	sp, #8
 800618a:	b901      	cbnz	r1, 800618e <__ascii_mbtowc+0x6>
 800618c:	a901      	add	r1, sp, #4
 800618e:	b142      	cbz	r2, 80061a2 <__ascii_mbtowc+0x1a>
 8006190:	b14b      	cbz	r3, 80061a6 <__ascii_mbtowc+0x1e>
 8006192:	7813      	ldrb	r3, [r2, #0]
 8006194:	600b      	str	r3, [r1, #0]
 8006196:	7812      	ldrb	r2, [r2, #0]
 8006198:	1e10      	subs	r0, r2, #0
 800619a:	bf18      	it	ne
 800619c:	2001      	movne	r0, #1
 800619e:	b002      	add	sp, #8
 80061a0:	4770      	bx	lr
 80061a2:	4610      	mov	r0, r2
 80061a4:	e7fb      	b.n	800619e <__ascii_mbtowc+0x16>
 80061a6:	f06f 0001 	mvn.w	r0, #1
 80061aa:	e7f8      	b.n	800619e <__ascii_mbtowc+0x16>

080061ac <memmove>:
 80061ac:	4288      	cmp	r0, r1
 80061ae:	b510      	push	{r4, lr}
 80061b0:	eb01 0402 	add.w	r4, r1, r2
 80061b4:	d902      	bls.n	80061bc <memmove+0x10>
 80061b6:	4284      	cmp	r4, r0
 80061b8:	4623      	mov	r3, r4
 80061ba:	d807      	bhi.n	80061cc <memmove+0x20>
 80061bc:	1e43      	subs	r3, r0, #1
 80061be:	42a1      	cmp	r1, r4
 80061c0:	d008      	beq.n	80061d4 <memmove+0x28>
 80061c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061ca:	e7f8      	b.n	80061be <memmove+0x12>
 80061cc:	4601      	mov	r1, r0
 80061ce:	4402      	add	r2, r0
 80061d0:	428a      	cmp	r2, r1
 80061d2:	d100      	bne.n	80061d6 <memmove+0x2a>
 80061d4:	bd10      	pop	{r4, pc}
 80061d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061de:	e7f7      	b.n	80061d0 <memmove+0x24>

080061e0 <__malloc_lock>:
 80061e0:	4801      	ldr	r0, [pc, #4]	; (80061e8 <__malloc_lock+0x8>)
 80061e2:	f000 bc19 	b.w	8006a18 <__retarget_lock_acquire_recursive>
 80061e6:	bf00      	nop
 80061e8:	200002dc 	.word	0x200002dc

080061ec <__malloc_unlock>:
 80061ec:	4801      	ldr	r0, [pc, #4]	; (80061f4 <__malloc_unlock+0x8>)
 80061ee:	f000 bc14 	b.w	8006a1a <__retarget_lock_release_recursive>
 80061f2:	bf00      	nop
 80061f4:	200002dc 	.word	0x200002dc

080061f8 <_realloc_r>:
 80061f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fc:	4680      	mov	r8, r0
 80061fe:	4614      	mov	r4, r2
 8006200:	460e      	mov	r6, r1
 8006202:	b921      	cbnz	r1, 800620e <_realloc_r+0x16>
 8006204:	4611      	mov	r1, r2
 8006206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800620a:	f7ff bdad 	b.w	8005d68 <_malloc_r>
 800620e:	b92a      	cbnz	r2, 800621c <_realloc_r+0x24>
 8006210:	f7ff fd42 	bl	8005c98 <_free_r>
 8006214:	4625      	mov	r5, r4
 8006216:	4628      	mov	r0, r5
 8006218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800621c:	f000 fc64 	bl	8006ae8 <_malloc_usable_size_r>
 8006220:	4284      	cmp	r4, r0
 8006222:	4607      	mov	r7, r0
 8006224:	d802      	bhi.n	800622c <_realloc_r+0x34>
 8006226:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800622a:	d812      	bhi.n	8006252 <_realloc_r+0x5a>
 800622c:	4621      	mov	r1, r4
 800622e:	4640      	mov	r0, r8
 8006230:	f7ff fd9a 	bl	8005d68 <_malloc_r>
 8006234:	4605      	mov	r5, r0
 8006236:	2800      	cmp	r0, #0
 8006238:	d0ed      	beq.n	8006216 <_realloc_r+0x1e>
 800623a:	42bc      	cmp	r4, r7
 800623c:	4622      	mov	r2, r4
 800623e:	4631      	mov	r1, r6
 8006240:	bf28      	it	cs
 8006242:	463a      	movcs	r2, r7
 8006244:	f7ff f984 	bl	8005550 <memcpy>
 8006248:	4631      	mov	r1, r6
 800624a:	4640      	mov	r0, r8
 800624c:	f7ff fd24 	bl	8005c98 <_free_r>
 8006250:	e7e1      	b.n	8006216 <_realloc_r+0x1e>
 8006252:	4635      	mov	r5, r6
 8006254:	e7df      	b.n	8006216 <_realloc_r+0x1e>

08006256 <__sfputc_r>:
 8006256:	6893      	ldr	r3, [r2, #8]
 8006258:	b410      	push	{r4}
 800625a:	3b01      	subs	r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	6093      	str	r3, [r2, #8]
 8006260:	da07      	bge.n	8006272 <__sfputc_r+0x1c>
 8006262:	6994      	ldr	r4, [r2, #24]
 8006264:	42a3      	cmp	r3, r4
 8006266:	db01      	blt.n	800626c <__sfputc_r+0x16>
 8006268:	290a      	cmp	r1, #10
 800626a:	d102      	bne.n	8006272 <__sfputc_r+0x1c>
 800626c:	bc10      	pop	{r4}
 800626e:	f000 b949 	b.w	8006504 <__swbuf_r>
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	1c58      	adds	r0, r3, #1
 8006276:	6010      	str	r0, [r2, #0]
 8006278:	7019      	strb	r1, [r3, #0]
 800627a:	4608      	mov	r0, r1
 800627c:	bc10      	pop	{r4}
 800627e:	4770      	bx	lr

08006280 <__sfputs_r>:
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006282:	4606      	mov	r6, r0
 8006284:	460f      	mov	r7, r1
 8006286:	4614      	mov	r4, r2
 8006288:	18d5      	adds	r5, r2, r3
 800628a:	42ac      	cmp	r4, r5
 800628c:	d101      	bne.n	8006292 <__sfputs_r+0x12>
 800628e:	2000      	movs	r0, #0
 8006290:	e007      	b.n	80062a2 <__sfputs_r+0x22>
 8006292:	463a      	mov	r2, r7
 8006294:	4630      	mov	r0, r6
 8006296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800629a:	f7ff ffdc 	bl	8006256 <__sfputc_r>
 800629e:	1c43      	adds	r3, r0, #1
 80062a0:	d1f3      	bne.n	800628a <__sfputs_r+0xa>
 80062a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062a4 <_vfiprintf_r>:
 80062a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	460d      	mov	r5, r1
 80062aa:	4614      	mov	r4, r2
 80062ac:	4698      	mov	r8, r3
 80062ae:	4606      	mov	r6, r0
 80062b0:	b09d      	sub	sp, #116	; 0x74
 80062b2:	b118      	cbz	r0, 80062bc <_vfiprintf_r+0x18>
 80062b4:	6983      	ldr	r3, [r0, #24]
 80062b6:	b90b      	cbnz	r3, 80062bc <_vfiprintf_r+0x18>
 80062b8:	f000 fb10 	bl	80068dc <__sinit>
 80062bc:	4b89      	ldr	r3, [pc, #548]	; (80064e4 <_vfiprintf_r+0x240>)
 80062be:	429d      	cmp	r5, r3
 80062c0:	d11b      	bne.n	80062fa <_vfiprintf_r+0x56>
 80062c2:	6875      	ldr	r5, [r6, #4]
 80062c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062c6:	07d9      	lsls	r1, r3, #31
 80062c8:	d405      	bmi.n	80062d6 <_vfiprintf_r+0x32>
 80062ca:	89ab      	ldrh	r3, [r5, #12]
 80062cc:	059a      	lsls	r2, r3, #22
 80062ce:	d402      	bmi.n	80062d6 <_vfiprintf_r+0x32>
 80062d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062d2:	f000 fba1 	bl	8006a18 <__retarget_lock_acquire_recursive>
 80062d6:	89ab      	ldrh	r3, [r5, #12]
 80062d8:	071b      	lsls	r3, r3, #28
 80062da:	d501      	bpl.n	80062e0 <_vfiprintf_r+0x3c>
 80062dc:	692b      	ldr	r3, [r5, #16]
 80062de:	b9eb      	cbnz	r3, 800631c <_vfiprintf_r+0x78>
 80062e0:	4629      	mov	r1, r5
 80062e2:	4630      	mov	r0, r6
 80062e4:	f000 f96e 	bl	80065c4 <__swsetup_r>
 80062e8:	b1c0      	cbz	r0, 800631c <_vfiprintf_r+0x78>
 80062ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062ec:	07dc      	lsls	r4, r3, #31
 80062ee:	d50e      	bpl.n	800630e <_vfiprintf_r+0x6a>
 80062f0:	f04f 30ff 	mov.w	r0, #4294967295
 80062f4:	b01d      	add	sp, #116	; 0x74
 80062f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fa:	4b7b      	ldr	r3, [pc, #492]	; (80064e8 <_vfiprintf_r+0x244>)
 80062fc:	429d      	cmp	r5, r3
 80062fe:	d101      	bne.n	8006304 <_vfiprintf_r+0x60>
 8006300:	68b5      	ldr	r5, [r6, #8]
 8006302:	e7df      	b.n	80062c4 <_vfiprintf_r+0x20>
 8006304:	4b79      	ldr	r3, [pc, #484]	; (80064ec <_vfiprintf_r+0x248>)
 8006306:	429d      	cmp	r5, r3
 8006308:	bf08      	it	eq
 800630a:	68f5      	ldreq	r5, [r6, #12]
 800630c:	e7da      	b.n	80062c4 <_vfiprintf_r+0x20>
 800630e:	89ab      	ldrh	r3, [r5, #12]
 8006310:	0598      	lsls	r0, r3, #22
 8006312:	d4ed      	bmi.n	80062f0 <_vfiprintf_r+0x4c>
 8006314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006316:	f000 fb80 	bl	8006a1a <__retarget_lock_release_recursive>
 800631a:	e7e9      	b.n	80062f0 <_vfiprintf_r+0x4c>
 800631c:	2300      	movs	r3, #0
 800631e:	9309      	str	r3, [sp, #36]	; 0x24
 8006320:	2320      	movs	r3, #32
 8006322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006326:	2330      	movs	r3, #48	; 0x30
 8006328:	f04f 0901 	mov.w	r9, #1
 800632c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006330:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80064f0 <_vfiprintf_r+0x24c>
 8006334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006338:	4623      	mov	r3, r4
 800633a:	469a      	mov	sl, r3
 800633c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006340:	b10a      	cbz	r2, 8006346 <_vfiprintf_r+0xa2>
 8006342:	2a25      	cmp	r2, #37	; 0x25
 8006344:	d1f9      	bne.n	800633a <_vfiprintf_r+0x96>
 8006346:	ebba 0b04 	subs.w	fp, sl, r4
 800634a:	d00b      	beq.n	8006364 <_vfiprintf_r+0xc0>
 800634c:	465b      	mov	r3, fp
 800634e:	4622      	mov	r2, r4
 8006350:	4629      	mov	r1, r5
 8006352:	4630      	mov	r0, r6
 8006354:	f7ff ff94 	bl	8006280 <__sfputs_r>
 8006358:	3001      	adds	r0, #1
 800635a:	f000 80aa 	beq.w	80064b2 <_vfiprintf_r+0x20e>
 800635e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006360:	445a      	add	r2, fp
 8006362:	9209      	str	r2, [sp, #36]	; 0x24
 8006364:	f89a 3000 	ldrb.w	r3, [sl]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 80a2 	beq.w	80064b2 <_vfiprintf_r+0x20e>
 800636e:	2300      	movs	r3, #0
 8006370:	f04f 32ff 	mov.w	r2, #4294967295
 8006374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006378:	f10a 0a01 	add.w	sl, sl, #1
 800637c:	9304      	str	r3, [sp, #16]
 800637e:	9307      	str	r3, [sp, #28]
 8006380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006384:	931a      	str	r3, [sp, #104]	; 0x68
 8006386:	4654      	mov	r4, sl
 8006388:	2205      	movs	r2, #5
 800638a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638e:	4858      	ldr	r0, [pc, #352]	; (80064f0 <_vfiprintf_r+0x24c>)
 8006390:	f7ff f8d0 	bl	8005534 <memchr>
 8006394:	9a04      	ldr	r2, [sp, #16]
 8006396:	b9d8      	cbnz	r0, 80063d0 <_vfiprintf_r+0x12c>
 8006398:	06d1      	lsls	r1, r2, #27
 800639a:	bf44      	itt	mi
 800639c:	2320      	movmi	r3, #32
 800639e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063a2:	0713      	lsls	r3, r2, #28
 80063a4:	bf44      	itt	mi
 80063a6:	232b      	movmi	r3, #43	; 0x2b
 80063a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ac:	f89a 3000 	ldrb.w	r3, [sl]
 80063b0:	2b2a      	cmp	r3, #42	; 0x2a
 80063b2:	d015      	beq.n	80063e0 <_vfiprintf_r+0x13c>
 80063b4:	4654      	mov	r4, sl
 80063b6:	2000      	movs	r0, #0
 80063b8:	f04f 0c0a 	mov.w	ip, #10
 80063bc:	9a07      	ldr	r2, [sp, #28]
 80063be:	4621      	mov	r1, r4
 80063c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063c4:	3b30      	subs	r3, #48	; 0x30
 80063c6:	2b09      	cmp	r3, #9
 80063c8:	d94e      	bls.n	8006468 <_vfiprintf_r+0x1c4>
 80063ca:	b1b0      	cbz	r0, 80063fa <_vfiprintf_r+0x156>
 80063cc:	9207      	str	r2, [sp, #28]
 80063ce:	e014      	b.n	80063fa <_vfiprintf_r+0x156>
 80063d0:	eba0 0308 	sub.w	r3, r0, r8
 80063d4:	fa09 f303 	lsl.w	r3, r9, r3
 80063d8:	4313      	orrs	r3, r2
 80063da:	46a2      	mov	sl, r4
 80063dc:	9304      	str	r3, [sp, #16]
 80063de:	e7d2      	b.n	8006386 <_vfiprintf_r+0xe2>
 80063e0:	9b03      	ldr	r3, [sp, #12]
 80063e2:	1d19      	adds	r1, r3, #4
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	9103      	str	r1, [sp, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bfbb      	ittet	lt
 80063ec:	425b      	neglt	r3, r3
 80063ee:	f042 0202 	orrlt.w	r2, r2, #2
 80063f2:	9307      	strge	r3, [sp, #28]
 80063f4:	9307      	strlt	r3, [sp, #28]
 80063f6:	bfb8      	it	lt
 80063f8:	9204      	strlt	r2, [sp, #16]
 80063fa:	7823      	ldrb	r3, [r4, #0]
 80063fc:	2b2e      	cmp	r3, #46	; 0x2e
 80063fe:	d10c      	bne.n	800641a <_vfiprintf_r+0x176>
 8006400:	7863      	ldrb	r3, [r4, #1]
 8006402:	2b2a      	cmp	r3, #42	; 0x2a
 8006404:	d135      	bne.n	8006472 <_vfiprintf_r+0x1ce>
 8006406:	9b03      	ldr	r3, [sp, #12]
 8006408:	3402      	adds	r4, #2
 800640a:	1d1a      	adds	r2, r3, #4
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	9203      	str	r2, [sp, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	bfb8      	it	lt
 8006414:	f04f 33ff 	movlt.w	r3, #4294967295
 8006418:	9305      	str	r3, [sp, #20]
 800641a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80064f4 <_vfiprintf_r+0x250>
 800641e:	2203      	movs	r2, #3
 8006420:	4650      	mov	r0, sl
 8006422:	7821      	ldrb	r1, [r4, #0]
 8006424:	f7ff f886 	bl	8005534 <memchr>
 8006428:	b140      	cbz	r0, 800643c <_vfiprintf_r+0x198>
 800642a:	2340      	movs	r3, #64	; 0x40
 800642c:	eba0 000a 	sub.w	r0, r0, sl
 8006430:	fa03 f000 	lsl.w	r0, r3, r0
 8006434:	9b04      	ldr	r3, [sp, #16]
 8006436:	3401      	adds	r4, #1
 8006438:	4303      	orrs	r3, r0
 800643a:	9304      	str	r3, [sp, #16]
 800643c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006440:	2206      	movs	r2, #6
 8006442:	482d      	ldr	r0, [pc, #180]	; (80064f8 <_vfiprintf_r+0x254>)
 8006444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006448:	f7ff f874 	bl	8005534 <memchr>
 800644c:	2800      	cmp	r0, #0
 800644e:	d03f      	beq.n	80064d0 <_vfiprintf_r+0x22c>
 8006450:	4b2a      	ldr	r3, [pc, #168]	; (80064fc <_vfiprintf_r+0x258>)
 8006452:	bb1b      	cbnz	r3, 800649c <_vfiprintf_r+0x1f8>
 8006454:	9b03      	ldr	r3, [sp, #12]
 8006456:	3307      	adds	r3, #7
 8006458:	f023 0307 	bic.w	r3, r3, #7
 800645c:	3308      	adds	r3, #8
 800645e:	9303      	str	r3, [sp, #12]
 8006460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006462:	443b      	add	r3, r7
 8006464:	9309      	str	r3, [sp, #36]	; 0x24
 8006466:	e767      	b.n	8006338 <_vfiprintf_r+0x94>
 8006468:	460c      	mov	r4, r1
 800646a:	2001      	movs	r0, #1
 800646c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006470:	e7a5      	b.n	80063be <_vfiprintf_r+0x11a>
 8006472:	2300      	movs	r3, #0
 8006474:	f04f 0c0a 	mov.w	ip, #10
 8006478:	4619      	mov	r1, r3
 800647a:	3401      	adds	r4, #1
 800647c:	9305      	str	r3, [sp, #20]
 800647e:	4620      	mov	r0, r4
 8006480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006484:	3a30      	subs	r2, #48	; 0x30
 8006486:	2a09      	cmp	r2, #9
 8006488:	d903      	bls.n	8006492 <_vfiprintf_r+0x1ee>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0c5      	beq.n	800641a <_vfiprintf_r+0x176>
 800648e:	9105      	str	r1, [sp, #20]
 8006490:	e7c3      	b.n	800641a <_vfiprintf_r+0x176>
 8006492:	4604      	mov	r4, r0
 8006494:	2301      	movs	r3, #1
 8006496:	fb0c 2101 	mla	r1, ip, r1, r2
 800649a:	e7f0      	b.n	800647e <_vfiprintf_r+0x1da>
 800649c:	ab03      	add	r3, sp, #12
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	462a      	mov	r2, r5
 80064a2:	4630      	mov	r0, r6
 80064a4:	4b16      	ldr	r3, [pc, #88]	; (8006500 <_vfiprintf_r+0x25c>)
 80064a6:	a904      	add	r1, sp, #16
 80064a8:	f7fd fdda 	bl	8004060 <_printf_float>
 80064ac:	4607      	mov	r7, r0
 80064ae:	1c78      	adds	r0, r7, #1
 80064b0:	d1d6      	bne.n	8006460 <_vfiprintf_r+0x1bc>
 80064b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064b4:	07d9      	lsls	r1, r3, #31
 80064b6:	d405      	bmi.n	80064c4 <_vfiprintf_r+0x220>
 80064b8:	89ab      	ldrh	r3, [r5, #12]
 80064ba:	059a      	lsls	r2, r3, #22
 80064bc:	d402      	bmi.n	80064c4 <_vfiprintf_r+0x220>
 80064be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064c0:	f000 faab 	bl	8006a1a <__retarget_lock_release_recursive>
 80064c4:	89ab      	ldrh	r3, [r5, #12]
 80064c6:	065b      	lsls	r3, r3, #25
 80064c8:	f53f af12 	bmi.w	80062f0 <_vfiprintf_r+0x4c>
 80064cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ce:	e711      	b.n	80062f4 <_vfiprintf_r+0x50>
 80064d0:	ab03      	add	r3, sp, #12
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	462a      	mov	r2, r5
 80064d6:	4630      	mov	r0, r6
 80064d8:	4b09      	ldr	r3, [pc, #36]	; (8006500 <_vfiprintf_r+0x25c>)
 80064da:	a904      	add	r1, sp, #16
 80064dc:	f7fe f85c 	bl	8004598 <_printf_i>
 80064e0:	e7e4      	b.n	80064ac <_vfiprintf_r+0x208>
 80064e2:	bf00      	nop
 80064e4:	080071fc 	.word	0x080071fc
 80064e8:	0800721c 	.word	0x0800721c
 80064ec:	080071dc 	.word	0x080071dc
 80064f0:	08007084 	.word	0x08007084
 80064f4:	0800708a 	.word	0x0800708a
 80064f8:	0800708e 	.word	0x0800708e
 80064fc:	08004061 	.word	0x08004061
 8006500:	08006281 	.word	0x08006281

08006504 <__swbuf_r>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	460e      	mov	r6, r1
 8006508:	4614      	mov	r4, r2
 800650a:	4605      	mov	r5, r0
 800650c:	b118      	cbz	r0, 8006516 <__swbuf_r+0x12>
 800650e:	6983      	ldr	r3, [r0, #24]
 8006510:	b90b      	cbnz	r3, 8006516 <__swbuf_r+0x12>
 8006512:	f000 f9e3 	bl	80068dc <__sinit>
 8006516:	4b21      	ldr	r3, [pc, #132]	; (800659c <__swbuf_r+0x98>)
 8006518:	429c      	cmp	r4, r3
 800651a:	d12b      	bne.n	8006574 <__swbuf_r+0x70>
 800651c:	686c      	ldr	r4, [r5, #4]
 800651e:	69a3      	ldr	r3, [r4, #24]
 8006520:	60a3      	str	r3, [r4, #8]
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	071a      	lsls	r2, r3, #28
 8006526:	d52f      	bpl.n	8006588 <__swbuf_r+0x84>
 8006528:	6923      	ldr	r3, [r4, #16]
 800652a:	b36b      	cbz	r3, 8006588 <__swbuf_r+0x84>
 800652c:	6923      	ldr	r3, [r4, #16]
 800652e:	6820      	ldr	r0, [r4, #0]
 8006530:	b2f6      	uxtb	r6, r6
 8006532:	1ac0      	subs	r0, r0, r3
 8006534:	6963      	ldr	r3, [r4, #20]
 8006536:	4637      	mov	r7, r6
 8006538:	4283      	cmp	r3, r0
 800653a:	dc04      	bgt.n	8006546 <__swbuf_r+0x42>
 800653c:	4621      	mov	r1, r4
 800653e:	4628      	mov	r0, r5
 8006540:	f000 f938 	bl	80067b4 <_fflush_r>
 8006544:	bb30      	cbnz	r0, 8006594 <__swbuf_r+0x90>
 8006546:	68a3      	ldr	r3, [r4, #8]
 8006548:	3001      	adds	r0, #1
 800654a:	3b01      	subs	r3, #1
 800654c:	60a3      	str	r3, [r4, #8]
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	6022      	str	r2, [r4, #0]
 8006554:	701e      	strb	r6, [r3, #0]
 8006556:	6963      	ldr	r3, [r4, #20]
 8006558:	4283      	cmp	r3, r0
 800655a:	d004      	beq.n	8006566 <__swbuf_r+0x62>
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	07db      	lsls	r3, r3, #31
 8006560:	d506      	bpl.n	8006570 <__swbuf_r+0x6c>
 8006562:	2e0a      	cmp	r6, #10
 8006564:	d104      	bne.n	8006570 <__swbuf_r+0x6c>
 8006566:	4621      	mov	r1, r4
 8006568:	4628      	mov	r0, r5
 800656a:	f000 f923 	bl	80067b4 <_fflush_r>
 800656e:	b988      	cbnz	r0, 8006594 <__swbuf_r+0x90>
 8006570:	4638      	mov	r0, r7
 8006572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006574:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <__swbuf_r+0x9c>)
 8006576:	429c      	cmp	r4, r3
 8006578:	d101      	bne.n	800657e <__swbuf_r+0x7a>
 800657a:	68ac      	ldr	r4, [r5, #8]
 800657c:	e7cf      	b.n	800651e <__swbuf_r+0x1a>
 800657e:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <__swbuf_r+0xa0>)
 8006580:	429c      	cmp	r4, r3
 8006582:	bf08      	it	eq
 8006584:	68ec      	ldreq	r4, [r5, #12]
 8006586:	e7ca      	b.n	800651e <__swbuf_r+0x1a>
 8006588:	4621      	mov	r1, r4
 800658a:	4628      	mov	r0, r5
 800658c:	f000 f81a 	bl	80065c4 <__swsetup_r>
 8006590:	2800      	cmp	r0, #0
 8006592:	d0cb      	beq.n	800652c <__swbuf_r+0x28>
 8006594:	f04f 37ff 	mov.w	r7, #4294967295
 8006598:	e7ea      	b.n	8006570 <__swbuf_r+0x6c>
 800659a:	bf00      	nop
 800659c:	080071fc 	.word	0x080071fc
 80065a0:	0800721c 	.word	0x0800721c
 80065a4:	080071dc 	.word	0x080071dc

080065a8 <__ascii_wctomb>:
 80065a8:	4603      	mov	r3, r0
 80065aa:	4608      	mov	r0, r1
 80065ac:	b141      	cbz	r1, 80065c0 <__ascii_wctomb+0x18>
 80065ae:	2aff      	cmp	r2, #255	; 0xff
 80065b0:	d904      	bls.n	80065bc <__ascii_wctomb+0x14>
 80065b2:	228a      	movs	r2, #138	; 0x8a
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	4770      	bx	lr
 80065bc:	2001      	movs	r0, #1
 80065be:	700a      	strb	r2, [r1, #0]
 80065c0:	4770      	bx	lr
	...

080065c4 <__swsetup_r>:
 80065c4:	4b32      	ldr	r3, [pc, #200]	; (8006690 <__swsetup_r+0xcc>)
 80065c6:	b570      	push	{r4, r5, r6, lr}
 80065c8:	681d      	ldr	r5, [r3, #0]
 80065ca:	4606      	mov	r6, r0
 80065cc:	460c      	mov	r4, r1
 80065ce:	b125      	cbz	r5, 80065da <__swsetup_r+0x16>
 80065d0:	69ab      	ldr	r3, [r5, #24]
 80065d2:	b913      	cbnz	r3, 80065da <__swsetup_r+0x16>
 80065d4:	4628      	mov	r0, r5
 80065d6:	f000 f981 	bl	80068dc <__sinit>
 80065da:	4b2e      	ldr	r3, [pc, #184]	; (8006694 <__swsetup_r+0xd0>)
 80065dc:	429c      	cmp	r4, r3
 80065de:	d10f      	bne.n	8006600 <__swsetup_r+0x3c>
 80065e0:	686c      	ldr	r4, [r5, #4]
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065e8:	0719      	lsls	r1, r3, #28
 80065ea:	d42c      	bmi.n	8006646 <__swsetup_r+0x82>
 80065ec:	06dd      	lsls	r5, r3, #27
 80065ee:	d411      	bmi.n	8006614 <__swsetup_r+0x50>
 80065f0:	2309      	movs	r3, #9
 80065f2:	6033      	str	r3, [r6, #0]
 80065f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	81a3      	strh	r3, [r4, #12]
 80065fe:	e03e      	b.n	800667e <__swsetup_r+0xba>
 8006600:	4b25      	ldr	r3, [pc, #148]	; (8006698 <__swsetup_r+0xd4>)
 8006602:	429c      	cmp	r4, r3
 8006604:	d101      	bne.n	800660a <__swsetup_r+0x46>
 8006606:	68ac      	ldr	r4, [r5, #8]
 8006608:	e7eb      	b.n	80065e2 <__swsetup_r+0x1e>
 800660a:	4b24      	ldr	r3, [pc, #144]	; (800669c <__swsetup_r+0xd8>)
 800660c:	429c      	cmp	r4, r3
 800660e:	bf08      	it	eq
 8006610:	68ec      	ldreq	r4, [r5, #12]
 8006612:	e7e6      	b.n	80065e2 <__swsetup_r+0x1e>
 8006614:	0758      	lsls	r0, r3, #29
 8006616:	d512      	bpl.n	800663e <__swsetup_r+0x7a>
 8006618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800661a:	b141      	cbz	r1, 800662e <__swsetup_r+0x6a>
 800661c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006620:	4299      	cmp	r1, r3
 8006622:	d002      	beq.n	800662a <__swsetup_r+0x66>
 8006624:	4630      	mov	r0, r6
 8006626:	f7ff fb37 	bl	8005c98 <_free_r>
 800662a:	2300      	movs	r3, #0
 800662c:	6363      	str	r3, [r4, #52]	; 0x34
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006634:	81a3      	strh	r3, [r4, #12]
 8006636:	2300      	movs	r3, #0
 8006638:	6063      	str	r3, [r4, #4]
 800663a:	6923      	ldr	r3, [r4, #16]
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	f043 0308 	orr.w	r3, r3, #8
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	6923      	ldr	r3, [r4, #16]
 8006648:	b94b      	cbnz	r3, 800665e <__swsetup_r+0x9a>
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006654:	d003      	beq.n	800665e <__swsetup_r+0x9a>
 8006656:	4621      	mov	r1, r4
 8006658:	4630      	mov	r0, r6
 800665a:	f000 fa05 	bl	8006a68 <__smakebuf_r>
 800665e:	89a0      	ldrh	r0, [r4, #12]
 8006660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006664:	f010 0301 	ands.w	r3, r0, #1
 8006668:	d00a      	beq.n	8006680 <__swsetup_r+0xbc>
 800666a:	2300      	movs	r3, #0
 800666c:	60a3      	str	r3, [r4, #8]
 800666e:	6963      	ldr	r3, [r4, #20]
 8006670:	425b      	negs	r3, r3
 8006672:	61a3      	str	r3, [r4, #24]
 8006674:	6923      	ldr	r3, [r4, #16]
 8006676:	b943      	cbnz	r3, 800668a <__swsetup_r+0xc6>
 8006678:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800667c:	d1ba      	bne.n	80065f4 <__swsetup_r+0x30>
 800667e:	bd70      	pop	{r4, r5, r6, pc}
 8006680:	0781      	lsls	r1, r0, #30
 8006682:	bf58      	it	pl
 8006684:	6963      	ldrpl	r3, [r4, #20]
 8006686:	60a3      	str	r3, [r4, #8]
 8006688:	e7f4      	b.n	8006674 <__swsetup_r+0xb0>
 800668a:	2000      	movs	r0, #0
 800668c:	e7f7      	b.n	800667e <__swsetup_r+0xba>
 800668e:	bf00      	nop
 8006690:	20000028 	.word	0x20000028
 8006694:	080071fc 	.word	0x080071fc
 8006698:	0800721c 	.word	0x0800721c
 800669c:	080071dc 	.word	0x080071dc

080066a0 <abort>:
 80066a0:	2006      	movs	r0, #6
 80066a2:	b508      	push	{r3, lr}
 80066a4:	f000 fa50 	bl	8006b48 <raise>
 80066a8:	2001      	movs	r0, #1
 80066aa:	f7fa fee7 	bl	800147c <_exit>
	...

080066b0 <__sflush_r>:
 80066b0:	898a      	ldrh	r2, [r1, #12]
 80066b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b4:	4605      	mov	r5, r0
 80066b6:	0710      	lsls	r0, r2, #28
 80066b8:	460c      	mov	r4, r1
 80066ba:	d457      	bmi.n	800676c <__sflush_r+0xbc>
 80066bc:	684b      	ldr	r3, [r1, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	dc04      	bgt.n	80066cc <__sflush_r+0x1c>
 80066c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	dc01      	bgt.n	80066cc <__sflush_r+0x1c>
 80066c8:	2000      	movs	r0, #0
 80066ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066ce:	2e00      	cmp	r6, #0
 80066d0:	d0fa      	beq.n	80066c8 <__sflush_r+0x18>
 80066d2:	2300      	movs	r3, #0
 80066d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066d8:	682f      	ldr	r7, [r5, #0]
 80066da:	602b      	str	r3, [r5, #0]
 80066dc:	d032      	beq.n	8006744 <__sflush_r+0x94>
 80066de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	075a      	lsls	r2, r3, #29
 80066e4:	d505      	bpl.n	80066f2 <__sflush_r+0x42>
 80066e6:	6863      	ldr	r3, [r4, #4]
 80066e8:	1ac0      	subs	r0, r0, r3
 80066ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066ec:	b10b      	cbz	r3, 80066f2 <__sflush_r+0x42>
 80066ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066f0:	1ac0      	subs	r0, r0, r3
 80066f2:	2300      	movs	r3, #0
 80066f4:	4602      	mov	r2, r0
 80066f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066f8:	4628      	mov	r0, r5
 80066fa:	6a21      	ldr	r1, [r4, #32]
 80066fc:	47b0      	blx	r6
 80066fe:	1c43      	adds	r3, r0, #1
 8006700:	89a3      	ldrh	r3, [r4, #12]
 8006702:	d106      	bne.n	8006712 <__sflush_r+0x62>
 8006704:	6829      	ldr	r1, [r5, #0]
 8006706:	291d      	cmp	r1, #29
 8006708:	d82c      	bhi.n	8006764 <__sflush_r+0xb4>
 800670a:	4a29      	ldr	r2, [pc, #164]	; (80067b0 <__sflush_r+0x100>)
 800670c:	40ca      	lsrs	r2, r1
 800670e:	07d6      	lsls	r6, r2, #31
 8006710:	d528      	bpl.n	8006764 <__sflush_r+0xb4>
 8006712:	2200      	movs	r2, #0
 8006714:	6062      	str	r2, [r4, #4]
 8006716:	6922      	ldr	r2, [r4, #16]
 8006718:	04d9      	lsls	r1, r3, #19
 800671a:	6022      	str	r2, [r4, #0]
 800671c:	d504      	bpl.n	8006728 <__sflush_r+0x78>
 800671e:	1c42      	adds	r2, r0, #1
 8006720:	d101      	bne.n	8006726 <__sflush_r+0x76>
 8006722:	682b      	ldr	r3, [r5, #0]
 8006724:	b903      	cbnz	r3, 8006728 <__sflush_r+0x78>
 8006726:	6560      	str	r0, [r4, #84]	; 0x54
 8006728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800672a:	602f      	str	r7, [r5, #0]
 800672c:	2900      	cmp	r1, #0
 800672e:	d0cb      	beq.n	80066c8 <__sflush_r+0x18>
 8006730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006734:	4299      	cmp	r1, r3
 8006736:	d002      	beq.n	800673e <__sflush_r+0x8e>
 8006738:	4628      	mov	r0, r5
 800673a:	f7ff faad 	bl	8005c98 <_free_r>
 800673e:	2000      	movs	r0, #0
 8006740:	6360      	str	r0, [r4, #52]	; 0x34
 8006742:	e7c2      	b.n	80066ca <__sflush_r+0x1a>
 8006744:	6a21      	ldr	r1, [r4, #32]
 8006746:	2301      	movs	r3, #1
 8006748:	4628      	mov	r0, r5
 800674a:	47b0      	blx	r6
 800674c:	1c41      	adds	r1, r0, #1
 800674e:	d1c7      	bne.n	80066e0 <__sflush_r+0x30>
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0c4      	beq.n	80066e0 <__sflush_r+0x30>
 8006756:	2b1d      	cmp	r3, #29
 8006758:	d001      	beq.n	800675e <__sflush_r+0xae>
 800675a:	2b16      	cmp	r3, #22
 800675c:	d101      	bne.n	8006762 <__sflush_r+0xb2>
 800675e:	602f      	str	r7, [r5, #0]
 8006760:	e7b2      	b.n	80066c8 <__sflush_r+0x18>
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006768:	81a3      	strh	r3, [r4, #12]
 800676a:	e7ae      	b.n	80066ca <__sflush_r+0x1a>
 800676c:	690f      	ldr	r7, [r1, #16]
 800676e:	2f00      	cmp	r7, #0
 8006770:	d0aa      	beq.n	80066c8 <__sflush_r+0x18>
 8006772:	0793      	lsls	r3, r2, #30
 8006774:	bf18      	it	ne
 8006776:	2300      	movne	r3, #0
 8006778:	680e      	ldr	r6, [r1, #0]
 800677a:	bf08      	it	eq
 800677c:	694b      	ldreq	r3, [r1, #20]
 800677e:	1bf6      	subs	r6, r6, r7
 8006780:	600f      	str	r7, [r1, #0]
 8006782:	608b      	str	r3, [r1, #8]
 8006784:	2e00      	cmp	r6, #0
 8006786:	dd9f      	ble.n	80066c8 <__sflush_r+0x18>
 8006788:	4633      	mov	r3, r6
 800678a:	463a      	mov	r2, r7
 800678c:	4628      	mov	r0, r5
 800678e:	6a21      	ldr	r1, [r4, #32]
 8006790:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006794:	47e0      	blx	ip
 8006796:	2800      	cmp	r0, #0
 8006798:	dc06      	bgt.n	80067a8 <__sflush_r+0xf8>
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	f04f 30ff 	mov.w	r0, #4294967295
 80067a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	e790      	b.n	80066ca <__sflush_r+0x1a>
 80067a8:	4407      	add	r7, r0
 80067aa:	1a36      	subs	r6, r6, r0
 80067ac:	e7ea      	b.n	8006784 <__sflush_r+0xd4>
 80067ae:	bf00      	nop
 80067b0:	20400001 	.word	0x20400001

080067b4 <_fflush_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	690b      	ldr	r3, [r1, #16]
 80067b8:	4605      	mov	r5, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	b913      	cbnz	r3, 80067c4 <_fflush_r+0x10>
 80067be:	2500      	movs	r5, #0
 80067c0:	4628      	mov	r0, r5
 80067c2:	bd38      	pop	{r3, r4, r5, pc}
 80067c4:	b118      	cbz	r0, 80067ce <_fflush_r+0x1a>
 80067c6:	6983      	ldr	r3, [r0, #24]
 80067c8:	b90b      	cbnz	r3, 80067ce <_fflush_r+0x1a>
 80067ca:	f000 f887 	bl	80068dc <__sinit>
 80067ce:	4b14      	ldr	r3, [pc, #80]	; (8006820 <_fflush_r+0x6c>)
 80067d0:	429c      	cmp	r4, r3
 80067d2:	d11b      	bne.n	800680c <_fflush_r+0x58>
 80067d4:	686c      	ldr	r4, [r5, #4]
 80067d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0ef      	beq.n	80067be <_fflush_r+0xa>
 80067de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067e0:	07d0      	lsls	r0, r2, #31
 80067e2:	d404      	bmi.n	80067ee <_fflush_r+0x3a>
 80067e4:	0599      	lsls	r1, r3, #22
 80067e6:	d402      	bmi.n	80067ee <_fflush_r+0x3a>
 80067e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ea:	f000 f915 	bl	8006a18 <__retarget_lock_acquire_recursive>
 80067ee:	4628      	mov	r0, r5
 80067f0:	4621      	mov	r1, r4
 80067f2:	f7ff ff5d 	bl	80066b0 <__sflush_r>
 80067f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067f8:	4605      	mov	r5, r0
 80067fa:	07da      	lsls	r2, r3, #31
 80067fc:	d4e0      	bmi.n	80067c0 <_fflush_r+0xc>
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	059b      	lsls	r3, r3, #22
 8006802:	d4dd      	bmi.n	80067c0 <_fflush_r+0xc>
 8006804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006806:	f000 f908 	bl	8006a1a <__retarget_lock_release_recursive>
 800680a:	e7d9      	b.n	80067c0 <_fflush_r+0xc>
 800680c:	4b05      	ldr	r3, [pc, #20]	; (8006824 <_fflush_r+0x70>)
 800680e:	429c      	cmp	r4, r3
 8006810:	d101      	bne.n	8006816 <_fflush_r+0x62>
 8006812:	68ac      	ldr	r4, [r5, #8]
 8006814:	e7df      	b.n	80067d6 <_fflush_r+0x22>
 8006816:	4b04      	ldr	r3, [pc, #16]	; (8006828 <_fflush_r+0x74>)
 8006818:	429c      	cmp	r4, r3
 800681a:	bf08      	it	eq
 800681c:	68ec      	ldreq	r4, [r5, #12]
 800681e:	e7da      	b.n	80067d6 <_fflush_r+0x22>
 8006820:	080071fc 	.word	0x080071fc
 8006824:	0800721c 	.word	0x0800721c
 8006828:	080071dc 	.word	0x080071dc

0800682c <std>:
 800682c:	2300      	movs	r3, #0
 800682e:	b510      	push	{r4, lr}
 8006830:	4604      	mov	r4, r0
 8006832:	e9c0 3300 	strd	r3, r3, [r0]
 8006836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800683a:	6083      	str	r3, [r0, #8]
 800683c:	8181      	strh	r1, [r0, #12]
 800683e:	6643      	str	r3, [r0, #100]	; 0x64
 8006840:	81c2      	strh	r2, [r0, #14]
 8006842:	6183      	str	r3, [r0, #24]
 8006844:	4619      	mov	r1, r3
 8006846:	2208      	movs	r2, #8
 8006848:	305c      	adds	r0, #92	; 0x5c
 800684a:	f7fd fb63 	bl	8003f14 <memset>
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <std+0x38>)
 8006850:	6224      	str	r4, [r4, #32]
 8006852:	6263      	str	r3, [r4, #36]	; 0x24
 8006854:	4b04      	ldr	r3, [pc, #16]	; (8006868 <std+0x3c>)
 8006856:	62a3      	str	r3, [r4, #40]	; 0x28
 8006858:	4b04      	ldr	r3, [pc, #16]	; (800686c <std+0x40>)
 800685a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800685c:	4b04      	ldr	r3, [pc, #16]	; (8006870 <std+0x44>)
 800685e:	6323      	str	r3, [r4, #48]	; 0x30
 8006860:	bd10      	pop	{r4, pc}
 8006862:	bf00      	nop
 8006864:	08006b81 	.word	0x08006b81
 8006868:	08006ba3 	.word	0x08006ba3
 800686c:	08006bdb 	.word	0x08006bdb
 8006870:	08006bff 	.word	0x08006bff

08006874 <_cleanup_r>:
 8006874:	4901      	ldr	r1, [pc, #4]	; (800687c <_cleanup_r+0x8>)
 8006876:	f000 b8af 	b.w	80069d8 <_fwalk_reent>
 800687a:	bf00      	nop
 800687c:	080067b5 	.word	0x080067b5

08006880 <__sfmoreglue>:
 8006880:	2268      	movs	r2, #104	; 0x68
 8006882:	b570      	push	{r4, r5, r6, lr}
 8006884:	1e4d      	subs	r5, r1, #1
 8006886:	4355      	muls	r5, r2
 8006888:	460e      	mov	r6, r1
 800688a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800688e:	f7ff fa6b 	bl	8005d68 <_malloc_r>
 8006892:	4604      	mov	r4, r0
 8006894:	b140      	cbz	r0, 80068a8 <__sfmoreglue+0x28>
 8006896:	2100      	movs	r1, #0
 8006898:	e9c0 1600 	strd	r1, r6, [r0]
 800689c:	300c      	adds	r0, #12
 800689e:	60a0      	str	r0, [r4, #8]
 80068a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068a4:	f7fd fb36 	bl	8003f14 <memset>
 80068a8:	4620      	mov	r0, r4
 80068aa:	bd70      	pop	{r4, r5, r6, pc}

080068ac <__sfp_lock_acquire>:
 80068ac:	4801      	ldr	r0, [pc, #4]	; (80068b4 <__sfp_lock_acquire+0x8>)
 80068ae:	f000 b8b3 	b.w	8006a18 <__retarget_lock_acquire_recursive>
 80068b2:	bf00      	nop
 80068b4:	200002dd 	.word	0x200002dd

080068b8 <__sfp_lock_release>:
 80068b8:	4801      	ldr	r0, [pc, #4]	; (80068c0 <__sfp_lock_release+0x8>)
 80068ba:	f000 b8ae 	b.w	8006a1a <__retarget_lock_release_recursive>
 80068be:	bf00      	nop
 80068c0:	200002dd 	.word	0x200002dd

080068c4 <__sinit_lock_acquire>:
 80068c4:	4801      	ldr	r0, [pc, #4]	; (80068cc <__sinit_lock_acquire+0x8>)
 80068c6:	f000 b8a7 	b.w	8006a18 <__retarget_lock_acquire_recursive>
 80068ca:	bf00      	nop
 80068cc:	200002de 	.word	0x200002de

080068d0 <__sinit_lock_release>:
 80068d0:	4801      	ldr	r0, [pc, #4]	; (80068d8 <__sinit_lock_release+0x8>)
 80068d2:	f000 b8a2 	b.w	8006a1a <__retarget_lock_release_recursive>
 80068d6:	bf00      	nop
 80068d8:	200002de 	.word	0x200002de

080068dc <__sinit>:
 80068dc:	b510      	push	{r4, lr}
 80068de:	4604      	mov	r4, r0
 80068e0:	f7ff fff0 	bl	80068c4 <__sinit_lock_acquire>
 80068e4:	69a3      	ldr	r3, [r4, #24]
 80068e6:	b11b      	cbz	r3, 80068f0 <__sinit+0x14>
 80068e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ec:	f7ff bff0 	b.w	80068d0 <__sinit_lock_release>
 80068f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068f4:	6523      	str	r3, [r4, #80]	; 0x50
 80068f6:	4b13      	ldr	r3, [pc, #76]	; (8006944 <__sinit+0x68>)
 80068f8:	4a13      	ldr	r2, [pc, #76]	; (8006948 <__sinit+0x6c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80068fe:	42a3      	cmp	r3, r4
 8006900:	bf08      	it	eq
 8006902:	2301      	moveq	r3, #1
 8006904:	4620      	mov	r0, r4
 8006906:	bf08      	it	eq
 8006908:	61a3      	streq	r3, [r4, #24]
 800690a:	f000 f81f 	bl	800694c <__sfp>
 800690e:	6060      	str	r0, [r4, #4]
 8006910:	4620      	mov	r0, r4
 8006912:	f000 f81b 	bl	800694c <__sfp>
 8006916:	60a0      	str	r0, [r4, #8]
 8006918:	4620      	mov	r0, r4
 800691a:	f000 f817 	bl	800694c <__sfp>
 800691e:	2200      	movs	r2, #0
 8006920:	2104      	movs	r1, #4
 8006922:	60e0      	str	r0, [r4, #12]
 8006924:	6860      	ldr	r0, [r4, #4]
 8006926:	f7ff ff81 	bl	800682c <std>
 800692a:	2201      	movs	r2, #1
 800692c:	2109      	movs	r1, #9
 800692e:	68a0      	ldr	r0, [r4, #8]
 8006930:	f7ff ff7c 	bl	800682c <std>
 8006934:	2202      	movs	r2, #2
 8006936:	2112      	movs	r1, #18
 8006938:	68e0      	ldr	r0, [r4, #12]
 800693a:	f7ff ff77 	bl	800682c <std>
 800693e:	2301      	movs	r3, #1
 8006940:	61a3      	str	r3, [r4, #24]
 8006942:	e7d1      	b.n	80068e8 <__sinit+0xc>
 8006944:	08006e64 	.word	0x08006e64
 8006948:	08006875 	.word	0x08006875

0800694c <__sfp>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	4607      	mov	r7, r0
 8006950:	f7ff ffac 	bl	80068ac <__sfp_lock_acquire>
 8006954:	4b1e      	ldr	r3, [pc, #120]	; (80069d0 <__sfp+0x84>)
 8006956:	681e      	ldr	r6, [r3, #0]
 8006958:	69b3      	ldr	r3, [r6, #24]
 800695a:	b913      	cbnz	r3, 8006962 <__sfp+0x16>
 800695c:	4630      	mov	r0, r6
 800695e:	f7ff ffbd 	bl	80068dc <__sinit>
 8006962:	3648      	adds	r6, #72	; 0x48
 8006964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006968:	3b01      	subs	r3, #1
 800696a:	d503      	bpl.n	8006974 <__sfp+0x28>
 800696c:	6833      	ldr	r3, [r6, #0]
 800696e:	b30b      	cbz	r3, 80069b4 <__sfp+0x68>
 8006970:	6836      	ldr	r6, [r6, #0]
 8006972:	e7f7      	b.n	8006964 <__sfp+0x18>
 8006974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006978:	b9d5      	cbnz	r5, 80069b0 <__sfp+0x64>
 800697a:	4b16      	ldr	r3, [pc, #88]	; (80069d4 <__sfp+0x88>)
 800697c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006980:	60e3      	str	r3, [r4, #12]
 8006982:	6665      	str	r5, [r4, #100]	; 0x64
 8006984:	f000 f847 	bl	8006a16 <__retarget_lock_init_recursive>
 8006988:	f7ff ff96 	bl	80068b8 <__sfp_lock_release>
 800698c:	2208      	movs	r2, #8
 800698e:	4629      	mov	r1, r5
 8006990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006998:	6025      	str	r5, [r4, #0]
 800699a:	61a5      	str	r5, [r4, #24]
 800699c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069a0:	f7fd fab8 	bl	8003f14 <memset>
 80069a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069ac:	4620      	mov	r0, r4
 80069ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b0:	3468      	adds	r4, #104	; 0x68
 80069b2:	e7d9      	b.n	8006968 <__sfp+0x1c>
 80069b4:	2104      	movs	r1, #4
 80069b6:	4638      	mov	r0, r7
 80069b8:	f7ff ff62 	bl	8006880 <__sfmoreglue>
 80069bc:	4604      	mov	r4, r0
 80069be:	6030      	str	r0, [r6, #0]
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d1d5      	bne.n	8006970 <__sfp+0x24>
 80069c4:	f7ff ff78 	bl	80068b8 <__sfp_lock_release>
 80069c8:	230c      	movs	r3, #12
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	e7ee      	b.n	80069ac <__sfp+0x60>
 80069ce:	bf00      	nop
 80069d0:	08006e64 	.word	0x08006e64
 80069d4:	ffff0001 	.word	0xffff0001

080069d8 <_fwalk_reent>:
 80069d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069dc:	4606      	mov	r6, r0
 80069de:	4688      	mov	r8, r1
 80069e0:	2700      	movs	r7, #0
 80069e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069ea:	f1b9 0901 	subs.w	r9, r9, #1
 80069ee:	d505      	bpl.n	80069fc <_fwalk_reent+0x24>
 80069f0:	6824      	ldr	r4, [r4, #0]
 80069f2:	2c00      	cmp	r4, #0
 80069f4:	d1f7      	bne.n	80069e6 <_fwalk_reent+0xe>
 80069f6:	4638      	mov	r0, r7
 80069f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069fc:	89ab      	ldrh	r3, [r5, #12]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d907      	bls.n	8006a12 <_fwalk_reent+0x3a>
 8006a02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a06:	3301      	adds	r3, #1
 8006a08:	d003      	beq.n	8006a12 <_fwalk_reent+0x3a>
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	47c0      	blx	r8
 8006a10:	4307      	orrs	r7, r0
 8006a12:	3568      	adds	r5, #104	; 0x68
 8006a14:	e7e9      	b.n	80069ea <_fwalk_reent+0x12>

08006a16 <__retarget_lock_init_recursive>:
 8006a16:	4770      	bx	lr

08006a18 <__retarget_lock_acquire_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <__retarget_lock_release_recursive>:
 8006a1a:	4770      	bx	lr

08006a1c <__swhatbuf_r>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	460e      	mov	r6, r1
 8006a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a24:	4614      	mov	r4, r2
 8006a26:	2900      	cmp	r1, #0
 8006a28:	461d      	mov	r5, r3
 8006a2a:	b096      	sub	sp, #88	; 0x58
 8006a2c:	da08      	bge.n	8006a40 <__swhatbuf_r+0x24>
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a34:	602a      	str	r2, [r5, #0]
 8006a36:	061a      	lsls	r2, r3, #24
 8006a38:	d410      	bmi.n	8006a5c <__swhatbuf_r+0x40>
 8006a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a3e:	e00e      	b.n	8006a5e <__swhatbuf_r+0x42>
 8006a40:	466a      	mov	r2, sp
 8006a42:	f000 f903 	bl	8006c4c <_fstat_r>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	dbf1      	blt.n	8006a2e <__swhatbuf_r+0x12>
 8006a4a:	9a01      	ldr	r2, [sp, #4]
 8006a4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a54:	425a      	negs	r2, r3
 8006a56:	415a      	adcs	r2, r3
 8006a58:	602a      	str	r2, [r5, #0]
 8006a5a:	e7ee      	b.n	8006a3a <__swhatbuf_r+0x1e>
 8006a5c:	2340      	movs	r3, #64	; 0x40
 8006a5e:	2000      	movs	r0, #0
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	b016      	add	sp, #88	; 0x58
 8006a64:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a68 <__smakebuf_r>:
 8006a68:	898b      	ldrh	r3, [r1, #12]
 8006a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a6c:	079d      	lsls	r5, r3, #30
 8006a6e:	4606      	mov	r6, r0
 8006a70:	460c      	mov	r4, r1
 8006a72:	d507      	bpl.n	8006a84 <__smakebuf_r+0x1c>
 8006a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	6123      	str	r3, [r4, #16]
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	6163      	str	r3, [r4, #20]
 8006a80:	b002      	add	sp, #8
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	466a      	mov	r2, sp
 8006a86:	ab01      	add	r3, sp, #4
 8006a88:	f7ff ffc8 	bl	8006a1c <__swhatbuf_r>
 8006a8c:	9900      	ldr	r1, [sp, #0]
 8006a8e:	4605      	mov	r5, r0
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7ff f969 	bl	8005d68 <_malloc_r>
 8006a96:	b948      	cbnz	r0, 8006aac <__smakebuf_r+0x44>
 8006a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a9c:	059a      	lsls	r2, r3, #22
 8006a9e:	d4ef      	bmi.n	8006a80 <__smakebuf_r+0x18>
 8006aa0:	f023 0303 	bic.w	r3, r3, #3
 8006aa4:	f043 0302 	orr.w	r3, r3, #2
 8006aa8:	81a3      	strh	r3, [r4, #12]
 8006aaa:	e7e3      	b.n	8006a74 <__smakebuf_r+0xc>
 8006aac:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <__smakebuf_r+0x7c>)
 8006aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	6020      	str	r0, [r4, #0]
 8006ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab8:	81a3      	strh	r3, [r4, #12]
 8006aba:	9b00      	ldr	r3, [sp, #0]
 8006abc:	6120      	str	r0, [r4, #16]
 8006abe:	6163      	str	r3, [r4, #20]
 8006ac0:	9b01      	ldr	r3, [sp, #4]
 8006ac2:	b15b      	cbz	r3, 8006adc <__smakebuf_r+0x74>
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aca:	f000 f8d1 	bl	8006c70 <_isatty_r>
 8006ace:	b128      	cbz	r0, 8006adc <__smakebuf_r+0x74>
 8006ad0:	89a3      	ldrh	r3, [r4, #12]
 8006ad2:	f023 0303 	bic.w	r3, r3, #3
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	81a3      	strh	r3, [r4, #12]
 8006adc:	89a0      	ldrh	r0, [r4, #12]
 8006ade:	4305      	orrs	r5, r0
 8006ae0:	81a5      	strh	r5, [r4, #12]
 8006ae2:	e7cd      	b.n	8006a80 <__smakebuf_r+0x18>
 8006ae4:	08006875 	.word	0x08006875

08006ae8 <_malloc_usable_size_r>:
 8006ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aec:	1f18      	subs	r0, r3, #4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bfbc      	itt	lt
 8006af2:	580b      	ldrlt	r3, [r1, r0]
 8006af4:	18c0      	addlt	r0, r0, r3
 8006af6:	4770      	bx	lr

08006af8 <_raise_r>:
 8006af8:	291f      	cmp	r1, #31
 8006afa:	b538      	push	{r3, r4, r5, lr}
 8006afc:	4604      	mov	r4, r0
 8006afe:	460d      	mov	r5, r1
 8006b00:	d904      	bls.n	8006b0c <_raise_r+0x14>
 8006b02:	2316      	movs	r3, #22
 8006b04:	6003      	str	r3, [r0, #0]
 8006b06:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
 8006b0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b0e:	b112      	cbz	r2, 8006b16 <_raise_r+0x1e>
 8006b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b14:	b94b      	cbnz	r3, 8006b2a <_raise_r+0x32>
 8006b16:	4620      	mov	r0, r4
 8006b18:	f000 f830 	bl	8006b7c <_getpid_r>
 8006b1c:	462a      	mov	r2, r5
 8006b1e:	4601      	mov	r1, r0
 8006b20:	4620      	mov	r0, r4
 8006b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b26:	f000 b817 	b.w	8006b58 <_kill_r>
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d00a      	beq.n	8006b44 <_raise_r+0x4c>
 8006b2e:	1c59      	adds	r1, r3, #1
 8006b30:	d103      	bne.n	8006b3a <_raise_r+0x42>
 8006b32:	2316      	movs	r3, #22
 8006b34:	6003      	str	r3, [r0, #0]
 8006b36:	2001      	movs	r0, #1
 8006b38:	e7e7      	b.n	8006b0a <_raise_r+0x12>
 8006b3a:	2400      	movs	r4, #0
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b42:	4798      	blx	r3
 8006b44:	2000      	movs	r0, #0
 8006b46:	e7e0      	b.n	8006b0a <_raise_r+0x12>

08006b48 <raise>:
 8006b48:	4b02      	ldr	r3, [pc, #8]	; (8006b54 <raise+0xc>)
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	f7ff bfd3 	b.w	8006af8 <_raise_r>
 8006b52:	bf00      	nop
 8006b54:	20000028 	.word	0x20000028

08006b58 <_kill_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4d06      	ldr	r5, [pc, #24]	; (8006b78 <_kill_r+0x20>)
 8006b5e:	4604      	mov	r4, r0
 8006b60:	4608      	mov	r0, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	602b      	str	r3, [r5, #0]
 8006b66:	f7fa fc79 	bl	800145c <_kill>
 8006b6a:	1c43      	adds	r3, r0, #1
 8006b6c:	d102      	bne.n	8006b74 <_kill_r+0x1c>
 8006b6e:	682b      	ldr	r3, [r5, #0]
 8006b70:	b103      	cbz	r3, 8006b74 <_kill_r+0x1c>
 8006b72:	6023      	str	r3, [r4, #0]
 8006b74:	bd38      	pop	{r3, r4, r5, pc}
 8006b76:	bf00      	nop
 8006b78:	200002d8 	.word	0x200002d8

08006b7c <_getpid_r>:
 8006b7c:	f7fa bc67 	b.w	800144e <_getpid>

08006b80 <__sread>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	460c      	mov	r4, r1
 8006b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b88:	f000 f894 	bl	8006cb4 <_read_r>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	bfab      	itete	ge
 8006b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b92:	89a3      	ldrhlt	r3, [r4, #12]
 8006b94:	181b      	addge	r3, r3, r0
 8006b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b9a:	bfac      	ite	ge
 8006b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b9e:	81a3      	strhlt	r3, [r4, #12]
 8006ba0:	bd10      	pop	{r4, pc}

08006ba2 <__swrite>:
 8006ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba6:	461f      	mov	r7, r3
 8006ba8:	898b      	ldrh	r3, [r1, #12]
 8006baa:	4605      	mov	r5, r0
 8006bac:	05db      	lsls	r3, r3, #23
 8006bae:	460c      	mov	r4, r1
 8006bb0:	4616      	mov	r6, r2
 8006bb2:	d505      	bpl.n	8006bc0 <__swrite+0x1e>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bbc:	f000 f868 	bl	8006c90 <_lseek_r>
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	4632      	mov	r2, r6
 8006bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bc8:	81a3      	strh	r3, [r4, #12]
 8006bca:	4628      	mov	r0, r5
 8006bcc:	463b      	mov	r3, r7
 8006bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd6:	f000 b817 	b.w	8006c08 <_write_r>

08006bda <__sseek>:
 8006bda:	b510      	push	{r4, lr}
 8006bdc:	460c      	mov	r4, r1
 8006bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be2:	f000 f855 	bl	8006c90 <_lseek_r>
 8006be6:	1c43      	adds	r3, r0, #1
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	bf15      	itete	ne
 8006bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bf6:	81a3      	strheq	r3, [r4, #12]
 8006bf8:	bf18      	it	ne
 8006bfa:	81a3      	strhne	r3, [r4, #12]
 8006bfc:	bd10      	pop	{r4, pc}

08006bfe <__sclose>:
 8006bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c02:	f000 b813 	b.w	8006c2c <_close_r>
	...

08006c08 <_write_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	4611      	mov	r1, r2
 8006c10:	2200      	movs	r2, #0
 8006c12:	4d05      	ldr	r5, [pc, #20]	; (8006c28 <_write_r+0x20>)
 8006c14:	602a      	str	r2, [r5, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	f7fa fc57 	bl	80014ca <_write>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_write_r+0x1e>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_write_r+0x1e>
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	200002d8 	.word	0x200002d8

08006c2c <_close_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	2300      	movs	r3, #0
 8006c30:	4d05      	ldr	r5, [pc, #20]	; (8006c48 <_close_r+0x1c>)
 8006c32:	4604      	mov	r4, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	602b      	str	r3, [r5, #0]
 8006c38:	f7fa fc63 	bl	8001502 <_close>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_close_r+0x1a>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_close_r+0x1a>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	200002d8 	.word	0x200002d8

08006c4c <_fstat_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	2300      	movs	r3, #0
 8006c50:	4d06      	ldr	r5, [pc, #24]	; (8006c6c <_fstat_r+0x20>)
 8006c52:	4604      	mov	r4, r0
 8006c54:	4608      	mov	r0, r1
 8006c56:	4611      	mov	r1, r2
 8006c58:	602b      	str	r3, [r5, #0]
 8006c5a:	f7fa fc5d 	bl	8001518 <_fstat>
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	d102      	bne.n	8006c68 <_fstat_r+0x1c>
 8006c62:	682b      	ldr	r3, [r5, #0]
 8006c64:	b103      	cbz	r3, 8006c68 <_fstat_r+0x1c>
 8006c66:	6023      	str	r3, [r4, #0]
 8006c68:	bd38      	pop	{r3, r4, r5, pc}
 8006c6a:	bf00      	nop
 8006c6c:	200002d8 	.word	0x200002d8

08006c70 <_isatty_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	2300      	movs	r3, #0
 8006c74:	4d05      	ldr	r5, [pc, #20]	; (8006c8c <_isatty_r+0x1c>)
 8006c76:	4604      	mov	r4, r0
 8006c78:	4608      	mov	r0, r1
 8006c7a:	602b      	str	r3, [r5, #0]
 8006c7c:	f7fa fc5b 	bl	8001536 <_isatty>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d102      	bne.n	8006c8a <_isatty_r+0x1a>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	b103      	cbz	r3, 8006c8a <_isatty_r+0x1a>
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	200002d8 	.word	0x200002d8

08006c90 <_lseek_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	4611      	mov	r1, r2
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4d05      	ldr	r5, [pc, #20]	; (8006cb0 <_lseek_r+0x20>)
 8006c9c:	602a      	str	r2, [r5, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f7fa fc53 	bl	800154a <_lseek>
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	d102      	bne.n	8006cae <_lseek_r+0x1e>
 8006ca8:	682b      	ldr	r3, [r5, #0]
 8006caa:	b103      	cbz	r3, 8006cae <_lseek_r+0x1e>
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	bd38      	pop	{r3, r4, r5, pc}
 8006cb0:	200002d8 	.word	0x200002d8

08006cb4 <_read_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	4611      	mov	r1, r2
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	4d05      	ldr	r5, [pc, #20]	; (8006cd4 <_read_r+0x20>)
 8006cc0:	602a      	str	r2, [r5, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f7fa fbe4 	bl	8001490 <_read>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_read_r+0x1e>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_read_r+0x1e>
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	200002d8 	.word	0x200002d8

08006cd8 <_init>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	bf00      	nop
 8006cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cde:	bc08      	pop	{r3}
 8006ce0:	469e      	mov	lr, r3
 8006ce2:	4770      	bx	lr

08006ce4 <_fini>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	bf00      	nop
 8006ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cea:	bc08      	pop	{r3}
 8006cec:	469e      	mov	lr, r3
 8006cee:	4770      	bx	lr
